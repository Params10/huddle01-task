{"version":3,"file":"bc-ur-registry-eth.esm.js","sources":["../src/RegistryType.ts","../src/EthSignRequest.ts","../src/EthSignature.ts","../src/utlis.ts","../src/index.ts"],"sourcesContent":["import {extend} from '@keystonehq/bc-ur-registry'\nconst {RegistryType} = extend;\n\nexport const ExtendedRegistryTypes = {\n    ETH_SIGN_REQUEST: new RegistryType('eth-sign-request', 401),\n    ETH_SIGNATAURE: new RegistryType('eth-signature', 402)\n}","import { CryptoKeypath, extend, DataItem, PathComponent, RegistryItem } from '@keystonehq/bc-ur-registry';\nimport { ExtendedRegistryTypes } from './RegistryType';\nimport * as uuid from 'uuid';\n\nconst { decodeToDataItem, RegistryTypes } = extend;\n\nenum Keys {\n    requestId = 1,\n    signData,\n    dataType,\n    chainId,\n    derivationPath,\n    address,\n}\n\nexport enum DataType {\n    transaction = 1,\n    typedData = 2,\n    personalMessage = 3,\n    typedTransaction = 4,\n}\n\ntype signRequestProps = {\n    requestId?: Buffer;\n    signData: Buffer;\n    dataType: DataType;\n    chainId?: number;\n    derivationPath: CryptoKeypath;\n    address?: Buffer;\n};\n\nexport class EthSignRequest extends RegistryItem {\n    private requestId: Buffer;\n    private signData: Buffer;\n    private dataType: DataType;\n    private chainId: number;\n    private derivationPath: CryptoKeypath;\n    private address: Buffer;\n\n    getRegistryType = () => ExtendedRegistryTypes.ETH_SIGN_REQUEST;\n\n    constructor(args: signRequestProps) {\n        super();\n        this.setupData(args);\n    }\n\n    private setupData = (args: signRequestProps) => {\n        this.requestId = args.requestId;\n        this.signData = args.signData;\n        this.dataType = args.dataType;\n        this.chainId = args.chainId;\n        this.derivationPath = args.derivationPath;\n        this.address = args.address;\n    };\n\n    public getRequestId = () => this.requestId;\n    public getSignData = () => this.signData;\n    public getDataType = () => this.dataType;\n    public getChainId = () => this.chainId;\n    public getDerivationPath = () => this.derivationPath.getPath();\n    public getSignRequestAddress = () => this.address;\n\n    public toDataItem = () => {\n        const map = {};\n        if (this.requestId) {\n            map[Keys.requestId] = new DataItem(this.requestId, RegistryTypes.UUID.getTag());\n        }\n        if (this.address) {\n            map[Keys.address] = this.address;\n        }\n        if (this.chainId) {\n            map[Keys.chainId] = this.chainId;\n        }\n\n        map[Keys.signData] = this.signData;\n        map[Keys.dataType] = this.dataType;\n\n        const keyPath = this.derivationPath.toDataItem();\n        keyPath.setTag(this.derivationPath.getRegistryType().getTag());\n        map[Keys.derivationPath] = keyPath;\n\n        return new DataItem(map);\n    };\n\n    public static fromDataItem = (dataItem) => {\n        const map = dataItem.getData();\n        const signData = map[Keys.signData];\n        const dataType = map[Keys.dataType];\n        const derivationPath = CryptoKeypath.fromDataItem(map[Keys.derivationPath]);\n        const chainId = map[Keys.chainId] ? map[Keys.chainId] : undefined;\n        const address = map[Keys.address] ? map[Keys.address] : undefined;\n        const requestId = map[Keys.requestId] ? map[Keys.requestId].getData() : undefined;\n\n        return new EthSignRequest({\n            requestId,\n            signData,\n            dataType,\n            chainId,\n            derivationPath,\n            address,\n        });\n    };\n\n    public static fromCBOR = (_cborPayload: Buffer) => {\n        const dataItem = decodeToDataItem(_cborPayload);\n        return EthSignRequest.fromDataItem(dataItem);\n    };\n\n    public static constructETHRequest(\n        signData: Buffer,\n        signDataType: DataType,\n        hdPath: string,\n        xfp: string,\n        uuidString?: string,\n        chainId?: number,\n        address?: string,\n    ) {\n        const paths = hdPath.replace(/[m|M]\\//, '').split('/');\n        const hdpathObject = new CryptoKeypath(\n            paths.map((path) => {\n                const index = parseInt(path.replace(\"'\", ''));\n                let isHardened = false;\n                if (path.endsWith(\"'\")) {\n                    isHardened = true;\n                }\n                return new PathComponent({ index, hardened: isHardened });\n            }),\n            Buffer.from(xfp, 'hex'),\n        );\n\n        return new EthSignRequest({\n            requestId: uuidString ? Buffer.from(uuid.parse(uuidString) as Uint8Array) : undefined,\n            signData,\n            dataType: signDataType,\n            derivationPath: hdpathObject,\n            chainId,\n            address: address ? Buffer.from(address.replace('0x', ''), 'hex') : undefined,\n        });\n    }\n}\n","import { extend, DataItem, RegistryItem } from '@keystonehq/bc-ur-registry';\nimport { ExtendedRegistryTypes } from './RegistryType';\n\nconst { RegistryTypes, decodeToDataItem } = extend;\n\nenum Keys {\n    requestId = 1,\n    signature,\n}\n\nexport class ETHSignature extends RegistryItem {\n    private requestId: Buffer;\n    private signature: Buffer;\n\n    getRegistryType = () => ExtendedRegistryTypes.ETH_SIGNATAURE;\n\n    constructor(signature: Buffer, requestId?: Buffer) {\n        super();\n        this.signature = signature;\n        this.requestId = requestId;\n    }\n\n    public getRequestId = () => this.requestId;\n    public getSignature = () => this.signature;\n\n    public toDataItem = () => {\n        const map = {};\n        if (this.requestId) {\n            map[Keys.requestId] = new DataItem(this.requestId, RegistryTypes.UUID.getTag());\n        }\n        map[Keys.signature] = this.signature;\n        return new DataItem(map);\n    };\n\n    public static fromDataItem = (dataItem) => {\n        const map = dataItem.getData();\n        const signature = map[Keys.signature];\n        const requestId = map[Keys.requestId] ? map[Keys.requestId].getData() : undefined;\n\n        return new ETHSignature(signature, requestId);\n    };\n\n    public static fromCBOR = (_cborPayload: Buffer) => {\n        const dataItem = decodeToDataItem(_cborPayload);\n        return ETHSignature.fromDataItem(dataItem);\n    };\n}\n","// @ts-ignore\nimport HDKey from 'hdkey'\nimport { toChecksumAddress, publicToAddress } from 'ethereumjs-util';\n\nexport const generateAddressfromXpub = (xpub: string, derivePath: string) => {\n    // @ts-ignore\n    const node = HDKey.fromExtendedKey(xpub)\n    const publicKey = node.derive(derivePath)\n    const address = '0x' + publicToAddress(publicKey.publicKey, true).toString('hex');\n    return toChecksumAddress(address);\n}\n\n\nexport const findHDpatfromAddress = (address: string, xpub: string, numberLimit: number, rootPath: string) => {\n    for (let i = 0; i < numberLimit; i++) {\n        let path = `M/0/${i}`\n        let caculateAddress = generateAddressfromXpub(xpub, path)\n        if (address.toLowerCase() == caculateAddress.toLowerCase()) {\n            return `${rootPath}/0/${i}`\n        }\n    }\n    return null\n}","export * from '@keystonehq/bc-ur-registry';\nimport { extend } from '@keystonehq/bc-ur-registry';\nimport { ExtendedRegistryTypes } from './RegistryType';\nconst { cbor } = extend;\ncbor.patchTags(\n    Object.values(ExtendedRegistryTypes)\n        .filter((rt) => !!rt.getTag())\n        .map((rt) => rt.getTag()),\n);\n\nexport { EthSignRequest, DataType } from './EthSignRequest';\nexport { ETHSignature } from './EthSignature';\n\nexport { generateAddressfromXpub, findHDpatfromAddress } from './utlis'"],"names":["RegistryType","extend","ExtendedRegistryTypes","ETH_SIGN_REQUEST","ETH_SIGNATAURE","decodeToDataItem","RegistryTypes","Keys","DataType","EthSignRequest","RegistryItem","constructor","args","requestId","signData","dataType","chainId","derivationPath","address","getPath","map","DataItem","UUID","getTag","keyPath","toDataItem","setTag","getRegistryType","setupData","constructETHRequest","signDataType","hdPath","xfp","uuidString","paths","replace","split","hdpathObject","CryptoKeypath","path","index","parseInt","isHardened","endsWith","PathComponent","hardened","Buffer","from","uuid","undefined","dataItem","getData","fromDataItem","_cborPayload","ETHSignature","signature","generateAddressfromXpub","xpub","derivePath","node","HDKey","fromExtendedKey","publicKey","derive","publicToAddress","toString","toChecksumAddress","findHDpatfromAddress","numberLimit","rootPath","i","caculateAddress","toLowerCase","cbor","patchTags","Object","values","filter","rt"],"mappings":"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"}