{"ast":null,"code":"import blob from \"@ledgerhq/cryptoassets/data/erc20-signatures\";\n/**\n * Retrieve the token information by a given contract address if any\n */\n\nexport const byContractAddress = contract => get().byContract(asContractAddress(contract));\n/**\n * list all the ERC20 tokens informations\n */\n\nexport const list = () => get().list();\n\nconst asContractAddress = addr => {\n  const a = addr.toLowerCase();\n  return a.startsWith(\"0x\") ? a : \"0x\" + a;\n}; // this internal get() will lazy load and cache the data from the erc20 data blob\n\n\nconst get = (() => {\n  let cache;\n  return () => {\n    if (cache) return cache;\n    const buf = Buffer.from(blob, \"base64\");\n    const byContract = {};\n    const entries = [];\n    let i = 0;\n\n    while (i < buf.length) {\n      const length = buf.readUInt32BE(i);\n      i += 4;\n      const item = buf.slice(i, i + length);\n      let j = 0;\n      const tickerLength = item.readUInt8(j);\n      j += 1;\n      const ticker = item.slice(j, j + tickerLength).toString(\"ascii\");\n      j += tickerLength;\n      const contractAddress = asContractAddress(item.slice(j, j + 20).toString(\"hex\"));\n      j += 20;\n      const decimals = item.readUInt32BE(j);\n      j += 4;\n      const chainId = item.readUInt32BE(j);\n      j += 4;\n      const signature = item.slice(j);\n      const entry = {\n        ticker,\n        contractAddress,\n        decimals,\n        chainId,\n        signature,\n        data: item\n      };\n      entries.push(entry);\n      byContract[contractAddress] = entry;\n      i += length;\n    }\n\n    const api = {\n      list: () => entries,\n      byContract: contractAddress => byContract[contractAddress]\n    };\n    cache = api;\n    return api;\n  };\n})();","map":{"version":3,"sources":["../src/erc20.js"],"names":["byContractAddress","contract","get","asContractAddress","list","addr","a","buf","Buffer","byContract","entries","i","length","item","j","tickerLength","ticker","contractAddress","decimals","chainId","signature","entry","data","api","cache"],"mappings":"AACA,OAAA,IAAA,MAAA,8CAAA;AAEA;AACA;AACA;;AACA,OAAO,MAAMA,iBAAiB,GAAIC,QAAD,IAC/BC,GAAG,GAAHA,UAAAA,CAAiBC,iBAAiB,CAD7B,QAC6B,CAAlCD,CADK;AAGP;AACA;AACA;;AACA,OAAO,MAAME,IAAI,GAAG,MAAmBF,GAAG,GAAnC,IAAgCA,EAAhC;;AAgBP,MAAMC,iBAAiB,GAAIE,IAAD,IAAkB;AAC1C,QAAMC,CAAC,GAAGD,IAAI,CAAd,WAAUA,EAAV;AACA,SAAOC,CAAC,CAADA,UAAAA,CAAAA,IAAAA,IAAAA,CAAAA,GAAyB,OAAhC,CAAA;AAFF,CAAA,C,CAKA;;;AACA,MAAMJ,GAAc,GAAG,CAAC,MAAM;AAC5B,MAAA,KAAA;AACA,SAAO,MAAM;AACX,QAAA,KAAA,EAAW,OAAA,KAAA;AACX,UAAMK,GAAG,GAAGC,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAZ,QAAYA,CAAZ;AACA,UAAMC,UAAU,GAAhB,EAAA;AACA,UAAMC,OAAO,GAAb,EAAA;AACA,QAAIC,CAAC,GAAL,CAAA;;AACA,WAAOA,CAAC,GAAGJ,GAAG,CAAd,MAAA,EAAuB;AACrB,YAAMK,MAAM,GAAGL,GAAG,CAAHA,YAAAA,CAAf,CAAeA,CAAf;AACAI,MAAAA,CAAC,IAADA,CAAAA;AACA,YAAME,IAAI,GAAGN,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAaI,CAAC,GAA3B,MAAaJ,CAAb;AACA,UAAIO,CAAC,GAAL,CAAA;AACA,YAAMC,YAAY,GAAGF,IAAI,CAAJA,SAAAA,CAArB,CAAqBA,CAArB;AACAC,MAAAA,CAAC,IAADA,CAAAA;AACA,YAAME,MAAM,GAAGH,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAcC,CAAC,GAAfD,YAAAA,EAAAA,QAAAA,CAAf,OAAeA,CAAf;AACAC,MAAAA,CAAC,IAADA,YAAAA;AACA,YAAMG,eAAe,GAAGd,iBAAiB,CACvCU,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAcC,CAAC,GAAfD,EAAAA,EAAAA,QAAAA,CADF,KACEA,CADuC,CAAzC;AAGAC,MAAAA,CAAC,IAADA,EAAAA;AACA,YAAMI,QAAQ,GAAGL,IAAI,CAAJA,YAAAA,CAAjB,CAAiBA,CAAjB;AACAC,MAAAA,CAAC,IAADA,CAAAA;AACA,YAAMK,OAAO,GAAGN,IAAI,CAAJA,YAAAA,CAAhB,CAAgBA,CAAhB;AACAC,MAAAA,CAAC,IAADA,CAAAA;AACA,YAAMM,SAAS,GAAGP,IAAI,CAAJA,KAAAA,CAAlB,CAAkBA,CAAlB;AACA,YAAMQ,KAAwB,GAAG;AAAA,QAAA,MAAA;AAAA,QAAA,eAAA;AAAA,QAAA,QAAA;AAAA,QAAA,OAAA;AAAA,QAAA,SAAA;AAM/BC,QAAAA,IAAI,EAAET;AANyB,OAAjC;AAQAH,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,KAAAA;AACAD,MAAAA,UAAU,CAAVA,eAAU,CAAVA,GAAAA,KAAAA;AACAE,MAAAA,CAAC,IAADA,MAAAA;AACD;;AACD,UAAMY,GAAG,GAAG;AACVnB,MAAAA,IAAI,EAAE,MADI,OAAA;AAEVK,MAAAA,UAAU,EAAGQ,eAAD,IAAqBR,UAAU,CAAA,eAAA;AAFjC,KAAZ;AAIAe,IAAAA,KAAK,GAALA,GAAAA;AACA,WAAA,GAAA;AAzCF,GAAA;AAFF,CAAuB,GAAvB","sourcesContent":["// @flow\nimport blob from \"@ledgerhq/cryptoassets/data/erc20-signatures\";\n\n/**\n * Retrieve the token information by a given contract address if any\n */\nexport const byContractAddress = (contract: string): ?TokenInfo =>\n  get().byContract(asContractAddress(contract));\n\n/**\n * list all the ERC20 tokens informations\n */\nexport const list = (): TokenInfo[] => get().list();\n\nexport type TokenInfo = {\n  contractAddress: string,\n  ticker: string,\n  decimals: number,\n  chainId: number,\n  signature: Buffer,\n  data: Buffer,\n};\n\nexport type API = {\n  byContract: (string) => ?TokenInfo,\n  list: () => TokenInfo[],\n};\n\nconst asContractAddress = (addr: string) => {\n  const a = addr.toLowerCase();\n  return a.startsWith(\"0x\") ? a : \"0x\" + a;\n};\n\n// this internal get() will lazy load and cache the data from the erc20 data blob\nconst get: () => API = (() => {\n  let cache;\n  return () => {\n    if (cache) return cache;\n    const buf = Buffer.from(blob, \"base64\");\n    const byContract = {};\n    const entries = [];\n    let i = 0;\n    while (i < buf.length) {\n      const length = buf.readUInt32BE(i);\n      i += 4;\n      const item = buf.slice(i, i + length);\n      let j = 0;\n      const tickerLength = item.readUInt8(j);\n      j += 1;\n      const ticker = item.slice(j, j + tickerLength).toString(\"ascii\");\n      j += tickerLength;\n      const contractAddress = asContractAddress(\n        item.slice(j, j + 20).toString(\"hex\")\n      );\n      j += 20;\n      const decimals = item.readUInt32BE(j);\n      j += 4;\n      const chainId = item.readUInt32BE(j);\n      j += 4;\n      const signature = item.slice(j);\n      const entry: $Exact<TokenInfo> = {\n        ticker,\n        contractAddress,\n        decimals,\n        chainId,\n        signature,\n        data: item,\n      };\n      entries.push(entry);\n      byContract[contractAddress] = entry;\n      i += length;\n    }\n    const api = {\n      list: () => entries,\n      byContract: (contractAddress) => byContract[contractAddress],\n    };\n    cache = api;\n    return api;\n  };\n})();\n"]},"metadata":{},"sourceType":"module"}