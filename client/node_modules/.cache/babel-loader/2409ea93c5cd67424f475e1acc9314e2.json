{"ast":null,"code":"import protooClient from \"protoo-client\";\nimport * as mediasoupClient from \"mediasoup-client\";\nimport { getProtooUrl } from \"./utils/urlFactory.js\";\nimport emitter from \"./utils/EventEmitter.js\";\nimport deviceInfo from \"./utils/deviceInfo.js\";\nimport axios from \"axios\"; // import Logger from \"./Logger\";\n// import * as cookiesManager from \"./cookiesManager\";\n// import * as requestActions from \"../redux/actions/requestActions\";\n// import * as stateActions from \"../redux/actions/stateActions\";\n// import {\n//   toggleMic,\n//   toggleVideo,\n//   toggleRecording,\n//   toggleScreenShare,\n//   hasBotEntered,\n// } from \"../redux/actions/btmBarActions\";\n// import {\n//   toggleBoard,\n//   setMiroAdmin,\n//   setMiroLink,\n// } from \"../redux/actions/miroActions\";\n// import ChatMessageSound from \"../assets/ChatSound.mp3\";\n\nconst VIDEO_CONSTRAINS = {\n  qvga: {\n    width: {\n      ideal: 320\n    },\n    height: {\n      ideal: 240\n    }\n  },\n  vga: {\n    width: {\n      ideal: 640\n    },\n    height: {\n      ideal: 480\n    }\n  },\n  hd: {\n    width: {\n      ideal: 1280\n    },\n    height: {\n      ideal: 720\n    }\n  }\n};\nconst PC_PROPRIETARY_CONSTRAINTS = {\n  optional: [{\n    googDscp: true\n  }]\n}; // Used for simulcast webcam video.\n\nconst WEBCAM_SIMULCAST_ENCODINGS = [{\n  scaleResolutionDownBy: 4,\n  maxBitrate: 500000\n}, {\n  scaleResolutionDownBy: 2,\n  maxBitrate: 1000000\n}, {\n  scaleResolutionDownBy: 1,\n  maxBitrate: 5000000\n}]; // Used for VP9 webcam video.\n\nconst WEBCAM_KSVC_ENCODINGS = [{\n  scalabilityMode: \"S3T3_KEY\"\n}]; // Used for simulcast screen sharing.\n\nconst SCREEN_SHARING_SIMULCAST_ENCODINGS = [{\n  dtx: true,\n  maxBitrate: 1500000\n}, {\n  dtx: true,\n  maxBitrate: 6000000\n}]; // Used for VP9 screen sharing.\n\nconst SCREEN_SHARING_SVC_ENCODINGS = [{\n  scalabilityMode: \"S3T3\",\n  dtx: true\n}];\nconst EXTERNAL_VIDEO_SRC = \"/resources/videos/video-audio-stereo.mp4\"; // const logger = new Logger(\"RoomClient\");\n// let //store;\n\nexport default class HuddleClient {\n  // /**\n  //  * @param  {Object} data\n  //  * @param  {Object} data.//store - The Redux //store.\n  //  */\n  // //   static init(data) {\n  // //     //store = data.//store;\n  // //   }\n  constructor({\n    roomId,\n    peerId,\n    apiKey,\n    displayName,\n    // device,\n    handlerName,\n    useSimulcast,\n    useSharingSimulcast,\n    forceTcp,\n    produce,\n    consume,\n    forceH264,\n    forceVP9,\n    svc,\n    datachannel,\n    externalVideo,\n    isBot,\n    userToken,\n    userPassword,\n    window\n  }) {\n    if (!apiKey) throw new Error(\"Please pass a valid apiKey\"); // logger.debug(\n    //   'constructor() [roomId:\"%s\", peerId:\"%s\", displayName:\"%s\", device:%s]',\n    //   roomId,\n    //   peerId,\n    //   displayName,\n    //   device.flag\n    // );\n\n    this.userPassword = userPassword;\n    this._window = window;\n    this.userToken = userToken || null; //Peer Id\n    // @type {String}\n\n    this._peerId = peerId; //Room Id\n    // @type {String}\n\n    this._roomId = roomId;\n    this.localStore = new Map(); // TODO: add type\n\n    this.peers = {}; // Closed flag.\n    // @type {Boolean}\n\n    this._closed = false; // Display name.\n    // @type {String}\n\n    this._displayName = displayName; // Device info.\n    // @type {Object}\n\n    this._device = deviceInfo(this._window); // Whether we want to force RTC over TCP.\n    // @type {Boolean}\n\n    this._forceTcp = forceTcp; // Whether we want to produce audio/video.\n    // @type {Boolean}\n\n    this._produce = isBot ? false : true; // Whether we should consume.\n    // @type {Boolean}\n\n    this._consume = consume || true; // Whether we want DataChannels.\n    // @type {Boolean}\n\n    this._useDataChannel = datachannel || true; // Force H264 codec for sending.\n\n    this._forceH264 = Boolean(forceH264); // Force VP9 codec for sending.\n\n    this._forceVP9 = Boolean(forceVP9); // External video.\n    // @type {HTMLVideoElement}\n\n    this._externalVideo = null; // MediaStream of the external video.\n    // @type {MediaStream}\n\n    this._externalVideoStream = null; // Next expected dataChannel test number.\n    // @type {Number}\n\n    this._nextDataChannelTestNumber = 0; // isBot expected boolean.\n    // @type {Bool}\n\n    this._isBot = isBot;\n\n    if (externalVideo) {\n      this._externalVideo = document.createElement(\"video\");\n      this._externalVideo.controls = true;\n      this._externalVideo.muted = true;\n      this._externalVideo.loop = true;\n\n      this._externalVideo.setAttribute(\"playsinline\", \"\");\n\n      this._externalVideo.src = EXTERNAL_VIDEO_SRC;\n\n      this._externalVideo.play(); //.catch((error) =>logger.warn(\"externalVideo.play() failed:%o\", error));\n\n    } // Custom mediasoup-client handler name (to override default browser\n    // detection if desired).\n    // @type {String}\n\n\n    this._handlerName = handlerName; // Whether simulcast should be used.\n    // @type {Boolean}\n\n    this._useSimulcast = useSimulcast || true; // Whether simulcast should be used in desktop sharing.\n    // @type {Boolean}\n\n    this._useSharingSimulcast = useSharingSimulcast; // Protoo URL.\n    // @type {String}\n\n    this._protooUrl = getProtooUrl({\n      roomId,\n      peerId,\n      window: this._window,\n      apiKey\n    });\n    this.apiKey = apiKey; // protoo-client Peer instance.\n    // @type {protooClient.Peer}\n\n    this._protoo = null; // mediasoup-client Device instance.\n    // @type {mediasoupClient.Device}\n\n    this._mediasoupDevice = null; // mediasoup Transport for sending.\n    // @type {mediasoupClient.Transport}\n\n    this._sendTransport = null; // mediasoup Transport for receiving.\n    // @type {mediasoupClient.Transport}\n\n    this._recvTransport = null; // Local mic mediasoup Producer.\n    // @type {mediasoupClient.Producer}\n\n    this._micProducer = null; // Local webcam mediasoup Producer.\n    // @type {mediasoupClient.Producer}\n\n    this._webcamProducer = null; // Local shar===iasoupClient.Producer}\n\n    this._shareProducer = null; // Local chat DataProducer.\n    // @type {mediasoupClient.DataProducer}\n\n    this._chatDataProducer = null; // Local misc DataProducer.\n    // @type {mediasoupClient.DataProducer}\n\n    this._miscDataProducer = null; // Local reactions DataProducer.\n    // @type {mediasoupClient.DataProducer}\n\n    this._reactionsDataProducer = null; // Local miro DataProducer.\n    // @type {mediasoupClient.DataProducer}\n\n    this._miroDataProducer = null; // Local raise hand DataProducer.\n    // @type {mediasoupClient.DataProducer}\n\n    this._raiseHandDataProducer = null; // Local bot DataProducer.\n    // @type {mediasoupClient.DataProducer}\n\n    this._botDataProducer = null; // mediasoup Consumers.\n    // @type {Map<String, mediasoupClient.Consumer>}\n\n    this._consumers = new Map(); // mediasoup DataConsumers.\n    // @type {Map<String, mediasoupClient.DataConsumer>}\n\n    this._dataConsumers = new Map(); // Map of webcam MediaDeviceInfos indexed by deviceId.\n    // @type {Map<String, MediaDeviceInfos>}\n\n    this._webcams = new Map(); // Local Webcam.\n    // @type {Object} with:\n    // - {MediaDeviceInfo} [device]\n    // - {String} [resolution] - 'qvga' / 'vga' / 'hd'.\n\n    this._webcam = {\n      device: null,\n      resolution: \"hd\"\n    }; // Set custom SVC scalability mode.\n\n    if (svc) {\n      WEBCAM_KSVC_ENCODINGS[0].scalabilityMode = `${svc}_KEY`;\n      SCREEN_SHARING_SVC_ENCODINGS[0].scalabilityMode = svc;\n    }\n  }\n\n  _setLocalState(name, value) {\n    return this.localStore.set(name, value);\n  }\n\n  _getLocalState(name) {\n    return this.localStore.get(name);\n  }\n\n  close(denied = false) {\n    if (this._closed) return;\n    this._closed = true; //logger.debug(\"close()\");\n    // Close protoo Peer\n\n    this._protoo.close(); // Close mediasoup Transports.\n\n\n    if (this._sendTransport) this._sendTransport.close();\n    if (this._recvTransport) this._recvTransport.close();\n\n    if (denied) {//   store.dispatch(stateActions.setRoomState(\"roomValidity:denied\"));\n    } else {//   store.dispatch(stateActions.setRoomState(\"closed\"));\n    } //miro handler\n    // store.dispatch(toggleBoard(false));\n    // store.dispatch(setMiroLink(null));\n    // store.dispatch(setMiroAdmin(false));\n\n\n    this.sendMiro(null);\n  }\n\n  async join() {\n    try {\n      await axios.get(\"https://api.huddle01.com/\", {\n        headers: {\n          \"x-api-key\": this.apiKey\n        }\n      });\n    } catch (error) {\n      throw new Error(\"Invalid API Key passed\");\n    }\n\n    const protooTransport = new protooClient.WebSocketTransport(this._protooUrl);\n    this._protoo = new protooClient.Peer(protooTransport); // store.dispatch(stateActions.setRoomState(\"connecting\"));\n\n    this._protoo.on(\"open\", async () => {\n      this._joinRoom();\n\n      emitter.emit(\"roomState\", \"connected\"); // //directly send the bot inside the room\n      // if (this._isBot) {\n      //   this._joinRoom();\n      //   return;\n      // }\n      // const displayName = this._displayName;\n      // try {\n      //   await this._protoo.request(\"checkRoomValidity\");\n      //   // store.dispatch(stateActions.setRoomState(\"roomValidity:allowed\"));\n      // } catch (error) {\n      //   return;\n      // }\n      // const { host } = await this._protoo.request(\"lobby\", {\n      //   displayName,\n      //   password: this.roomPassword,\n      // });\n      // if (host !== this._peerId) {\n      // }\n    });\n\n    this._protoo.on(\"failed\", data => {\n      emitter.emit(\"roomState\", \"failed\"); // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"WebSocket connection failed\",\n      //   })\n      // );\n    });\n\n    this._protoo.on(\"disconnected\", () => {\n      emitter.emit(\"roomState\", \"disconnected\"); // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"WebSocket disconnected\",\n      //   })\n      // );\n      // Close mediasoup Transports.\n\n      if (this._sendTransport) {\n        this._sendTransport.close();\n\n        this._sendTransport = null;\n      }\n\n      if (this._recvTransport) {\n        this._recvTransport.close();\n\n        this._recvTransport = null;\n      } // store.dispatch(stateActions.setRoomState(\"closed\"));\n\n    });\n\n    this._protoo.on(\"close\", () => {\n      if (this._closed) return;\n      this.close();\n    }); // eslint-disable-next-line no-unused-vars\n\n\n    this._protoo.on(\"request\", async (request, accept, reject) => {\n      //logger.debug(\n      //   'proto \"request\" event [method:%s, data:%o]',\n      //   request.method,\n      //   request.data\n      // );\n      switch (request.method) {\n        case \"newConsumer\":\n          {\n            if (!this._consume) {\n              reject(403, \"I do not want to consume\");\n              break;\n            }\n\n            const {\n              peerId,\n              producerId,\n              id,\n              kind,\n              rtpParameters,\n              type,\n              appData,\n              producerPaused\n            } = request.data;\n            console.log({\n              request: request.data\n            });\n\n            try {\n              const consumer = await this._recvTransport.consume({\n                id,\n                producerId,\n                kind,\n                rtpParameters,\n                appData: { ...appData,\n                  peerId\n                } // Trick.\n\n              }); // //store in the map.\n\n              this._consumers.set(consumer.id, consumer);\n\n              consumer.on(\"transportclose\", () => {\n                this._consumers.delete(consumer.id);\n              });\n              const {\n                spatialLayers,\n                temporalLayers\n              } = mediasoupClient.parseScalabilityMode(consumer.rtpParameters.encodings[0].scalabilityMode); // console.log({ producerPaused });\n              // store.dispatch(\n              //   stateActions.addConsumer(\n              //     {\n              //       id: consumer.id,\n              //       type: type,\n              //       locallyPaused: false,\n              //       remotelyPaused: producerPaused,\n              //       rtpParameters: consumer.rtpParameters,\n              //       spatialLayers: spatialLayers,\n              //       temporalLayers: temporalLayers,\n              //       preferredSpatialLayer: spatialLayers - 1,\n              //       preferredTemporalLayer: temporalLayers - 1,\n              //       priority: 1,\n              //       codec:\n              //         consumer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n              //       track: consumer.track,\n              //       appData, //testing\n              //     },\n              //     peerId\n              //   )\n              // );\n\n              let consumerType;\n\n              if (consumer.track.kind === \"video\" && consumer.appData.share === true) {\n                consumerType = \"screen\";\n              } else if (consumer.track.kind === \"video\" && consumer.appData.share === false) {\n                consumerType = \"webcam\";\n              } else {\n                consumerType = \"mic\";\n              }\n\n              emitter.emit(\"addConsumer\", {\n                id: consumer.id,\n                type: consumerType,\n                type2: type,\n                locallyPaused: false,\n                remotelyPaused: producerPaused,\n                rtpParameters: consumer.rtpParameters,\n                spatialLayers: spatialLayers,\n                temporalLayers: temporalLayers,\n                preferredSpatialLayer: spatialLayers - 1,\n                preferredTemporalLayer: temporalLayers - 1,\n                priority: 1,\n                codec: consumer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n                track: consumer.track,\n                peerId,\n                appData //testing\n\n              }, peerId); // We are ready. Answer the protoo request so the server will\n              // resume this Consumer (which was paused for now if video).\n\n              accept(); // If audio-only mode is enabled, pause it.\n\n              if (consumer.kind === \"video\" && this._getLocalState(\"audioOnly\") === true) {\n                this._pauseConsumer(consumer);\n              }\n            } catch (error) {\n              //logger.error('\"newConsumer\" request failed:%o', error);\n              // store.dispatch(\n              //   requestActions.notify({\n              //     type: \"error\",\n              //     text: `Error creating a Consumer: ${error}`,\n              //   })\n              // );\n              throw error;\n            }\n\n            break;\n          }\n\n        case \"newDataConsumer\":\n          {\n            if (!this._consume) {\n              reject(403, \"I do not want to data consume\");\n              break;\n            }\n\n            if (!this._useDataChannel) {\n              reject(403, \"I do not want DataChannels\");\n              break;\n            }\n\n            const {\n              peerId,\n              // NOTE: Null if bot.\n              dataProducerId,\n              id,\n              sctpStreamParameters,\n              label,\n              protocol,\n              appData\n            } = request.data;\n\n            try {\n              const dataConsumer = await this._recvTransport.consumeData({\n                id,\n                dataProducerId,\n                sctpStreamParameters,\n                label,\n                protocol,\n                appData: { ...appData,\n                  peerId\n                } // Trick.\n\n              }); // //store in the map.\n\n              this._dataConsumers.set(dataConsumer.id, dataConsumer);\n\n              dataConsumer.on(\"transportclose\", () => {\n                this._dataConsumers.delete(dataConsumer.id);\n              });\n              dataConsumer.on(\"open\", () => {//logger.debug('DataConsumer \"open\" event');\n              });\n              dataConsumer.on(\"close\", () => {\n                //logger.warn('DataConsumer \"close\" event');\n                this._dataConsumers.delete(dataConsumer.id); // store.dispatch(\n                //   requestActions.notify({\n                //     type: \"error\",\n                //     text: \"DataConsumer closed\",\n                //   })\n                // );\n\n              });\n              dataConsumer.on(\"error\", error => {//logger.error('DataConsumer \"error\" event:%o', error);\n                // store.dispatch(\n                //   requestActions.notify({\n                //     type: \"error\",\n                //     text: `DataConsumer error: ${error}`,\n                //   })\n                // );\n              });\n              dataConsumer.on(\"message\", message => {\n                //logger.debug(\n                //   'DataConsumer \"message\" event [streamId:%d]',\n                //   dataConsumer.sctpStreamParameters.streamId\n                // );\n                // TODO: For debugging.\n                window.DC_MESSAGE = message;\n\n                if (message instanceof ArrayBuffer) {\n                  const view = new DataView(message);\n                  const number = view.getUint32();\n\n                  if (number === Math.pow(2, 32) - 1) {\n                    //logger.warn(\"dataChannelTest finished!\");\n                    this._nextDataChannelTestNumber = 0;\n                    return;\n                  }\n\n                  if (number > this._nextDataChannelTestNumber) {//logger.warn(\n                    //   \"dataChannelTest: %s packets missing\",\n                    //   number - this._nextDataChannelTestNumber\n                    // );\n                  }\n\n                  this._nextDataChannelTestNumber = number + 1;\n                  return;\n                } else if (typeof message !== \"string\") {\n                  //logger.warn('ignoring DataConsumer \"message\" (not a string)');\n                  return;\n                }\n\n                switch (dataConsumer.label) {\n                  case \"raise-hand\":\n                    {\n                      //const { peers } = //store.getState();\n                      const peers = this.peers;\n                      const peersArray = Object.keys(peers).map(_peerId => peers[_peerId]);\n                      const sendingPeer = peersArray.find(peer => peer.dataConsumers.includes(dataConsumer.id));\n\n                      if (!sendingPeer) {\n                        //logger.warn('DataConsumer \"message\" from unknown peer');\n                        break;\n                      } // store.dispatch(\n                      //   requestActions.notify({\n                      //     type: \"raise-hand\",\n                      //     title: \"raised hand ✋\",\n                      //     text: message,\n                      //     displayName: sendingPeer.displayName,\n                      //     peerId: sendingPeer.id,\n                      //   })\n                      // );\n\n\n                      break;\n                    }\n\n                  case \"reactions\":\n                    {\n                      const peers = this.peers; //store.getState();\n\n                      const peersArray = Object.keys(peers).map(_peerId => peers[_peerId]);\n                      const sendingPeer = peersArray.find(peer => peer.dataConsumers.includes(dataConsumer.id));\n\n                      if (!sendingPeer) {\n                        //logger.warn('DataConsumer \"message\" from unknown peer');\n                        break;\n                      } // store.dispatch(\n                      //   requestActions.notify({\n                      //     type: \"reactions\",\n                      //     title: `reacted with ${message}`,\n                      //     text: message,\n                      //     displayName: sendingPeer.displayName,\n                      //     peerId: sendingPeer.id,\n                      //   })\n                      // );\n\n\n                      break;\n                    }\n\n                  case \"miro\":\n                    {\n                      const peers = this.peers; //store.getState();\n\n                      const peersArray = Object.keys(peers).map(_peerId => peers[_peerId]);\n                      const sendingPeer = peersArray.find(peer => peer.dataConsumers.includes(dataConsumer.id));\n\n                      if (!sendingPeer) {\n                        //logger.warn('DataConsumer \"message\" from unknown peer');\n                        break;\n                      } // store.dispatch(\n                      //   requestActions.notify({\n                      //     type: \"miro\",\n                      //     title: `started miroboard`,\n                      //     text: message,\n                      //     displayName: sendingPeer.displayName,\n                      //     peerId: sendingPeer.id,\n                      //   })\n                      // );\n\n\n                      break;\n                    }\n\n                  case \"misc\":\n                    {\n                      const peers = this.peers; //= store.getState();\n\n                      const peersArray = Object.keys(peers).map(_peerId => peers[_peerId]);\n                      const sendingPeer = peersArray.find(peer => peer.dataConsumers.includes(dataConsumer.id));\n\n                      if (!sendingPeer) {\n                        //logger.warn('DataConsumer \"message\" from unknown peer');\n                        break;\n                      } // store.dispatch(\n                      //   requestActions.notify({\n                      //     type: \"misc\",\n                      //     title: `${sendingPeer.displayName} says: YOOOO - `,\n                      //     text: message,\n                      //   })\n                      // );\n\n\n                      break;\n                    }\n\n                  case \"chat\":\n                    {\n                      const peers = this.peers; //= store.getState();\n\n                      const peersArray = Object.keys(peers).map(_peerId => peers[_peerId]);\n                      const sendingPeer = peersArray.find(peer => peer.dataConsumers.includes(dataConsumer.id));\n\n                      if (!sendingPeer) {\n                        //logger.warn('DataConsumer \"message\" from unknown peer');\n                        break;\n                      } // store.dispatch(\n                      //   requestActions.notify({\n                      //     type: \"chat\",\n                      //     title: `sent you a message`,\n                      //     text: message,\n                      //     displayName: sendingPeer.displayName,\n                      //   })\n                      // );\n\n\n                      break;\n                    }\n\n                  case \"bot\":\n                    {\n                      // store.dispatch(\n                      //   requestActions.notify({\n                      //     title: \"Message from Bot:\",\n                      //     text: message,\n                      //     timeout: 5000,\n                      //   })\n                      // );\n                      break;\n                    }\n                }\n              }); // TODO: REMOVE\n\n              window.DC = dataConsumer; // store.dispatch(\n              //   stateActions.addDataConsumer(\n              //     {\n              //       id: dataConsumer.id,\n              //       sctpStreamParameters: dataConsumer.sctpStreamParameters,\n              //       label: dataConsumer.label,\n              //       protocol: dataConsumer.protocol,\n              //     },\n              //     peerId\n              //   )\n              // );\n              // We are ready. Answer the protoo request.\n\n              accept();\n            } catch (error) {\n              //logger.error('\"newDataConsumer\" request failed:%o', error);\n              // store.dispatch(\n              //   requestActions.notify({\n              //     type: \"error\",\n              //     text: `Error creating a DataConsumer: ${error}`,\n              //   })\n              // );\n              throw error;\n            }\n\n            break;\n          }\n      }\n    });\n\n    this._protoo.on(\"notification\", notification => {\n      //logger.debug(\n      //   'proto \"notification\" event [method:%s, data:%o]',\n      //   notification.method,\n      //   notification.data\n      // );hostId\n      switch (notification.method) {\n        case \"roomValidityDenied\":\n          {\n            const errorInfo = notification.data; //TODO: handle error status\n\n            console.log({\n              errorInfo\n            });\n            this.close(true);\n            break;\n          }\n\n        case \"updatedCoHosts\":\n          {\n            const {\n              coHostIds\n            } = notification.data; // store.dispatch(stateActions.updateCoHosts(coHostIds));\n\n            break;\n          }\n        //host wants to disable your producer\n\n        case \"disableMyProducer\":\n          {\n            const {\n              producerType\n            } = notification.data;\n\n            if (producerType === \"mic\") {\n              this.muteMic();\n            } else if (producerType === \"webcam\") {\n              this.disableWebcam();\n            }\n\n            break;\n          }\n\n        case \"room-lock-state\":\n          {\n            const {\n              isRoomLocked\n            } = notification.data; // console.log({ isRoomLocked });\n            // store.dispatch(stateActions.setRoomLock(isRoomLocked));\n\n            break;\n          }\n\n        case \"recieved-DM\":\n          {\n            const {\n              message,\n              fromId\n            } = notification.data; //TODO: dispatch to redux\n\n            console.log({\n              message,\n              fromId\n            });\n            const existingPeer = this.peers[fromId]; //= store.getState().peers[fromId];\n\n            const payload = {\n              peerId: fromId,\n              message: {\n                id: fromId,\n                type: \"text\",\n                title: `sent you a message`,\n                text: message,\n                displayName: existingPeer.displayName\n              }\n            }; // store.dispatch(stateActions.addNewMsg(payload));\n            // store.dispatch(\n            //   requestActions.notify({\n            //     type: \"chat\",\n            //     title: `sent you a message`,\n            //     text: message,\n            //     displayName: existingPeer.displayName,\n            //   })\n            // );\n\n            break;\n          }\n\n        case \"kickMeFromRoom\":\n          {\n            this.close();\n            break;\n          }\n\n        case \"newLobbyPeer\":\n          {\n            const {\n              lobbyPeers\n            } = notification.data;\n            console.log(\"in lobby\"); // store.dispatch(\n            //   requestActions.notify({\n            //     type: \"new-lobby-peer\",\n            //     lobbyPeers,\n            //     title: \"are waiting in the lobby\",\n            //     displayName: \"Peers\",\n            //   })\n            // );\n\n            break;\n          }\n\n        case \"updatedPeersArray\":\n          {\n            const {\n              lobbyPeers\n            } = notification.data; // store.dispatch(\n            //   requestActions.notify({\n            //     type: \"updated-peers-array\",\n            //     lobbyPeers,\n            //   })\n            // );\n\n            break;\n          }\n\n        case \"joinRoomPermissionGranted\":\n          {\n            this._joinRoom(); // this._protoo.request(\"amIHost\")\n\n\n            break;\n          }\n\n        case \"joinRoomPermissionDenied\":\n          {\n            try {\n              // store.dispatch(\n              //   requestActions.notify({\n              //     type: \"disallowed-room-join\",\n              //   })\n              // );\n              this.close();\n              break;\n            } catch (e) {\n              console.log(e);\n            }\n\n            break;\n          }\n\n        case \"hostIs\":\n          {\n            const {\n              hostId\n            } = notification.data; // store.dispatch(stateActions.setRoomHost(hostId));\n\n            break;\n          }\n\n        case \"producerScore\":\n          {\n            const {\n              producerId,\n              score\n            } = notification.data; // store.dispatch(stateActions.setProducerScore(producerId, score));\n\n            break;\n          }\n\n        case \"newPeer\":\n          {\n            const peer = notification.data; // store.dispatch(\n            //   stateActions.addPeer({\n            //     ...peer,\n            //     consumers: [],\n            //     dataConsumers: [],\n            //     messages: [],\n            //     unreadMsgs: 0,\n            //   })\n            // );\n\n            emitter.emit(\"addPeer\", { ...peer,\n              consumers: [],\n              dataConsumers: [],\n              messages: [],\n              unreadMsgs: 0\n            });\n            this.peers[peer.peerId] = peer; // store.dispatch(\n            //   requestActions.notify({\n            //     type: \"peer-join\",\n            //     title: `has joined the call`,\n            //     text: `has joined the call`,\n            //     displayName: peer.displayName,\n            //   })\n            // );\n\n            break;\n          }\n\n        case \"recording-started\":\n          {\n            const {\n              displayName\n            } = notification.data; // store.dispatch(\n            //   requestActions.notify({\n            //     displayName,\n            //     type: \"recording-started\",\n            //     text: \"Call is being recorded\",\n            //     title: \"started call recording\",\n            //   })\n            // );\n            // store.dispatch(hasBotEntered());\n\n            break;\n          }\n\n        case \"recording-stopped\":\n          {\n            const {\n              displayName\n            } = notification.data; // store.dispatch(\n            //   requestActions.notify({\n            //     displayName,\n            //     type: \"recording-stopped\",\n            //     text: \"Call recording has been stopped\",\n            //     title: \"stopped call recording\",\n            //   })\n            // );\n            // store.dispatch(hasBotEntered());\n\n            break;\n          }\n        //only host should see this\n\n        case \"recordingUrl\":\n          {\n            const {\n              videoUrl\n            } = notification.data; // store.dispatch(hasBotEntered());\n            // store.dispatch(\n            //   requestActions.notify({\n            //     type: \"recording-url\",\n            //     text: videoUrl,\n            //   })\n            // );\n\n            break;\n          }\n\n        case \"peerClosed\":\n          {\n            const {\n              peerId\n            } = notification.data;\n            const peer = Object.values( //store.getState().peers).find(\n            ({\n              id\n            }) => id === peerId); // store.dispatch(\n            //   requestActions.notify({\n            //     type: \"peer-left\",\n            //     title: `has left the call`,\n            //     text: `has left the call`,\n            //     displayName: peer.displayName,\n            //   })\n            // );\n            // store.dispatch(stateActions.removePeer(peerId));\n\n            emitter.emit(\"removePeer\", peerId);\n            break;\n          }\n\n        case \"peerDisplayNameChanged\":\n          {\n            const {\n              peerId,\n              displayName,\n              oldDisplayName\n            } = notification.data; // store.dispatch(stateActions.setPeerDisplayName(displayName, peerId));\n            // store.dispatch(\n            //   requestActions.notify({\n            //     text: `${oldDisplayName} is now ${displayName}`,\n            //   })\n            // );\n\n            break;\n          }\n\n        case \"downlinkBwe\":\n          {\n            //logger.debug(\"'downlinkBwe' event:%o\", notification.data);\n            break;\n          }\n\n        case \"consumerClosed\":\n          {\n            const {\n              consumerId\n            } = notification.data;\n\n            const consumer = this._consumers.get(consumerId);\n\n            if (!consumer) break;\n            consumer.close();\n\n            this._consumers.delete(consumerId);\n\n            const {\n              peerId\n            } = consumer.appData; // store.dispatch(stateActions.removeConsumer(consumerId, peerId));\n\n            let consumerType;\n\n            if (consumer.track.kind === \"video\" && consumer.appData.share === true) {\n              consumerType = \"screen\";\n            } else if (consumer.track.kind === \"video\" && consumer.appData.share === false) {\n              consumerType = \"webcam\";\n            } else {\n              consumerType = \"mic\";\n            }\n\n            emitter.emit(\"removeConsumer\", { ...consumer,\n              type: consumerType\n            });\n            break;\n          }\n\n        case \"consumerPaused\":\n          {\n            const {\n              consumerId\n            } = notification.data;\n\n            const consumer = this._consumers.get(consumerId);\n\n            if (!consumer) break;\n            consumer.pause(); // store.dispatch(stateActions.setConsumerPaused(consumerId, \"remote\"));\n\n            break;\n          }\n\n        case \"consumerResumed\":\n          {\n            const {\n              consumerId\n            } = notification.data;\n\n            const consumer = this._consumers.get(consumerId);\n\n            if (!consumer) break;\n            consumer.resume(); // store.dispatch(stateActions.setConsumerResumed(consumerId, \"remote\"));\n\n            break;\n          }\n\n        case \"consumerLayersChanged\":\n          {\n            const {\n              consumerId,\n              spatialLayer,\n              temporalLayer\n            } = notification.data;\n\n            const consumer = this._consumers.get(consumerId);\n\n            if (!consumer) break; // store.dispatch(\n            //   stateActions.setConsumerCurrentLayers(\n            //     consumerId,\n            //     spatialLayer,\n            //     temporalLayer\n            //   )\n            // );\n\n            break;\n          }\n\n        case \"consumerScore\":\n          {\n            const {\n              consumerId,\n              score\n            } = notification.data; // store.dispatch(stateActions.setConsumerScore(consumerId, score));\n\n            break;\n          }\n\n        case \"dataConsumerClosed\":\n          {\n            const {\n              dataConsumerId\n            } = notification.data;\n\n            const dataConsumer = this._dataConsumers.get(dataConsumerId);\n\n            if (!dataConsumer) break;\n            dataConsumer.close();\n\n            this._dataConsumers.delete(dataConsumerId);\n\n            const {\n              peerId\n            } = dataConsumer.appData; // store.dispatch(\n            //   stateActions.removeDataConsumer(dataConsumerId, peerId)\n            // );\n\n            break;\n          }\n\n        case \"activeSpeaker\":\n          {\n            const {\n              peerId\n            } = notification.data; // store.dispatch(stateActions.setRoomActiveSpeaker(peerId));\n\n            break;\n          }\n\n        default:\n          {//logger.error(\n            //   'unknown protoo notification.method \"%s\"',\n            //   notification.method\n            // );\n          }\n      }\n    });\n  }\n\n  async allowLobbyPeerToJoinRoom(peerIdToAdmit) {\n    this._protoo.request(\"allowRoomJoin\", {\n      peerIdToAdmit\n    });\n  }\n\n  async disallowLobbyPeerFromJoiningRoom(peerIdToDisallow) {\n    this._protoo.request(\"disallowRoomJoin\", {\n      peerIdToDisallow\n    });\n  }\n\n  async sendDM(message, toId) {\n    try {\n      await this._protoo.request(\"sendDM\", {\n        message,\n        toId\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async enableMic() {\n    //logger.debug(\"enableMic()\");\n    if (this._micProducer) return;\n\n    if (!this._mediasoupDevice.canProduce(\"audio\")) {\n      //logger.error(\"enableMic() | cannot produce audio\");\n      return;\n    }\n\n    let track;\n\n    try {\n      if (!this._externalVideo) {\n        //logger.debug(\"enableMic() | calling getUserMedia()\");\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        track = stream.getAudioTracks()[0];\n      } else {\n        const stream = await this._getExternalVideoStream();\n        track = stream.getAudioTracks()[0].clone();\n      }\n\n      this._micProducer = await this._sendTransport.produce({\n        track,\n        codecOptions: {\n          opusStereo: 1,\n          opusDtx: 1\n        } // NOTE: for testing codec selection.\n        // codec : this._mediasoupDevice.rtpCapabilities.codecs\n        // \t.find((codec) => codec.mimeType.toLowerCase() === 'audio/pcma')\n\n      }); // store.dispatch(\n      //   stateActions.addProducer({\n      //     id: this._micProducer.id,\n      //     paused: this._micProducer.paused,\n      //     track: this._micProducer.track,\n      //     rtpParameters: this._micProducer.rtpParameters,\n      //     codec:\n      //       this._micProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n      //   })\n      // );\n\n      this._micProducer.on(\"transportclose\", () => {\n        this._micProducer = null;\n      });\n\n      this._micProducer.on(\"trackended\", () => {\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Microphone disconnected!\",\n        //   })\n        // );\n        this.disableMic().catch(() => {});\n      });\n    } catch (error) {\n      //logger.error(\"enableMic() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling microphone: ${error}`,\n      //   })\n      // );\n      if (track) track.stop();\n    }\n  }\n\n  async disableMic() {\n    //logger.debug(\"disableMic()\");\n    if (!this._micProducer) return;\n\n    this._micProducer.close(); // store.dispatch(stateActions.removeProducer(this._micProducer.id));\n\n\n    emitter.emit(\"removeProducer\", {\n      type: \"mic\"\n    });\n\n    try {\n      await this._protoo.request(\"closeProducer\", {\n        producerId: this._micProducer.id\n      });\n    } catch (error) {// store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error closing server-side mic Producer: ${error}`,\n      //   })\n      // );\n    }\n\n    this._micProducer = null;\n  }\n\n  async muteMic() {\n    //logger.debug(\"muteMic()\");\n    this._micProducer.pause();\n\n    try {\n      await this._protoo.request(\"pauseProducer\", {\n        producerId: this._micProducer.id\n      }); // store.dispatch(stateActions.setProducerPaused(this._micProducer.id));\n      // store.dispatch(toggleMic(false));\n    } catch (error) {//logger.error(\"muteMic() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error pausing server-side mic Producer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async unmuteMic() {\n    //logger.debug(\"unmuteMic()\");\n    this._micProducer.resume();\n\n    try {\n      await this._protoo.request(\"resumeProducer\", {\n        producerId: this._micProducer.id\n      }); // store.dispatch(stateActions.setProducerResumed(this._micProducer.id));\n      // store.dispatch(toggleMic(true));\n    } catch (error) {//logger.error(\"unmuteMic() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error resuming server-side mic Producer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async enableWebcam() {\n    //logger.debug(\"enableWebcam()\");\n    if (this._webcamProducer) return; // else if (this._shareProducer) await this.disableShare();\n\n    if (!this._mediasoupDevice.canProduce(\"video\")) {\n      //logger.error(\"enableWebcam() | cannot produce video\");\n      return;\n    }\n\n    let track;\n    let device; // store.dispatch(stateActions.setWebcamInProgress(true));\n    // store.dispatch(toggleVideo(true));\n\n    try {\n      if (!this._externalVideo) {\n        await this._updateWebcams();\n        device = this._webcam.device;\n        const {\n          resolution\n        } = this._webcam;\n        if (!device) throw new Error(\"no webcam devices\"); //logger.debug(\"enableWebcam() | calling getUserMedia()\");\n\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            deviceId: {\n              ideal: device.deviceId\n            },\n            ...VIDEO_CONSTRAINS[resolution]\n          }\n        });\n        track = stream.getVideoTracks()[0];\n      } else {\n        device = {\n          label: \"external video\"\n        };\n        const stream = await this._getExternalVideoStream();\n        track = stream.getVideoTracks()[0].clone();\n      }\n\n      let encodings;\n      let codec;\n      const codecOptions = {\n        videoGoogleStartBitrate: 1000\n      };\n\n      if (this._forceH264) {\n        codec = this._mediasoupDevice.rtpCapabilities.codecs.find(c => c.mimeType.toLowerCase() === \"video/h264\");\n\n        if (!codec) {\n          throw new Error(\"desired H264 codec+configuration is not supported\");\n        }\n      } else if (this._forceVP9) {\n        codec = this._mediasoupDevice.rtpCapabilities.codecs.find(c => c.mimeType.toLowerCase() === \"video/vp9\");\n\n        if (!codec) {\n          throw new Error(\"desired VP9 codec+configuration is not supported\");\n        }\n      }\n\n      if (this._useSimulcast) {\n        // If VP9 is the only available video codec then use SVC.\n        const firstVideoCodec = this._mediasoupDevice.rtpCapabilities.codecs.find(c => c.kind === \"video\");\n\n        if (this._forceVP9 && codec || firstVideoCodec.mimeType.toLowerCase() === \"video/vp9\") {\n          encodings = WEBCAM_KSVC_ENCODINGS;\n        } else {\n          encodings = WEBCAM_SIMULCAST_ENCODINGS;\n        }\n      }\n\n      this._webcamProducer = await this._sendTransport.produce({\n        track,\n        encodings,\n        codecOptions,\n        codec,\n        appData: {\n          share: false\n        }\n      }); // store.dispatch(\n      //   stateActions.addProducer({\n      //     id: this._webcamProducer.id,\n      //     isWebcam: true,\n      //     deviceLabel: device.label,\n      //     type: this._getWebcamType(device),\n      //     paused: this._webcamProducer.paused,\n      //     track: this._webcamProducer.track,\n      //     rtpParameters: this._webcamProducer.rtpParameters,\n      //     codec:\n      //       this._webcamProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n      //   })\n      // );\n\n      emitter.emit(\"addProducer\", {\n        id: this._webcamProducer.id,\n        isWebcam: true,\n        deviceLabel: device.label,\n        type: \"webcam\",\n        webcamType: this._getWebcamType(device),\n        paused: this._webcamProducer.paused,\n        track: this._webcamProducer.track,\n        rtpParameters: this._webcamProducer.rtpParameters,\n        codec: this._webcamProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1]\n      });\n\n      this._webcamProducer.on(\"transportclose\", () => {\n        this._webcamProducer = null;\n      });\n\n      this._webcamProducer.on(\"trackended\", () => {\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Webcam disconnected!\",\n        //   })\n        // );\n        this.disableWebcam().catch(() => {});\n      });\n    } catch (error) {\n      //logger.error(\"enableWebcam() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling webcam: ${error}`,\n      //   })\n      // );\n      if (track) track.stop();\n    } // store.dispatch(stateActions.setWebcamInProgress(false));\n\n  }\n\n  async disableWebcam() {\n    //logger.debug(\"disableWebcam()\");\n    if (!this._webcamProducer) return;\n\n    this._webcamProducer.close();\n\n    emitter.emit(\"removeProducer\", {\n      type: \"webcam\"\n    }); // store.dispatch(stateActions.removeProducer(this._webcamProducer.id));\n    // store.dispatch(toggleVideo(false));\n\n    try {\n      await this._protoo.request(\"closeProducer\", {\n        producerId: this._webcamProducer.id\n      });\n    } catch (error) {// store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error closing server-side webcam Producer: ${error}`,\n      //   })\n      // );\n    }\n\n    this._webcamProducer = null;\n  } //Pause & resume cam logic\n\n\n  async pauseVideo() {\n    //logger.debug(\"muteMic()\");\n    this._webcamProducer.pause();\n\n    try {\n      await this._protoo.request(\"pauseProducer\", {\n        producerId: this._webcamProducer.id\n      }); // store.dispatch(stateActions.setProducerPaused(this._webcamProducer.id));\n      // store.dispatch(toggleVideo(false));\n    } catch (error) {//logger.error(\"muteMic() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error pausing server-side webcam Producer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async resumeVideo() {\n    this._webcamProducer.resume();\n\n    try {\n      await this._protoo.request(\"resumeProducer\", {\n        producerId: this._webcamProducer.id\n      }); // store.dispatch(stateActions.setProducerResumed(this._webcamProducer.id));\n      // store.dispatch(toggleVideo(true));\n    } catch (error) {// store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error resuming server-side webcam Producer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async changeWebcam() {\n    //logger.debug(\"changeWebcam()\");\n    // store.dispatch(stateActions.setWebcamInProgress(true));\n    try {\n      await this._updateWebcams();\n      const array = Array.from(this._webcams.keys());\n      const len = array.length;\n      const deviceId = this._webcam.device ? this._webcam.device.deviceId : undefined;\n      let idx = array.indexOf(deviceId);\n      if (idx < len - 1) idx++;else idx = 0;\n      this._webcam.device = this._webcams.get(array[idx]); //logger.debug(\n      //   \"changeWebcam() | new selected webcam [device:%o]\",\n      //   this._webcam.device\n      // );\n      // Reset video resolution to HD.\n\n      this._webcam.resolution = \"hd\";\n      if (!this._webcam.device) throw new Error(\"no webcam devices\"); // Closing the current video track before asking for a new one (mobiles do not like\n      // having both front/back cameras open at the same time).\n\n      this._webcamProducer.track.stop(); //logger.debug(\"changeWebcam() | calling getUserMedia()\");\n\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: {\n            exact: this._webcam.device.deviceId\n          },\n          ...VIDEO_CONSTRAINS[this._webcam.resolution]\n        }\n      });\n      const track = stream.getVideoTracks()[0];\n      await this._webcamProducer.replaceTrack({\n        track\n      }); // store.dispatch(\n      //   stateActions.setProducerTrack(this._webcamProducer.id, track)\n      // );\n    } catch (error) {\n      emitter.emit(\"error\", `could not change webcam: ${error}`); //logger.error(\"changeWebcam() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Could not change webcam: ${error}`,\n      //   })\n      // );\n    } // store.dispatch(stateActions.setWebcamInProgress(false));\n\n  }\n\n  async changeWebcamResolution() {\n    //logger.debug(\"changeWebcamResolution()\");\n    // store.dispatch(stateActions.setWebcamInProgress(true));\n    try {\n      switch (this._webcam.resolution) {\n        case \"qvga\":\n          this._webcam.resolution = \"vga\";\n          break;\n\n        case \"vga\":\n          this._webcam.resolution = \"hd\";\n          break;\n\n        case \"hd\":\n          this._webcam.resolution = \"qvga\";\n          break;\n\n        default:\n          this._webcam.resolution = \"hd\";\n      } //logger.debug(\"changeWebcamResolution() | calling getUserMedia()\");\n\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: {\n            exact: this._webcam.device.deviceId\n          },\n          ...VIDEO_CONSTRAINS[this._webcam.resolution]\n        }\n      });\n      const track = stream.getVideoTracks()[0];\n      await this._webcamProducer.replaceTrack({\n        track\n      }); // store.dispatch(\n      //   stateActions.setProducerTrack(this._webcamProducer.id, track)\n      // );\n    } catch (error) {//logger.error(\"changeWebcamResolution() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Could not change webcam resolution: ${error}`,\n      //   })\n      // );\n    } // store.dispatch(stateActions.setWebcamInProgress(false));\n\n  }\n\n  async enableShare() {\n    //logger.debug(\"enableShare()\");\n    if (this._shareProducer) return;\n\n    if (!this._mediasoupDevice.canProduce(\"video\")) {\n      //logger.error(\"enableShare() | cannot produce video\");\n      return;\n    }\n\n    let track; // store.dispatch(stateActions.setShareInProgress(true));\n\n    try {\n      //logger.debug(\"enableShare() | calling getUserMedia()\");\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        audio: false,\n        video: {\n          displaySurface: \"monitor\",\n          logicalSurface: true,\n          cursor: true,\n          width: {\n            max: 1920\n          },\n          height: {\n            max: 1080\n          },\n          frameRate: {\n            max: 30\n          }\n        }\n      }); // May mean cancelled (in some implementations).\n\n      if (!stream) {\n        // store.dispatch(stateActions.setShareInProgress(true));\n        return;\n      }\n\n      track = stream.getVideoTracks()[0];\n      let encodings;\n      let codec;\n      const codecOptions = {\n        videoGoogleStartBitrate: 1000\n      };\n\n      if (this._forceH264) {\n        codec = this._mediasoupDevice.rtpCapabilities.codecs.find(c => c.mimeType.toLowerCase() === \"video/h264\");\n\n        if (!codec) {\n          throw new Error(\"desired H264 codec+configuration is not supported\");\n        }\n      } else if (this._forceVP9) {\n        codec = this._mediasoupDevice.rtpCapabilities.codecs.find(c => c.mimeType.toLowerCase() === \"video/vp9\");\n\n        if (!codec) {\n          throw new Error(\"desired VP9 codec+configuration is not supported\");\n        }\n      }\n\n      if (this._useSharingSimulcast) {\n        // If VP9 is the only available video codec then use SVC.\n        const firstVideoCodec = this._mediasoupDevice.rtpCapabilities.codecs.find(c => c.kind === \"video\");\n\n        if (this._forceVP9 && codec || firstVideoCodec.mimeType.toLowerCase() === \"video/vp9\") {\n          encodings = SCREEN_SHARING_SVC_ENCODINGS;\n        } else {\n          encodings = SCREEN_SHARING_SIMULCAST_ENCODINGS.map(encoding => ({ ...encoding,\n            dtx: true\n          }));\n        }\n      }\n\n      this._shareProducer = await this._sendTransport.produce({\n        track,\n        encodings,\n        codecOptions,\n        codec,\n        appData: {\n          share: true\n        }\n      }); // store.dispatch(\n      //   stateActions.addProducer({\n      //     id: this._shareProducer.id,\n      //     type: \"share\",\n      //     paused: this._shareProducer.paused,\n      //     track: this._shareProducer.track,\n      //     rtpParameters: this._shareProducer.rtpParameters,\n      //     codec:\n      //       this._shareProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n      //   })\n      // );\n\n      emitter.emit(\"addProducer\", {\n        id: this._shareProducer.id,\n        type: \"screen\",\n        paused: this._shareProducer.paused,\n        track: this._shareProducer.track,\n        rtpParameters: this._shareProducer.rtpParameters,\n        codec: this._shareProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1]\n      });\n\n      this._shareProducer.on(\"transportclose\", () => {\n        this._shareProducer = null;\n      });\n\n      this._shareProducer.on(\"trackended\", () => {\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Share disconnected!\",\n        //   })\n        // );\n        this.disableShare().catch(() => {});\n      }); // store.dispatch(stateActions.setShareInProgress(false));\n      // store.dispatch(toggleScreenShare(true));\n\n\n      return true;\n    } catch (error) {\n      //logger.error(\"enableShare() | failed:%o\", error);\n      if (error.name !== \"NotAllowedError\") {// store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: `Error sharing: ${error}`,\n        //   })\n        // );\n      }\n\n      if (track) track.stop(); // store.dispatch(stateActions.setShareInProgress(false));\n\n      return false;\n    }\n  }\n\n  async disableShare() {\n    //logger.debug(\"disableShare()\");\n    if (!this._shareProducer) return;\n\n    this._shareProducer.close(); // store.dispatch(stateActions.removeProducer(this._shareProducer.id));\n\n\n    emitter.emit(\"removeProducer\", {\n      type: \"screen\"\n    });\n\n    try {\n      await this._protoo.request(\"closeProducer\", {\n        producerId: this._shareProducer.id\n      }); // store.dispatch(toggleScreenShare(false));\n    } catch (error) {// store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error closing server-side share Producer: ${error}`,\n      //   })\n      // );\n    }\n\n    this._shareProducer = null;\n  }\n\n  async enableAudioOnly() {\n    //logger.debug(\"enableAudioOnly()\");\n    // store.dispatch(stateActions.setAudioOnlyInProgress(true));\n    this.disableWebcam();\n\n    for (const consumer of this._consumers.values()) {\n      if (consumer.kind !== \"video\") continue;\n\n      this._pauseConsumer(consumer);\n    }\n\n    this._setLocalState(\"audioOnly\", true); // store.dispatch(stateActions.setAudioOnlyState(true));\n    // store.dispatch(stateActions.setAudioOnlyInProgress(false));\n\n  }\n\n  async disableAudioOnly() {\n    //logger.debug(\"disableAudioOnly()\");\n    // store.dispatch(stateActions.setAudioOnlyInProgress(true));\n    if (!this._webcamProducer && this._produce // &&\n    // (cookiesManager.getDevices() || {}).webcamEnabled\n    ) {\n      this.enableWebcam();\n    }\n\n    for (const consumer of this._consumers.values()) {\n      if (consumer.kind !== \"video\") continue;\n\n      this._resumeConsumer(consumer);\n    }\n\n    this._setLocalState(\"audioOnly\", false); // store.dispatch(stateActions.setAudioOnlyState(false));\n    // store.dispatch(stateActions.setAudioOnlyInProgress(false));\n\n  }\n\n  async muteAudio() {//logger.debug(\"muteAudio()\");\n    // store.dispatch(stateActions.setAudioMutedState(true));\n  }\n\n  async unmuteAudio() {//logger.debug(\"unmuteAudio()\");\n    // store.dispatch(stateActions.setAudioMutedState(false));\n  }\n\n  async restartIce() {\n    //logger.debug(\"restartIce()\");\n    // store.dispatch(stateActions.setRestartIceInProgress(true));\n    try {\n      if (this._sendTransport) {\n        const iceParameters = await this._protoo.request(\"restartIce\", {\n          transportId: this._sendTransport.id\n        });\n        await this._sendTransport.restartIce({\n          iceParameters\n        });\n      }\n\n      if (this._recvTransport) {\n        const iceParameters = await this._protoo.request(\"restartIce\", {\n          transportId: this._recvTransport.id\n        });\n        await this._recvTransport.restartIce({\n          iceParameters\n        });\n      } // store.dispatch(\n      //   requestActions.notify({\n      //     text: \"ICE restarted\",\n      //   })\n      // );\n\n    } catch (error) {//logger.error(\"restartIce() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `ICE restart failed: ${error}`,\n      //   })\n      // );\n    } // store.dispatch(stateActions.setRestartIceInProgress(false));\n\n  }\n\n  async setMaxSendingSpatialLayer(spatialLayer) {\n    //logger.debug(\"setMaxSendingSpatialLayer() [spatialLayer:%s]\", spatialLayer);\n    try {\n      if (this._webcamProducer) await this._webcamProducer.setMaxSpatialLayer(spatialLayer);else if (this._shareProducer) await this._shareProducer.setMaxSpatialLayer(spatialLayer);\n    } catch (error) {//logger.error(\"setMaxSendingSpatialLayer() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error setting max sending video spatial layer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async setConsumerPreferredLayers(consumerId, spatialLayer, temporalLayer) {\n    //logger.debug(\n    //   \"setConsumerPreferredLayers() [consumerId:%s, spatialLayer:%s, temporalLayer:%s]\",\n    //   consumerId,\n    //   spatialLayer,\n    //   temporalLayer\n    // );\n    try {\n      await this._protoo.request(\"setConsumerPreferredLayers\", {\n        consumerId,\n        spatialLayer,\n        temporalLayer\n      }); // store.dispatch(\n      //   stateActions.setConsumerPreferredLayers(\n      //     consumerId,\n      //     spatialLayer,\n      //     temporalLayer\n      //   )\n      // );\n    } catch (error) {//logger.error(\"setConsumerPreferredLayers() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error setting Consumer preferred layers: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async setConsumerPriority(consumerId, priority) {\n    //logger.debug(\n    //   \"setConsumerPriority() [consumerId:%s, priority:%d]\",\n    //   consumerId,\n    //   priority\n    // );\n    try {\n      await this._protoo.request(\"setConsumerPriority\", {\n        consumerId,\n        priority\n      }); // store.dispatch(stateActions.setConsumerPriority(consumerId, priority));\n    } catch (error) {//logger.error(\"setConsumerPriority() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error setting Consumer priority: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async requestConsumerKeyFrame(consumerId) {\n    //logger.debug(\"requestConsumerKeyFrame() [consumerId:%s]\", consumerId);\n    try {\n      await this._protoo.request(\"requestConsumerKeyFrame\", {\n        consumerId\n      }); // store.dispatch(\n      //   requestActions.notify({\n      //     text: \"Keyframe requested for video consumer\",\n      //   })\n      // );\n    } catch (error) {//logger.error(\"requestConsumerKeyFrame() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error requesting key frame for Consumer: ${error}`,\n      //   })\n      // );\n    }\n  } //custom data producer made by @danisharora099\n\n\n  async enableRaiseHandDataProducer() {\n    if (this._raiseHandDataProducer) return;\n\n    try {\n      this._raiseHandDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"raise-hand\",\n        priority: \"medium\",\n        appData: {\n          info: \"my-raise-hand-DataProducer\"\n        }\n      }); // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._raiseHandDataProducer.id,\n      //     sctpStreamParameters:\n      //       this._raiseHandDataProducer.sctpStreamParameters,\n      //     label: this._raiseHandDataProducer.label,\n      //     protocol: this._raiseHandDataProducer.protocol,\n      //   })\n      // );\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling  DataProducer: ${error}`,\n      //   })\n      // );\n      throw error;\n    }\n  } //custom data producer made by @danisharora099\n\n\n  async enableReactionsDataProducer() {\n    if (this._reactionsDataProducer) return;\n\n    try {\n      this._reactionsDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"reactions\",\n        priority: \"medium\",\n        appData: {\n          info: \"my-reactions-DataProducer\"\n        }\n      }); // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._reactionsDataProducer.id,\n      //     sctpStreamParameters:\n      //       this._reactionsDataProducer.sctpStreamParameters,\n      //     label: this._reactionsDataProducer.label,\n      //     protocol: this._reactionsDataProducer.protocol,\n      //   })\n      // );\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling  DataProducer: ${error}`,\n      //   })\n      // );\n      throw error;\n    }\n  } //Miro\n  //custom data producer made by @Akshit1311\n\n\n  async enableMiroDataProducer() {\n    if (this._miroDataProducer) return;\n\n    try {\n      this._miroDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"miro\",\n        priority: \"medium\",\n        appData: {\n          info: \"miro-DataProducer\"\n        }\n      }); // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._miroDataProducer.id,\n      //     sctpStreamParameters: this._miroDataProducer.sctpStreamParameters,\n      //     label: this._miroDataProducer.label,\n      //     protocol: this._miroDataProducer.protocol,\n      //   })\n      // );\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling  DataProducer: ${error}`,\n      //   })\n      // );\n      throw error;\n    }\n  } //custom data producer made by @danisharora099\n\n\n  async enableMiscDataProducer() {\n    if (!this._useDataChannel) return;\n\n    try {\n      this._miscDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"misc\",\n        priority: \"medium\",\n        appData: {\n          info: \"my-misc-DataProducer\"\n        }\n      }); // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._miscDataProducer.id,\n      //     sctpStreamParameters: this._miscDataProducer.sctpStreamParameters,\n      //     label: this._miscDataProducer.label,\n      //     protocol: this._miscDataProducer.protocol,\n      //   })\n      // );\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling  DataProducer: ${error}`,\n      //   })\n      // );\n      throw error;\n    }\n  }\n\n  async enableChatDataProducer() {\n    //logger.debug(\"enableChatDataProducer()\");\n    if (!this._useDataChannel) return; // NOTE: Should enable this code but it's useful for testing.\n    // if (this._chatDataProducer)\n    // \treturn;\n\n    try {\n      // Create chat DataProducer.\n      this._chatDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"chat\",\n        priority: \"medium\",\n        appData: {\n          info: \"my-chat-DataProducer\"\n        }\n      }); // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._chatDataProducer.id,\n      //     sctpStreamParameters: this._chatDataProducer.sctpStreamParameters,\n      //     label: this._chatDataProducer.label,\n      //     protocol: this._chatDataProducer.protocol,\n      //   })\n      // );\n\n      this._chatDataProducer.on(\"transportclose\", () => {\n        this._chatDataProducer = null;\n      });\n\n      this._chatDataProducer.on(\"open\", () => {//logger.debug('chat DataProducer \"open\" event');\n      });\n\n      this._chatDataProducer.on(\"close\", () => {\n        //logger.error('chat DataProducer \"close\" event');\n        this._chatDataProducer = null; // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Chat DataProducer closed\",\n        //   })\n        // );\n      });\n\n      this._chatDataProducer.on(\"error\", error => {//logger.error('chat DataProducer \"error\" event:%o', error);\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: `Chat DataProducer error: ${error}`,\n        //   })\n        // );\n      });\n\n      this._chatDataProducer.on(\"bufferedamountlow\", () => {//logger.debug('chat DataProducer \"bufferedamountlow\" event');\n      });\n    } catch (error) {\n      //logger.error(\"enableChatDataProducer() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling chat DataProducer: ${error}`,\n      //   })\n      // );\n      throw error;\n    }\n  }\n\n  async enableBotDataProducer() {\n    //logger.debug(\"enableBotDataProducer()\");\n    if (!this._useDataChannel) return; // NOTE: Should enable this code but it's useful for testing.\n    // if (this._botDataProducer)\n    // \treturn;\n\n    try {\n      // Create chat DataProducer.\n      this._botDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxPacketLifeTime: 2000,\n        label: \"bot\",\n        priority: \"medium\",\n        appData: {\n          info: \"my-bot-DataProducer\"\n        }\n      }); // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._botDataProducer.id,\n      //     sctpStreamParameters: this._botDataProducer.sctpStreamParameters,\n      //     label: this._botDataProducer.label,\n      //     protocol: this._botDataProducer.protocol,\n      //   })\n      // );\n\n      this._botDataProducer.on(\"transportclose\", () => {\n        this._botDataProducer = null;\n      });\n\n      this._botDataProducer.on(\"open\", () => {//logger.debug('bot DataProducer \"open\" event');\n      });\n\n      this._botDataProducer.on(\"close\", () => {\n        //logger.error('bot DataProducer \"close\" event');\n        this._botDataProducer = null; // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Bot DataProducer closed\",\n        //   })\n        // );\n      });\n\n      this._botDataProducer.on(\"error\", error => {//logger.error('bot DataProducer \"error\" event:%o', error);\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: `Bot DataProducer error: ${error}`,\n        //   })\n        // );\n      });\n\n      this._botDataProducer.on(\"bufferedamountlow\", () => {//logger.debug('bot DataProducer \"bufferedamountlow\" event');\n      });\n    } catch (error) {\n      //logger.error(\"enableBotDataProducer() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling bot DataProducer: ${error}`,\n      //   })\n      // );\n      throw error;\n    }\n  } //takes true/false BUT in string (\"true\"/\"false\")\n\n\n  async raiseHand(booleanInString) {\n    if (!this._raiseHandDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No misc DataProducer\",\n      //   })\n      // );\n      return;\n    }\n\n    try {\n      this._raiseHandDataProducer.send(booleanInString);\n    } catch (error) {//logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `raise-hand DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async sendReaction(reaction) {\n    if (![\"😂\", \"😢\", \"💯\", \"🚀\", \"👍\", \"👎\"].includes(reaction)) return;\n\n    if (!this._reactionsDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No reactions DataProducer\",\n      //   })\n      // );\n      return;\n    }\n\n    try {\n      this._reactionsDataProducer.send(reaction); // store.dispatch(stateActions.setMeReaction(reaction));\n\n\n      setTimeout(() => {// store.dispatch(stateActions.setMeReaction(null));\n      }, 5000);\n    } catch (error) {//logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `reactions DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  } //Miro\n\n\n  async sendMiro(boardId) {\n    if (!this._miroDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No miro DataProducer\",\n      //   })\n      // );\n      return;\n    }\n\n    try {\n      this._miroDataProducer.send(boardId);\n    } catch (error) {//logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `miro DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async sendMiscMessages(text) {\n    if (!this._miscDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No misc DataProducer\",\n      //   })\n      // );\n      return;\n    }\n\n    try {\n      this._miscDataProducer.send(text);\n    } catch (error) {//logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `misc DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async sendChatMessage(text) {\n    //logger.debug('sendChatMessage() [text:\"%s]', text);\n    if (!this._chatDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No chat DataProducer\",\n      //   })\n      // );\n      return;\n    }\n\n    try {\n      this._chatDataProducer.send(text);\n    } catch (error) {//logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `chat DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async sendBotMessage(text) {\n    //logger.debug('sendBotMessage() [text:\"%s]', text);\n    if (!this._botDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No bot DataProducer\",\n      //   })\n      // );\n      return;\n    }\n\n    try {\n      this._botDataProducer.send(text);\n    } catch (error) {//logger.error(\"bot DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `bot DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  } //host only function\n  //peerIdOrIds is an array of one or more peerIds\n\n\n  async disablePeerProducer(producerType, peerIdOrIds) {\n    try {\n      const status = await this._protoo.request(\"disablePeerProducer\", {\n        producerType,\n        peerIdOrIds\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async kickPeerFromRoom(peerIdToKick) {\n    try {\n      await this._protoo.request(\"kickPeerFromRoom\", {\n        peerIdToKick\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async closeRoomForAll() {\n    try {\n      await this._protoo.request(\"closeRoomForEverybody\");\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async makeACoHost(peerId) {\n    try {\n      await this._protoo.request(\"makeACoHost\", {\n        peerId\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async startRecording() {\n    if (window.location.href.search(\"localhost\") !== -1) {\n      throw new Error(\"Recordings are only available in production settings so that our recorder can reach your URL\");\n    }\n\n    try {\n      await this._protoo.request(\"startRecording\");\n      return true;\n    } catch (error) {\n      throw new Error(\"error while starting recording - \", error);\n    }\n  }\n\n  async stopRecording() {\n    if (window.location.href.search(\"localhost\") !== -1) {\n      throw new Error(\"Recordings are only available in production settings so that our recorder can reach your URL\");\n    }\n\n    try {\n      await this._protoo.request(\"stopRecording\");\n      return true;\n    } catch (e) {\n      throw new Error(\"error while stopping recording - \", e);\n    }\n  }\n\n  async emailRecordingUrl(to, url) {\n    try {\n      await this._protoo.request(\"emailRecordingUrl\", {\n        to,\n        url\n      });\n    } catch (e) {\n      throw new Error(\"error while stopping recording - \", e);\n    }\n  }\n\n  async toggleRoomLock(_bool) {\n    try {\n      await this._protoo.request(\"toggleRoomLock\", {\n        state: _bool\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async changeDisplayName(displayName) {\n    //logger.debug('changeDisplayName() [displayName:\"%s\"]', displayName);\n    // //store in cookie.\n    // cookiesManager.setUser({ displayName });\n    try {\n      await this._protoo.request(\"changeDisplayName\", {\n        displayName\n      });\n      this._displayName = displayName; // store.dispatch(stateActions.setDisplayName(displayName));\n      // store.dispatch(\n      //   requestActions.notify({\n      //     text: \"Display name changed\",\n      //   })\n      // );\n    } catch (error) {//logger.error(\"changeDisplayName() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Could not change display name: ${error}`,\n      //   })\n      // );\n      // We need to refresh the component for it to render the previous\n      // displayName again.\n      // store.dispatch(stateActions.setDisplayName());\n    }\n  }\n\n  async getSendTransportRemoteStats() {\n    //logger.debug(\"getSendTransportRemoteStats()\");\n    if (!this._sendTransport) return;\n    return this._protoo.request(\"getTransportStats\", {\n      transportId: this._sendTransport.id\n    });\n  }\n\n  async getRecvTransportRemoteStats() {\n    //logger.debug(\"getRecvTransportRemoteStats()\");\n    if (!this._recvTransport) return;\n    return this._protoo.request(\"getTransportStats\", {\n      transportId: this._recvTransport.id\n    });\n  }\n\n  async getAudioRemoteStats() {\n    //logger.debug(\"getAudioRemoteStats()\");\n    if (!this._micProducer) return;\n    return this._protoo.request(\"getProducerStats\", {\n      producerId: this._micProducer.id\n    });\n  }\n\n  async getVideoRemoteStats() {\n    //logger.debug(\"getVideoRemoteStats()\");\n    const producer = this._webcamProducer || this._shareProducer;\n    if (!producer) return;\n    return this._protoo.request(\"getProducerStats\", {\n      producerId: producer.id\n    });\n  }\n\n  async getConsumerRemoteStats(consumerId) {\n    //logger.debug(\"getConsumerRemoteStats()\");\n    const consumer = this._consumers.get(consumerId);\n\n    if (!consumer) return;\n    return this._protoo.request(\"getConsumerStats\", {\n      consumerId\n    });\n  }\n\n  async getChatDataProducerRemoteStats() {\n    //logger.debug(\"getChatDataProducerRemoteStats()\");\n    const dataProducer = this._chatDataProducer;\n    if (!dataProducer) return;\n    return this._protoo.request(\"getDataProducerStats\", {\n      dataProducerId: dataProducer.id\n    });\n  }\n\n  async getBotDataProducerRemoteStats() {\n    //logger.debug(\"getBotDataProducerRemoteStats()\");\n    const dataProducer = this._botDataProducer;\n    if (!dataProducer) return;\n    return this._protoo.request(\"getDataProducerStats\", {\n      dataProducerId: dataProducer.id\n    });\n  }\n\n  async getDataConsumerRemoteStats(dataConsumerId) {\n    //logger.debug(\"getDataConsumerRemoteStats()\");\n    const dataConsumer = this._dataConsumers.get(dataConsumerId);\n\n    if (!dataConsumer) return;\n    return this._protoo.request(\"getDataConsumerStats\", {\n      dataConsumerId\n    });\n  }\n\n  async getSendTransportLocalStats() {\n    //logger.debug(\"getSendTransportLocalStats()\");\n    if (!this._sendTransport) return;\n    return this._sendTransport.getStats();\n  }\n\n  async getRecvTransportLocalStats() {\n    //logger.debug(\"getRecvTransportLocalStats()\");\n    if (!this._recvTransport) return;\n    return this._recvTransport.getStats();\n  }\n\n  async getAudioLocalStats() {\n    //logger.debug(\"getAudioLocalStats()\");\n    if (!this._micProducer) return;\n    return this._micProducer.getStats();\n  }\n\n  async getVideoLocalStats() {\n    //logger.debug(\"getVideoLocalStats()\");\n    const producer = this._webcamProducer || this._shareProducer;\n    if (!producer) return;\n    return producer.getStats();\n  }\n\n  async getConsumerLocalStats(consumerId) {\n    const consumer = this._consumers.get(consumerId);\n\n    if (!consumer) return;\n    return consumer.getStats();\n  }\n\n  async applyNetworkThrottle({\n    uplink,\n    downlink,\n    rtt,\n    secret\n  }) {\n    //logger.debug(\n    //   \"applyNetworkThrottle() [uplink:%s, downlink:%s, rtt:%s]\",\n    //   uplink,\n    //   downlink,\n    //   rtt\n    // );\n    try {\n      await this._protoo.request(\"applyNetworkThrottle\", {\n        uplink,\n        downlink,\n        rtt,\n        secret\n      });\n    } catch (error) {//logger.error(\"applyNetworkThrottle() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error applying network throttle: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async resetNetworkThrottle({\n    silent = false,\n    secret\n  }) {\n    //logger.debug(\"resetNetworkThrottle()\");\n    try {\n      await this._protoo.request(\"resetNetworkThrottle\", {\n        secret\n      });\n    } catch (error) {\n      if (!silent) {//logger.error(\"resetNetworkThrottle() | failed:%o\", error);\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: `Error resetting network throttle: ${error}`,\n        //   })\n        // );\n      }\n    }\n  }\n\n  async _joinRoom() {\n    //logger.debug(\"_joinRoom()\");\n    try {\n      this._mediasoupDevice = new mediasoupClient.Device({\n        handlerName: this._handlerName\n      });\n      const routerRtpCapabilities = await this._protoo.request(\"getRouterRtpCapabilities\"); // console.log(this._mediasoupDevice.loaded());\n\n      await this._mediasoupDevice.load({\n        routerRtpCapabilities\n      }); // NOTE: Stuff to play remote audios due to browsers' new autoplay policy.\n      //\n      // Just get access to the mic and DO NOT close the mic track for a while.\n      // Super hack!\n\n      if (!this._isBot) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const audioTrack = stream.getAudioTracks()[0];\n        audioTrack.enabled = false;\n        setTimeout(() => audioTrack.stop(), 120000);\n      } // Create mediasoup Transport for sending (unless we don't want to produce).\n\n\n      if (this._produce) {\n        const transportInfo = await this._protoo.request(\"createWebRtcTransport\", {\n          forceTcp: this._forceTcp,\n          producing: true,\n          consuming: false,\n          sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : undefined\n        });\n        const {\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters\n        } = transportInfo;\n        this._sendTransport = this._mediasoupDevice.createSendTransport({\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          iceServers: [],\n          proprietaryConstraints: PC_PROPRIETARY_CONSTRAINTS\n        });\n\n        this._sendTransport.on(\"connect\", ({\n          dtlsParameters\n        }, callback, errback // eslint-disable-line no-shadow\n        ) => {\n          this._protoo.request(\"connectWebRtcTransport\", {\n            transportId: this._sendTransport.id,\n            dtlsParameters\n          }).then(callback).catch(errback);\n        });\n\n        this._sendTransport.on(\"produce\", async ({\n          kind,\n          rtpParameters,\n          appData\n        }, callback, errback) => {\n          try {\n            // eslint-disable-next-line no-shadow\n            const {\n              id\n            } = await this._protoo.request(\"produce\", {\n              transportId: this._sendTransport.id,\n              kind,\n              rtpParameters,\n              appData\n            });\n            callback({\n              id\n            });\n          } catch (error) {\n            errback(error);\n          }\n        });\n\n        this._sendTransport.on(\"producedata\", async ({\n          sctpStreamParameters,\n          label,\n          protocol,\n          appData\n        }, callback, errback) => {\n          //logger.debug(\n          //   '\"producedata\" event: [sctpStreamParameters:%o, appData:%o]',\n          //   sctpStreamParameters,\n          //   appData\n          // );\n          try {\n            // eslint-disable-next-line no-shadow\n            const {\n              id\n            } = await this._protoo.request(\"produceData\", {\n              transportId: this._sendTransport.id,\n              sctpStreamParameters,\n              label,\n              protocol,\n              appData\n            });\n            callback({\n              id\n            });\n          } catch (error) {\n            errback(error);\n          }\n        });\n      } // Create mediasoup Transport for sending (unless we don't want to consume).\n\n\n      if (this._consume) {\n        const transportInfo = await this._protoo.request(\"createWebRtcTransport\", {\n          forceTcp: this._forceTcp,\n          producing: false,\n          consuming: true,\n          sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : undefined\n        });\n        const {\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters\n        } = transportInfo;\n        this._recvTransport = this._mediasoupDevice.createRecvTransport({\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          iceServers: []\n        });\n\n        this._recvTransport.on(\"connect\", ({\n          dtlsParameters\n        }, callback, errback // eslint-disable-line no-shadow\n        ) => {\n          this._protoo.request(\"connectWebRtcTransport\", {\n            transportId: this._recvTransport.id,\n            dtlsParameters\n          }).then(callback).catch(errback);\n        });\n      } // Join now into the room.\n      // NOTE: Don't send our RTP capabilities if we don't want to consume.\n      //custom by @danisharora099 to handle host logic\n\n\n      const {\n        lobbyPeers,\n        peers,\n        hostId,\n        coHostIds,\n        isRoomLocked,\n        isRecording\n      } = await this._protoo.request(\"join\", {\n        displayName: this._displayName,\n        device: this._device,\n        rtpCapabilities: this._consume ? this._mediasoupDevice.rtpCapabilities : undefined,\n        sctpCapabilities: this._useDataChannel && this._consume ? this._mediasoupDevice.sctpCapabilities : undefined\n      }); //TODO: dispatch recording status to redux\n      // store.dispatch(stateActions.setRoomLock(isRoomLocked));\n      // store.dispatch(stateActions.setRoomHost(hostId));\n      // store.dispatch(stateActions.updateCoHosts(coHostIds));\n      // store.dispatch(stateActions.setRoomState(\"connected\"));\n      // Clean all the existing notifcations.\n      // store.dispatch(stateActions.removeAllNotifications());\n      // store.dispatch(\n      //   requestActions.notify({\n      //     title: \"are in the room!\",\n      //     text: \"You are in the room!\",\n      //     displayName: \"You\",\n      //     timeout: 3000,\n      //   })\n      // );\n\n      for (const peer of peers) {\n        // store.dispatch(\n        //   stateActions.addPeer({\n        //     ...peer,\n        //     consumers: [],\n        //     dataConsumers: [],\n        //     messages: [],\n        //     unreadMsgs: 0,\n        //   })\n        // );\n        emitter.emit(\"addPeer\", { ...peer,\n          consumers: [],\n          dataConsumers: [],\n          messages: [],\n          unreadMsgs: 0\n        });\n      } // Enable mic/webcam.\n\n\n      if (this._produce) {\n        // Set our media capabilities.\n        // store.dispatch(\n        //   stateActions.setMediaCapabilities({\n        //     canSendMic: this._mediasoupDevice.canProduce(\"audio\"),\n        //     canSendWebcam: this._mediasoupDevice.canProduce(\"video\"),\n        //   })\n        // );\n        // this.enableMic();\n        // const devicesCookie = cookiesManager.getDevices();\n        if ( // !devicesCookie ||\n        // devicesCookie.webcamEnabled ||\n        this._externalVideo) // this.enableWebcam();\n          this._sendTransport.on(\"connectionstatechange\", connectionState => {//we are now manually turning on the data producers in RoomContainer.js\n            // if (connectionState === \"connected\") {\n            //   this.enableChatDataProducer();\n            //   this.enableBotDataProducer();\n            // }\n          });\n      } // NOTE: For testing.\n      // if (window.SHOW_INFO) {\n      //   const { me } = //store.getState();\n      //   store.dispatch(stateActions.setRoomStatsPeerId(me.id));\n      // }\n\n    } catch (error) {\n      //logger.error(\"_joinRoom() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Could not join the room: ${error}`,\n      //   })\n      // );\n      this.close();\n    }\n  }\n\n  async _updateWebcams() {\n    //logger.debug(\"_updateWebcams()\");\n    // Reset the list.\n    this._webcams = new Map(); //logger.debug(\"_updateWebcams() | calling enumerateDevices()\");\n\n    const devices = await navigator.mediaDevices.enumerateDevices();\n\n    for (const device of devices) {\n      if (device.kind !== \"videoinput\") continue;\n\n      this._webcams.set(device.deviceId, device);\n    }\n\n    const array = Array.from(this._webcams.values());\n    const len = array.length;\n    const currentWebcamId = this._webcam.device ? this._webcam.device.deviceId : undefined; //logger.debug(\"_updateWebcams() [webcams:%o]\", array);\n\n    if (len === 0) this._webcam.device = null;else if (!this._webcams.has(currentWebcamId)) this._webcam.device = array[0]; // store.dispatch(stateActions.setCanChangeWebcam(this._webcams.size > 1));\n  }\n\n  _getWebcamType(device) {\n    if (/(back|rear)/i.test(device.label)) {\n      //logger.debug(\"_getWebcamType() | it seems to be a back camera\");\n      return \"back\";\n    } else {\n      //logger.debug(\"_getWebcamType() | it seems to be a front camera\");\n      return \"front\";\n    }\n  }\n\n  async _pauseConsumer(consumer) {\n    if (consumer.paused) return;\n\n    try {\n      await this._protoo.request(\"pauseConsumer\", {\n        consumerId: consumer.id\n      });\n      consumer.pause(); // store.dispatch(stateActions.setConsumerPaused(consumer.id, \"local\"));\n    } catch (error) {//logger.error(\"_pauseConsumer() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error pausing Consumer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async _resumeConsumer(consumer) {\n    if (!consumer.paused) return;\n\n    try {\n      await this._protoo.request(\"resumeConsumer\", {\n        consumerId: consumer.id\n      });\n      consumer.resume(); // store.dispatch(stateActions.setConsumerResumed(consumer.id, \"local\"));\n    } catch (error) {//logger.error(\"_resumeConsumer() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error resuming Consumer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async _getExternalVideoStream() {\n    if (this._externalVideoStream) return this._externalVideoStream;\n\n    if (this._externalVideo.readyState < 3) {\n      await new Promise(resolve => this._externalVideo.addEventListener(\"canplay\", resolve));\n    }\n\n    if (this._externalVideo.captureStream) this._externalVideoStream = this._externalVideo.captureStream();else if (this._externalVideo.mozCaptureStream) this._externalVideoStream = this._externalVideo.mozCaptureStream();else throw new Error(\"video.captureStream() not supported\");\n    return this._externalVideoStream;\n  }\n\n}\nexport { emitter };","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/huddle01-client/src/huddle-client.js"],"names":["protooClient","mediasoupClient","getProtooUrl","emitter","deviceInfo","axios","VIDEO_CONSTRAINS","qvga","width","ideal","height","vga","hd","PC_PROPRIETARY_CONSTRAINTS","optional","googDscp","WEBCAM_SIMULCAST_ENCODINGS","scaleResolutionDownBy","maxBitrate","WEBCAM_KSVC_ENCODINGS","scalabilityMode","SCREEN_SHARING_SIMULCAST_ENCODINGS","dtx","SCREEN_SHARING_SVC_ENCODINGS","EXTERNAL_VIDEO_SRC","HuddleClient","constructor","roomId","peerId","apiKey","displayName","handlerName","useSimulcast","useSharingSimulcast","forceTcp","produce","consume","forceH264","forceVP9","svc","datachannel","externalVideo","isBot","userToken","userPassword","window","Error","_window","_peerId","_roomId","localStore","Map","peers","_closed","_displayName","_device","_forceTcp","_produce","_consume","_useDataChannel","_forceH264","Boolean","_forceVP9","_externalVideo","_externalVideoStream","_nextDataChannelTestNumber","_isBot","document","createElement","controls","muted","loop","setAttribute","src","play","_handlerName","_useSimulcast","_useSharingSimulcast","_protooUrl","_protoo","_mediasoupDevice","_sendTransport","_recvTransport","_micProducer","_webcamProducer","_shareProducer","_chatDataProducer","_miscDataProducer","_reactionsDataProducer","_miroDataProducer","_raiseHandDataProducer","_botDataProducer","_consumers","_dataConsumers","_webcams","_webcam","device","resolution","_setLocalState","name","value","set","_getLocalState","get","close","denied","sendMiro","join","headers","error","protooTransport","WebSocketTransport","Peer","on","_joinRoom","emit","data","request","accept","reject","method","producerId","id","kind","rtpParameters","type","appData","producerPaused","console","log","consumer","delete","spatialLayers","temporalLayers","parseScalabilityMode","encodings","consumerType","track","share","type2","locallyPaused","remotelyPaused","preferredSpatialLayer","preferredTemporalLayer","priority","codec","codecs","mimeType","split","_pauseConsumer","dataProducerId","sctpStreamParameters","label","protocol","dataConsumer","consumeData","message","DC_MESSAGE","ArrayBuffer","view","DataView","number","getUint32","Math","pow","peersArray","Object","keys","map","sendingPeer","find","peer","dataConsumers","includes","DC","notification","errorInfo","coHostIds","producerType","muteMic","disableWebcam","isRoomLocked","fromId","existingPeer","payload","title","text","lobbyPeers","e","hostId","score","consumers","messages","unreadMsgs","videoUrl","values","oldDisplayName","consumerId","pause","resume","spatialLayer","temporalLayer","dataConsumerId","allowLobbyPeerToJoinRoom","peerIdToAdmit","disallowLobbyPeerFromJoiningRoom","peerIdToDisallow","sendDM","toId","enableMic","canProduce","stream","navigator","mediaDevices","getUserMedia","audio","getAudioTracks","_getExternalVideoStream","clone","codecOptions","opusStereo","opusDtx","disableMic","catch","stop","unmuteMic","enableWebcam","_updateWebcams","video","deviceId","getVideoTracks","videoGoogleStartBitrate","rtpCapabilities","c","toLowerCase","firstVideoCodec","isWebcam","deviceLabel","webcamType","_getWebcamType","paused","pauseVideo","resumeVideo","changeWebcam","array","Array","from","len","length","undefined","idx","indexOf","exact","replaceTrack","changeWebcamResolution","enableShare","getDisplayMedia","displaySurface","logicalSurface","cursor","max","frameRate","encoding","disableShare","enableAudioOnly","disableAudioOnly","_resumeConsumer","muteAudio","unmuteAudio","restartIce","iceParameters","transportId","setMaxSendingSpatialLayer","setMaxSpatialLayer","setConsumerPreferredLayers","setConsumerPriority","requestConsumerKeyFrame","enableRaiseHandDataProducer","produceData","ordered","maxRetransmits","info","enableReactionsDataProducer","enableMiroDataProducer","enableMiscDataProducer","enableChatDataProducer","enableBotDataProducer","maxPacketLifeTime","raiseHand","booleanInString","send","sendReaction","reaction","setTimeout","boardId","sendMiscMessages","sendChatMessage","sendBotMessage","disablePeerProducer","peerIdOrIds","status","kickPeerFromRoom","peerIdToKick","closeRoomForAll","makeACoHost","startRecording","location","href","search","stopRecording","emailRecordingUrl","to","url","toggleRoomLock","_bool","state","changeDisplayName","getSendTransportRemoteStats","getRecvTransportRemoteStats","getAudioRemoteStats","getVideoRemoteStats","producer","getConsumerRemoteStats","getChatDataProducerRemoteStats","dataProducer","getBotDataProducerRemoteStats","getDataConsumerRemoteStats","getSendTransportLocalStats","getStats","getRecvTransportLocalStats","getAudioLocalStats","getVideoLocalStats","getConsumerLocalStats","applyNetworkThrottle","uplink","downlink","rtt","secret","resetNetworkThrottle","silent","Device","routerRtpCapabilities","load","audioTrack","enabled","transportInfo","producing","consuming","sctpCapabilities","iceCandidates","dtlsParameters","sctpParameters","createSendTransport","iceServers","proprietaryConstraints","callback","errback","then","createRecvTransport","isRecording","connectionState","devices","enumerateDevices","currentWebcamId","has","test","readyState","Promise","resolve","addEventListener","captureStream","mozCaptureStream"],"mappings":"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","sourcesContent":["import protooClient from \"protoo-client\";\nimport * as mediasoupClient from \"mediasoup-client\";\nimport { getProtooUrl } from \"./utils/urlFactory.js\";\nimport emitter from \"./utils/EventEmitter.js\";\nimport deviceInfo from \"./utils/deviceInfo.js\";\nimport axios from \"axios\";\n\n// import Logger from \"./Logger\";\n// import * as cookiesManager from \"./cookiesManager\";\n// import * as requestActions from \"../redux/actions/requestActions\";\n// import * as stateActions from \"../redux/actions/stateActions\";\n// import {\n//   toggleMic,\n//   toggleVideo,\n//   toggleRecording,\n//   toggleScreenShare,\n//   hasBotEntered,\n// } from \"../redux/actions/btmBarActions\";\n// import {\n//   toggleBoard,\n//   setMiroAdmin,\n//   setMiroLink,\n// } from \"../redux/actions/miroActions\";\n\n// import ChatMessageSound from \"../assets/ChatSound.mp3\";\n\nconst VIDEO_CONSTRAINS = {\n  qvga: { width: { ideal: 320 }, height: { ideal: 240 } },\n  vga: { width: { ideal: 640 }, height: { ideal: 480 } },\n  hd: { width: { ideal: 1280 }, height: { ideal: 720 } },\n};\n\nconst PC_PROPRIETARY_CONSTRAINTS = {\n  optional: [{ googDscp: true }],\n};\n\n// Used for simulcast webcam video.\nconst WEBCAM_SIMULCAST_ENCODINGS = [\n  { scaleResolutionDownBy: 4, maxBitrate: 500000 },\n  { scaleResolutionDownBy: 2, maxBitrate: 1000000 },\n  { scaleResolutionDownBy: 1, maxBitrate: 5000000 },\n];\n\n// Used for VP9 webcam video.\nconst WEBCAM_KSVC_ENCODINGS = [{ scalabilityMode: \"S3T3_KEY\" }];\n\n// Used for simulcast screen sharing.\nconst SCREEN_SHARING_SIMULCAST_ENCODINGS = [\n  { dtx: true, maxBitrate: 1500000 },\n  { dtx: true, maxBitrate: 6000000 },\n];\n\n// Used for VP9 screen sharing.\nconst SCREEN_SHARING_SVC_ENCODINGS = [{ scalabilityMode: \"S3T3\", dtx: true }];\n\nconst EXTERNAL_VIDEO_SRC = \"/resources/videos/video-audio-stereo.mp4\";\n\n// const logger = new Logger(\"RoomClient\");\n\n// let //store;\n\nexport default class HuddleClient {\n  // /**\n  //  * @param  {Object} data\n  //  * @param  {Object} data.//store - The Redux //store.\n  //  */\n  // //   static init(data) {\n  // //     //store = data.//store;\n  // //   }\n\n  constructor({\n    roomId,\n    peerId,\n    apiKey,\n    displayName,\n    // device,\n    handlerName,\n    useSimulcast,\n    useSharingSimulcast,\n    forceTcp,\n    produce,\n    consume,\n    forceH264,\n    forceVP9,\n    svc,\n    datachannel,\n    externalVideo,\n    isBot,\n    userToken,\n    userPassword,\n    window,\n  }) {\n    if (!apiKey) throw new Error(\"Please pass a valid apiKey\");\n\n    // logger.debug(\n    //   'constructor() [roomId:\"%s\", peerId:\"%s\", displayName:\"%s\", device:%s]',\n    //   roomId,\n    //   peerId,\n    //   displayName,\n    //   device.flag\n    // );\n\n    this.userPassword = userPassword;\n    this._window = window;\n\n    this.userToken = userToken || null;\n    //Peer Id\n    // @type {String}\n    this._peerId = peerId;\n\n    //Room Id\n    // @type {String}\n    this._roomId = roomId;\n\n    this.localStore = new Map();\n\n    // TODO: add type\n    this.peers = {};\n\n    // Closed flag.\n    // @type {Boolean}\n    this._closed = false;\n\n    // Display name.\n    // @type {String}\n    this._displayName = displayName;\n\n    // Device info.\n    // @type {Object}\n    this._device = deviceInfo(this._window);\n\n    // Whether we want to force RTC over TCP.\n    // @type {Boolean}\n    this._forceTcp = forceTcp;\n\n    // Whether we want to produce audio/video.\n    // @type {Boolean}\n    this._produce = isBot ? false : true;\n\n    // Whether we should consume.\n    // @type {Boolean}\n    this._consume = consume || true;\n\n    // Whether we want DataChannels.\n    // @type {Boolean}\n    this._useDataChannel = datachannel || true;\n\n    // Force H264 codec for sending.\n    this._forceH264 = Boolean(forceH264);\n\n    // Force VP9 codec for sending.\n    this._forceVP9 = Boolean(forceVP9);\n\n    // External video.\n    // @type {HTMLVideoElement}\n    this._externalVideo = null;\n\n    // MediaStream of the external video.\n    // @type {MediaStream}\n    this._externalVideoStream = null;\n\n    // Next expected dataChannel test number.\n    // @type {Number}\n    this._nextDataChannelTestNumber = 0;\n\n    // isBot expected boolean.\n    // @type {Bool}\n    this._isBot = isBot;\n\n    if (externalVideo) {\n      this._externalVideo = document.createElement(\"video\");\n\n      this._externalVideo.controls = true;\n      this._externalVideo.muted = true;\n      this._externalVideo.loop = true;\n      this._externalVideo.setAttribute(\"playsinline\", \"\");\n      this._externalVideo.src = EXTERNAL_VIDEO_SRC;\n\n      this._externalVideo.play();\n      //.catch((error) =>logger.warn(\"externalVideo.play() failed:%o\", error));\n    }\n\n    // Custom mediasoup-client handler name (to override default browser\n    // detection if desired).\n    // @type {String}\n    this._handlerName = handlerName;\n\n    // Whether simulcast should be used.\n    // @type {Boolean}\n    this._useSimulcast = useSimulcast || true;\n\n    // Whether simulcast should be used in desktop sharing.\n    // @type {Boolean}\n    this._useSharingSimulcast = useSharingSimulcast;\n\n    // Protoo URL.\n    // @type {String}\n    this._protooUrl = getProtooUrl({\n      roomId,\n      peerId,\n      window: this._window,\n      apiKey,\n    });\n\n    this.apiKey = apiKey;\n\n    // protoo-client Peer instance.\n    // @type {protooClient.Peer}\n    this._protoo = null;\n\n    // mediasoup-client Device instance.\n    // @type {mediasoupClient.Device}\n    this._mediasoupDevice = null;\n\n    // mediasoup Transport for sending.\n    // @type {mediasoupClient.Transport}\n    this._sendTransport = null;\n\n    // mediasoup Transport for receiving.\n    // @type {mediasoupClient.Transport}\n    this._recvTransport = null;\n\n    // Local mic mediasoup Producer.\n    // @type {mediasoupClient.Producer}\n    this._micProducer = null;\n\n    // Local webcam mediasoup Producer.\n    // @type {mediasoupClient.Producer}\n    this._webcamProducer = null;\n\n    // Local shar===iasoupClient.Producer}\n    this._shareProducer = null;\n\n    // Local chat DataProducer.\n    // @type {mediasoupClient.DataProducer}\n    this._chatDataProducer = null;\n\n    // Local misc DataProducer.\n    // @type {mediasoupClient.DataProducer}\n    this._miscDataProducer = null;\n\n    // Local reactions DataProducer.\n    // @type {mediasoupClient.DataProducer}\n    this._reactionsDataProducer = null;\n\n    // Local miro DataProducer.\n    // @type {mediasoupClient.DataProducer}\n    this._miroDataProducer = null;\n\n    // Local raise hand DataProducer.\n    // @type {mediasoupClient.DataProducer}\n    this._raiseHandDataProducer = null;\n\n    // Local bot DataProducer.\n    // @type {mediasoupClient.DataProducer}\n    this._botDataProducer = null;\n\n    // mediasoup Consumers.\n    // @type {Map<String, mediasoupClient.Consumer>}\n    this._consumers = new Map();\n\n    // mediasoup DataConsumers.\n    // @type {Map<String, mediasoupClient.DataConsumer>}\n    this._dataConsumers = new Map();\n\n    // Map of webcam MediaDeviceInfos indexed by deviceId.\n    // @type {Map<String, MediaDeviceInfos>}\n    this._webcams = new Map();\n\n    // Local Webcam.\n    // @type {Object} with:\n    // - {MediaDeviceInfo} [device]\n    // - {String} [resolution] - 'qvga' / 'vga' / 'hd'.\n    this._webcam = {\n      device: null,\n      resolution: \"hd\",\n    };\n\n    // Set custom SVC scalability mode.\n    if (svc) {\n      WEBCAM_KSVC_ENCODINGS[0].scalabilityMode = `${svc}_KEY`;\n      SCREEN_SHARING_SVC_ENCODINGS[0].scalabilityMode = svc;\n    }\n  }\n\n  _setLocalState(name, value) {\n    return this.localStore.set(name, value);\n  }\n\n  _getLocalState(name) {\n    return this.localStore.get(name);\n  }\n\n  close(denied = false) {\n    if (this._closed) return;\n\n    this._closed = true;\n\n    //logger.debug(\"close()\");\n\n    // Close protoo Peer\n    this._protoo.close();\n\n    // Close mediasoup Transports.\n    if (this._sendTransport) this._sendTransport.close();\n\n    if (this._recvTransport) this._recvTransport.close();\n\n    if (denied) {\n      //   store.dispatch(stateActions.setRoomState(\"roomValidity:denied\"));\n    } else {\n      //   store.dispatch(stateActions.setRoomState(\"closed\"));\n    }\n\n    //miro handler\n    // store.dispatch(toggleBoard(false));\n    // store.dispatch(setMiroLink(null));\n    // store.dispatch(setMiroAdmin(false));\n    this.sendMiro(null);\n  }\n\n  async join() {\n    try {\n      await axios.get(\"https://api.huddle01.com/\", {\n        headers: { \"x-api-key\": this.apiKey },\n      });\n    } catch (error) {\n      throw new Error(\"Invalid API Key passed\");\n    }\n    const protooTransport = new protooClient.WebSocketTransport(\n      this._protooUrl\n    );\n\n    this._protoo = new protooClient.Peer(protooTransport);\n\n    // store.dispatch(stateActions.setRoomState(\"connecting\"));\n\n    this._protoo.on(\"open\", async () => {\n      this._joinRoom();\n      emitter.emit(\"roomState\", \"connected\");\n\n      // //directly send the bot inside the room\n      // if (this._isBot) {\n      //   this._joinRoom();\n      //   return;\n      // }\n      // const displayName = this._displayName;\n\n      // try {\n      //   await this._protoo.request(\"checkRoomValidity\");\n      //   // store.dispatch(stateActions.setRoomState(\"roomValidity:allowed\"));\n      // } catch (error) {\n      //   return;\n      // }\n\n      // const { host } = await this._protoo.request(\"lobby\", {\n      //   displayName,\n      //   password: this.roomPassword,\n      // });\n      // if (host !== this._peerId) {\n      // }\n    });\n\n    this._protoo.on(\"failed\", (data) => {\n      emitter.emit(\"roomState\", \"failed\");\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"WebSocket connection failed\",\n      //   })\n      // );\n    });\n\n    this._protoo.on(\"disconnected\", () => {\n      emitter.emit(\"roomState\", \"disconnected\");\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"WebSocket disconnected\",\n      //   })\n      // );\n\n      // Close mediasoup Transports.\n      if (this._sendTransport) {\n        this._sendTransport.close();\n        this._sendTransport = null;\n      }\n\n      if (this._recvTransport) {\n        this._recvTransport.close();\n        this._recvTransport = null;\n      }\n\n      // store.dispatch(stateActions.setRoomState(\"closed\"));\n    });\n\n    this._protoo.on(\"close\", () => {\n      if (this._closed) return;\n\n      this.close();\n    });\n\n    // eslint-disable-next-line no-unused-vars\n    this._protoo.on(\"request\", async (request, accept, reject) => {\n      //logger.debug(\n      //   'proto \"request\" event [method:%s, data:%o]',\n      //   request.method,\n      //   request.data\n      // );\n\n      switch (request.method) {\n        case \"newConsumer\": {\n          if (!this._consume) {\n            reject(403, \"I do not want to consume\");\n\n            break;\n          }\n\n          const {\n            peerId,\n            producerId,\n            id,\n            kind,\n            rtpParameters,\n            type,\n            appData,\n            producerPaused,\n          } = request.data;\n\n          console.log({ request: request.data });\n\n          try {\n            const consumer = await this._recvTransport.consume({\n              id,\n              producerId,\n              kind,\n              rtpParameters,\n              appData: { ...appData, peerId }, // Trick.\n            });\n\n            // //store in the map.\n            this._consumers.set(consumer.id, consumer);\n\n            consumer.on(\"transportclose\", () => {\n              this._consumers.delete(consumer.id);\n            });\n\n            const { spatialLayers, temporalLayers } =\n              mediasoupClient.parseScalabilityMode(\n                consumer.rtpParameters.encodings[0].scalabilityMode\n              );\n\n            // console.log({ producerPaused });\n\n            // store.dispatch(\n            //   stateActions.addConsumer(\n            //     {\n            //       id: consumer.id,\n            //       type: type,\n            //       locallyPaused: false,\n            //       remotelyPaused: producerPaused,\n            //       rtpParameters: consumer.rtpParameters,\n            //       spatialLayers: spatialLayers,\n            //       temporalLayers: temporalLayers,\n            //       preferredSpatialLayer: spatialLayers - 1,\n            //       preferredTemporalLayer: temporalLayers - 1,\n            //       priority: 1,\n            //       codec:\n            //         consumer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n            //       track: consumer.track,\n            //       appData, //testing\n            //     },\n            //     peerId\n            //   )\n            // );\n\n            let consumerType;\n            if (\n              consumer.track.kind === \"video\" &&\n              consumer.appData.share === true\n            ) {\n              consumerType = \"screen\";\n            } else if (\n              consumer.track.kind === \"video\" &&\n              consumer.appData.share === false\n            ) {\n              consumerType = \"webcam\";\n            } else {\n              consumerType = \"mic\";\n            }\n\n            emitter.emit(\n              \"addConsumer\",\n              {\n                id: consumer.id,\n                type: consumerType,\n                type2: type,\n                locallyPaused: false,\n                remotelyPaused: producerPaused,\n                rtpParameters: consumer.rtpParameters,\n                spatialLayers: spatialLayers,\n                temporalLayers: temporalLayers,\n                preferredSpatialLayer: spatialLayers - 1,\n                preferredTemporalLayer: temporalLayers - 1,\n                priority: 1,\n                codec: consumer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n                track: consumer.track,\n                peerId,\n                appData, //testing\n              },\n              peerId\n            );\n\n            // We are ready. Answer the protoo request so the server will\n            // resume this Consumer (which was paused for now if video).\n            accept();\n\n            // If audio-only mode is enabled, pause it.\n            if (\n              consumer.kind === \"video\" &&\n              this._getLocalState(\"audioOnly\") === true\n            ) {\n              this._pauseConsumer(consumer);\n            }\n          } catch (error) {\n            //logger.error('\"newConsumer\" request failed:%o', error);\n\n            // store.dispatch(\n            //   requestActions.notify({\n            //     type: \"error\",\n            //     text: `Error creating a Consumer: ${error}`,\n            //   })\n            // );\n\n            throw error;\n          }\n\n          break;\n        }\n\n        case \"newDataConsumer\": {\n          if (!this._consume) {\n            reject(403, \"I do not want to data consume\");\n\n            break;\n          }\n\n          if (!this._useDataChannel) {\n            reject(403, \"I do not want DataChannels\");\n\n            break;\n          }\n\n          const {\n            peerId, // NOTE: Null if bot.\n            dataProducerId,\n            id,\n            sctpStreamParameters,\n            label,\n            protocol,\n            appData,\n          } = request.data;\n\n          try {\n            const dataConsumer = await this._recvTransport.consumeData({\n              id,\n              dataProducerId,\n              sctpStreamParameters,\n              label,\n              protocol,\n              appData: { ...appData, peerId }, // Trick.\n            });\n\n            // //store in the map.\n            this._dataConsumers.set(dataConsumer.id, dataConsumer);\n\n            dataConsumer.on(\"transportclose\", () => {\n              this._dataConsumers.delete(dataConsumer.id);\n            });\n\n            dataConsumer.on(\"open\", () => {\n              //logger.debug('DataConsumer \"open\" event');\n            });\n\n            dataConsumer.on(\"close\", () => {\n              //logger.warn('DataConsumer \"close\" event');\n\n              this._dataConsumers.delete(dataConsumer.id);\n\n              // store.dispatch(\n              //   requestActions.notify({\n              //     type: \"error\",\n              //     text: \"DataConsumer closed\",\n              //   })\n              // );\n            });\n\n            dataConsumer.on(\"error\", (error) => {\n              //logger.error('DataConsumer \"error\" event:%o', error);\n              // store.dispatch(\n              //   requestActions.notify({\n              //     type: \"error\",\n              //     text: `DataConsumer error: ${error}`,\n              //   })\n              // );\n            });\n\n            dataConsumer.on(\"message\", (message) => {\n              //logger.debug(\n              //   'DataConsumer \"message\" event [streamId:%d]',\n              //   dataConsumer.sctpStreamParameters.streamId\n              // );\n\n              // TODO: For debugging.\n              window.DC_MESSAGE = message;\n\n              if (message instanceof ArrayBuffer) {\n                const view = new DataView(message);\n                const number = view.getUint32();\n\n                if (number === Math.pow(2, 32) - 1) {\n                  //logger.warn(\"dataChannelTest finished!\");\n\n                  this._nextDataChannelTestNumber = 0;\n\n                  return;\n                }\n\n                if (number > this._nextDataChannelTestNumber) {\n                  //logger.warn(\n                  //   \"dataChannelTest: %s packets missing\",\n                  //   number - this._nextDataChannelTestNumber\n                  // );\n                }\n\n                this._nextDataChannelTestNumber = number + 1;\n\n                return;\n              } else if (typeof message !== \"string\") {\n                //logger.warn('ignoring DataConsumer \"message\" (not a string)');\n\n                return;\n              }\n\n              switch (dataConsumer.label) {\n                case \"raise-hand\": {\n                  //const { peers } = //store.getState();\n                  const peers = this.peers;\n                  const peersArray = Object.keys(peers).map(\n                    (_peerId) => peers[_peerId]\n                  );\n                  const sendingPeer = peersArray.find((peer) =>\n                    peer.dataConsumers.includes(dataConsumer.id)\n                  );\n\n                  if (!sendingPeer) {\n                    //logger.warn('DataConsumer \"message\" from unknown peer');\n                    break;\n                  }\n\n                  // store.dispatch(\n                  //   requestActions.notify({\n                  //     type: \"raise-hand\",\n                  //     title: \"raised hand ✋\",\n                  //     text: message,\n                  //     displayName: sendingPeer.displayName,\n                  //     peerId: sendingPeer.id,\n                  //   })\n                  // );\n\n                  break;\n                }\n\n                case \"reactions\": {\n                  const peers = this.peers; //store.getState();\n                  const peersArray = Object.keys(peers).map(\n                    (_peerId) => peers[_peerId]\n                  );\n                  const sendingPeer = peersArray.find((peer) =>\n                    peer.dataConsumers.includes(dataConsumer.id)\n                  );\n\n                  if (!sendingPeer) {\n                    //logger.warn('DataConsumer \"message\" from unknown peer');\n                    break;\n                  }\n\n                  // store.dispatch(\n                  //   requestActions.notify({\n                  //     type: \"reactions\",\n                  //     title: `reacted with ${message}`,\n                  //     text: message,\n                  //     displayName: sendingPeer.displayName,\n                  //     peerId: sendingPeer.id,\n                  //   })\n                  // );\n\n                  break;\n                }\n                case \"miro\": {\n                  const peers = this.peers; //store.getState();\n                  const peersArray = Object.keys(peers).map(\n                    (_peerId) => peers[_peerId]\n                  );\n                  const sendingPeer = peersArray.find((peer) =>\n                    peer.dataConsumers.includes(dataConsumer.id)\n                  );\n\n                  if (!sendingPeer) {\n                    //logger.warn('DataConsumer \"message\" from unknown peer');\n                    break;\n                  }\n\n                  // store.dispatch(\n                  //   requestActions.notify({\n                  //     type: \"miro\",\n                  //     title: `started miroboard`,\n                  //     text: message,\n                  //     displayName: sendingPeer.displayName,\n                  //     peerId: sendingPeer.id,\n                  //   })\n                  // );\n\n                  break;\n                }\n\n                case \"misc\": {\n                  const peers = this.peers; //= store.getState();\n                  const peersArray = Object.keys(peers).map(\n                    (_peerId) => peers[_peerId]\n                  );\n                  const sendingPeer = peersArray.find((peer) =>\n                    peer.dataConsumers.includes(dataConsumer.id)\n                  );\n\n                  if (!sendingPeer) {\n                    //logger.warn('DataConsumer \"message\" from unknown peer');\n                    break;\n                  }\n\n                  // store.dispatch(\n                  //   requestActions.notify({\n                  //     type: \"misc\",\n                  //     title: `${sendingPeer.displayName} says: YOOOO - `,\n                  //     text: message,\n                  //   })\n                  // );\n\n                  break;\n                }\n\n                case \"chat\": {\n                  const peers = this.peers; //= store.getState();\n                  const peersArray = Object.keys(peers).map(\n                    (_peerId) => peers[_peerId]\n                  );\n                  const sendingPeer = peersArray.find((peer) =>\n                    peer.dataConsumers.includes(dataConsumer.id)\n                  );\n\n                  if (!sendingPeer) {\n                    //logger.warn('DataConsumer \"message\" from unknown peer');\n\n                    break;\n                  }\n\n                  // store.dispatch(\n                  //   requestActions.notify({\n                  //     type: \"chat\",\n                  //     title: `sent you a message`,\n                  //     text: message,\n                  //     displayName: sendingPeer.displayName,\n                  //   })\n                  // );\n\n                  break;\n                }\n\n                case \"bot\": {\n                  // store.dispatch(\n                  //   requestActions.notify({\n                  //     title: \"Message from Bot:\",\n                  //     text: message,\n                  //     timeout: 5000,\n                  //   })\n                  // );\n\n                  break;\n                }\n              }\n            });\n\n            // TODO: REMOVE\n            window.DC = dataConsumer;\n\n            // store.dispatch(\n            //   stateActions.addDataConsumer(\n            //     {\n            //       id: dataConsumer.id,\n            //       sctpStreamParameters: dataConsumer.sctpStreamParameters,\n            //       label: dataConsumer.label,\n            //       protocol: dataConsumer.protocol,\n            //     },\n            //     peerId\n            //   )\n            // );\n\n            // We are ready. Answer the protoo request.\n            accept();\n          } catch (error) {\n            //logger.error('\"newDataConsumer\" request failed:%o', error);\n\n            // store.dispatch(\n            //   requestActions.notify({\n            //     type: \"error\",\n            //     text: `Error creating a DataConsumer: ${error}`,\n            //   })\n            // );\n\n            throw error;\n          }\n\n          break;\n        }\n      }\n    });\n\n    this._protoo.on(\"notification\", (notification) => {\n      //logger.debug(\n      //   'proto \"notification\" event [method:%s, data:%o]',\n      //   notification.method,\n      //   notification.data\n      // );hostId\n\n      switch (notification.method) {\n        case \"roomValidityDenied\": {\n          const errorInfo = notification.data;\n          //TODO: handle error status\n          console.log({ errorInfo });\n          this.close(true);\n          break;\n        }\n        case \"updatedCoHosts\": {\n          const { coHostIds } = notification.data;\n          // store.dispatch(stateActions.updateCoHosts(coHostIds));\n          break;\n        }\n        //host wants to disable your producer\n        case \"disableMyProducer\": {\n          const { producerType } = notification.data;\n          if (producerType === \"mic\") {\n            this.muteMic();\n          } else if (producerType === \"webcam\") {\n            this.disableWebcam();\n          }\n          break;\n        }\n\n        case \"room-lock-state\": {\n          const { isRoomLocked } = notification.data;\n          // console.log({ isRoomLocked });\n          // store.dispatch(stateActions.setRoomLock(isRoomLocked));\n          break;\n        }\n\n        case \"recieved-DM\": {\n          const { message, fromId } = notification.data;\n          //TODO: dispatch to redux\n          console.log({ message, fromId });\n\n          const existingPeer = this.peers[fromId]; //= store.getState().peers[fromId];\n\n          const payload = {\n            peerId: fromId,\n            message: {\n              id: fromId,\n              type: \"text\",\n              title: `sent you a message`,\n              text: message,\n              displayName: existingPeer.displayName,\n            },\n          };\n\n          // store.dispatch(stateActions.addNewMsg(payload));\n          // store.dispatch(\n          //   requestActions.notify({\n          //     type: \"chat\",\n          //     title: `sent you a message`,\n          //     text: message,\n          //     displayName: existingPeer.displayName,\n          //   })\n          // );\n\n          break;\n        }\n\n        case \"kickMeFromRoom\": {\n          this.close();\n          break;\n        }\n        case \"newLobbyPeer\": {\n          const { lobbyPeers } = notification.data;\n\n          console.log(\"in lobby\");\n\n          // store.dispatch(\n          //   requestActions.notify({\n          //     type: \"new-lobby-peer\",\n          //     lobbyPeers,\n          //     title: \"are waiting in the lobby\",\n          //     displayName: \"Peers\",\n          //   })\n          // );\n          break;\n        }\n\n        case \"updatedPeersArray\": {\n          const { lobbyPeers } = notification.data;\n\n          // store.dispatch(\n          //   requestActions.notify({\n          //     type: \"updated-peers-array\",\n          //     lobbyPeers,\n          //   })\n          // );\n          break;\n        }\n\n        case \"joinRoomPermissionGranted\": {\n          this._joinRoom();\n          // this._protoo.request(\"amIHost\")\n          break;\n        }\n\n        case \"joinRoomPermissionDenied\": {\n          try {\n            // store.dispatch(\n            //   requestActions.notify({\n            //     type: \"disallowed-room-join\",\n            //   })\n            // );\n            this.close();\n            break;\n          } catch (e) {\n            console.log(e);\n          }\n          break;\n        }\n\n        case \"hostIs\": {\n          const { hostId } = notification.data;\n          // store.dispatch(stateActions.setRoomHost(hostId));\n          break;\n        }\n\n        case \"producerScore\": {\n          const { producerId, score } = notification.data;\n\n          // store.dispatch(stateActions.setProducerScore(producerId, score));\n\n          break;\n        }\n\n        case \"newPeer\": {\n          const peer = notification.data;\n\n          // store.dispatch(\n          //   stateActions.addPeer({\n          //     ...peer,\n          //     consumers: [],\n          //     dataConsumers: [],\n          //     messages: [],\n          //     unreadMsgs: 0,\n          //   })\n          // );\n\n          emitter.emit(\"addPeer\", {\n            ...peer,\n            consumers: [],\n            dataConsumers: [],\n            messages: [],\n            unreadMsgs: 0,\n          });\n\n          this.peers[peer.peerId] = peer;\n\n          // store.dispatch(\n          //   requestActions.notify({\n          //     type: \"peer-join\",\n          //     title: `has joined the call`,\n          //     text: `has joined the call`,\n          //     displayName: peer.displayName,\n          //   })\n          // );\n          break;\n        }\n\n        case \"recording-started\": {\n          const { displayName } = notification.data;\n          // store.dispatch(\n          //   requestActions.notify({\n          //     displayName,\n          //     type: \"recording-started\",\n          //     text: \"Call is being recorded\",\n          //     title: \"started call recording\",\n          //   })\n          // );\n          // store.dispatch(hasBotEntered());\n          break;\n        }\n\n        case \"recording-stopped\": {\n          const { displayName } = notification.data;\n          // store.dispatch(\n          //   requestActions.notify({\n          //     displayName,\n          //     type: \"recording-stopped\",\n          //     text: \"Call recording has been stopped\",\n          //     title: \"stopped call recording\",\n          //   })\n          // );\n          // store.dispatch(hasBotEntered());\n          break;\n        }\n\n        //only host should see this\n        case \"recordingUrl\": {\n          const { videoUrl } = notification.data;\n          // store.dispatch(hasBotEntered());\n          // store.dispatch(\n          //   requestActions.notify({\n          //     type: \"recording-url\",\n          //     text: videoUrl,\n          //   })\n          // );\n          break;\n        }\n\n        case \"peerClosed\": {\n          const { peerId } = notification.data;\n\n          const peer = Object.values(\n            //store.getState().peers).find(\n            ({ id }) => id === peerId\n          );\n          // store.dispatch(\n          //   requestActions.notify({\n          //     type: \"peer-left\",\n          //     title: `has left the call`,\n          //     text: `has left the call`,\n          //     displayName: peer.displayName,\n          //   })\n          // );\n          // store.dispatch(stateActions.removePeer(peerId));\n\n          emitter.emit(\"removePeer\", peerId);\n\n          break;\n        }\n\n        case \"peerDisplayNameChanged\": {\n          const { peerId, displayName, oldDisplayName } = notification.data;\n\n          // store.dispatch(stateActions.setPeerDisplayName(displayName, peerId));\n\n          // store.dispatch(\n          //   requestActions.notify({\n          //     text: `${oldDisplayName} is now ${displayName}`,\n          //   })\n          // );\n\n          break;\n        }\n\n        case \"downlinkBwe\": {\n          //logger.debug(\"'downlinkBwe' event:%o\", notification.data);\n\n          break;\n        }\n\n        case \"consumerClosed\": {\n          const { consumerId } = notification.data;\n          const consumer = this._consumers.get(consumerId);\n\n          if (!consumer) break;\n\n          consumer.close();\n          this._consumers.delete(consumerId);\n\n          const { peerId } = consumer.appData;\n\n          // store.dispatch(stateActions.removeConsumer(consumerId, peerId));\n\n          let consumerType;\n          if (\n            consumer.track.kind === \"video\" &&\n            consumer.appData.share === true\n          ) {\n            consumerType = \"screen\";\n          } else if (\n            consumer.track.kind === \"video\" &&\n            consumer.appData.share === false\n          ) {\n            consumerType = \"webcam\";\n          } else {\n            consumerType = \"mic\";\n          }\n\n          emitter.emit(\"removeConsumer\", { ...consumer, type: consumerType });\n\n          break;\n        }\n\n        case \"consumerPaused\": {\n          const { consumerId } = notification.data;\n          const consumer = this._consumers.get(consumerId);\n\n          if (!consumer) break;\n\n          consumer.pause();\n\n          // store.dispatch(stateActions.setConsumerPaused(consumerId, \"remote\"));\n\n          break;\n        }\n\n        case \"consumerResumed\": {\n          const { consumerId } = notification.data;\n          const consumer = this._consumers.get(consumerId);\n\n          if (!consumer) break;\n\n          consumer.resume();\n\n          // store.dispatch(stateActions.setConsumerResumed(consumerId, \"remote\"));\n\n          break;\n        }\n\n        case \"consumerLayersChanged\": {\n          const { consumerId, spatialLayer, temporalLayer } = notification.data;\n          const consumer = this._consumers.get(consumerId);\n\n          if (!consumer) break;\n\n          // store.dispatch(\n          //   stateActions.setConsumerCurrentLayers(\n          //     consumerId,\n          //     spatialLayer,\n          //     temporalLayer\n          //   )\n          // );\n\n          break;\n        }\n\n        case \"consumerScore\": {\n          const { consumerId, score } = notification.data;\n\n          // store.dispatch(stateActions.setConsumerScore(consumerId, score));\n\n          break;\n        }\n\n        case \"dataConsumerClosed\": {\n          const { dataConsumerId } = notification.data;\n          const dataConsumer = this._dataConsumers.get(dataConsumerId);\n\n          if (!dataConsumer) break;\n\n          dataConsumer.close();\n          this._dataConsumers.delete(dataConsumerId);\n\n          const { peerId } = dataConsumer.appData;\n\n          // store.dispatch(\n          //   stateActions.removeDataConsumer(dataConsumerId, peerId)\n          // );\n\n          break;\n        }\n\n        case \"activeSpeaker\": {\n          const { peerId } = notification.data;\n\n          // store.dispatch(stateActions.setRoomActiveSpeaker(peerId));\n\n          break;\n        }\n\n        default: {\n          //logger.error(\n          //   'unknown protoo notification.method \"%s\"',\n          //   notification.method\n          // );\n        }\n      }\n    });\n  }\n\n  async allowLobbyPeerToJoinRoom(peerIdToAdmit) {\n    this._protoo.request(\"allowRoomJoin\", { peerIdToAdmit });\n  }\n\n  async disallowLobbyPeerFromJoiningRoom(peerIdToDisallow) {\n    this._protoo.request(\"disallowRoomJoin\", { peerIdToDisallow });\n  }\n\n  async sendDM(message, toId) {\n    try {\n      await this._protoo.request(\"sendDM\", { message, toId });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async enableMic() {\n    //logger.debug(\"enableMic()\");\n\n    if (this._micProducer) return;\n\n    if (!this._mediasoupDevice.canProduce(\"audio\")) {\n      //logger.error(\"enableMic() | cannot produce audio\");\n\n      return;\n    }\n\n    let track;\n\n    try {\n      if (!this._externalVideo) {\n        //logger.debug(\"enableMic() | calling getUserMedia()\");\n\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n\n        track = stream.getAudioTracks()[0];\n      } else {\n        const stream = await this._getExternalVideoStream();\n\n        track = stream.getAudioTracks()[0].clone();\n      }\n\n      this._micProducer = await this._sendTransport.produce({\n        track,\n        codecOptions: {\n          opusStereo: 1,\n          opusDtx: 1,\n        },\n        // NOTE: for testing codec selection.\n        // codec : this._mediasoupDevice.rtpCapabilities.codecs\n        // \t.find((codec) => codec.mimeType.toLowerCase() === 'audio/pcma')\n      });\n\n      // store.dispatch(\n      //   stateActions.addProducer({\n      //     id: this._micProducer.id,\n      //     paused: this._micProducer.paused,\n      //     track: this._micProducer.track,\n      //     rtpParameters: this._micProducer.rtpParameters,\n      //     codec:\n      //       this._micProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n      //   })\n      // );\n\n      this._micProducer.on(\"transportclose\", () => {\n        this._micProducer = null;\n      });\n\n      this._micProducer.on(\"trackended\", () => {\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Microphone disconnected!\",\n        //   })\n        // );\n\n        this.disableMic().catch(() => {});\n      });\n    } catch (error) {\n      //logger.error(\"enableMic() | failed:%o\", error);\n\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling microphone: ${error}`,\n      //   })\n      // );\n\n      if (track) track.stop();\n    }\n  }\n\n  async disableMic() {\n    //logger.debug(\"disableMic()\");\n\n    if (!this._micProducer) return;\n\n    this._micProducer.close();\n\n    // store.dispatch(stateActions.removeProducer(this._micProducer.id));\n    emitter.emit(\"removeProducer\", {\n      type: \"mic\",\n    });\n\n    try {\n      await this._protoo.request(\"closeProducer\", {\n        producerId: this._micProducer.id,\n      });\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error closing server-side mic Producer: ${error}`,\n      //   })\n      // );\n    }\n\n    this._micProducer = null;\n  }\n\n  async muteMic() {\n    //logger.debug(\"muteMic()\");\n\n    this._micProducer.pause();\n\n    try {\n      await this._protoo.request(\"pauseProducer\", {\n        producerId: this._micProducer.id,\n      });\n\n      // store.dispatch(stateActions.setProducerPaused(this._micProducer.id));\n      // store.dispatch(toggleMic(false));\n    } catch (error) {\n      //logger.error(\"muteMic() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error pausing server-side mic Producer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async unmuteMic() {\n    //logger.debug(\"unmuteMic()\");\n\n    this._micProducer.resume();\n\n    try {\n      await this._protoo.request(\"resumeProducer\", {\n        producerId: this._micProducer.id,\n      });\n\n      // store.dispatch(stateActions.setProducerResumed(this._micProducer.id));\n      // store.dispatch(toggleMic(true));\n    } catch (error) {\n      //logger.error(\"unmuteMic() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error resuming server-side mic Producer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async enableWebcam() {\n    //logger.debug(\"enableWebcam()\");\n\n    if (this._webcamProducer) return;\n    // else if (this._shareProducer) await this.disableShare();\n\n    if (!this._mediasoupDevice.canProduce(\"video\")) {\n      //logger.error(\"enableWebcam() | cannot produce video\");\n      return;\n    }\n\n    let track;\n    let device;\n\n    // store.dispatch(stateActions.setWebcamInProgress(true));\n    // store.dispatch(toggleVideo(true));\n\n    try {\n      if (!this._externalVideo) {\n        await this._updateWebcams();\n        device = this._webcam.device;\n\n        const { resolution } = this._webcam;\n\n        if (!device) throw new Error(\"no webcam devices\");\n\n        //logger.debug(\"enableWebcam() | calling getUserMedia()\");\n\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            deviceId: { ideal: device.deviceId },\n            ...VIDEO_CONSTRAINS[resolution],\n          },\n        });\n\n        track = stream.getVideoTracks()[0];\n      } else {\n        device = { label: \"external video\" };\n\n        const stream = await this._getExternalVideoStream();\n\n        track = stream.getVideoTracks()[0].clone();\n      }\n\n      let encodings;\n      let codec;\n      const codecOptions = {\n        videoGoogleStartBitrate: 1000,\n      };\n\n      if (this._forceH264) {\n        codec = this._mediasoupDevice.rtpCapabilities.codecs.find(\n          (c) => c.mimeType.toLowerCase() === \"video/h264\"\n        );\n\n        if (!codec) {\n          throw new Error(\"desired H264 codec+configuration is not supported\");\n        }\n      } else if (this._forceVP9) {\n        codec = this._mediasoupDevice.rtpCapabilities.codecs.find(\n          (c) => c.mimeType.toLowerCase() === \"video/vp9\"\n        );\n\n        if (!codec) {\n          throw new Error(\"desired VP9 codec+configuration is not supported\");\n        }\n      }\n\n      if (this._useSimulcast) {\n        // If VP9 is the only available video codec then use SVC.\n        const firstVideoCodec =\n          this._mediasoupDevice.rtpCapabilities.codecs.find(\n            (c) => c.kind === \"video\"\n          );\n\n        if (\n          (this._forceVP9 && codec) ||\n          firstVideoCodec.mimeType.toLowerCase() === \"video/vp9\"\n        ) {\n          encodings = WEBCAM_KSVC_ENCODINGS;\n        } else {\n          encodings = WEBCAM_SIMULCAST_ENCODINGS;\n        }\n      }\n\n      this._webcamProducer = await this._sendTransport.produce({\n        track,\n        encodings,\n        codecOptions,\n        codec,\n        appData: {\n          share: false,\n        },\n      });\n\n      // store.dispatch(\n      //   stateActions.addProducer({\n      //     id: this._webcamProducer.id,\n      //     isWebcam: true,\n      //     deviceLabel: device.label,\n      //     type: this._getWebcamType(device),\n      //     paused: this._webcamProducer.paused,\n      //     track: this._webcamProducer.track,\n      //     rtpParameters: this._webcamProducer.rtpParameters,\n      //     codec:\n      //       this._webcamProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n      //   })\n      // );\n\n      emitter.emit(\"addProducer\", {\n        id: this._webcamProducer.id,\n        isWebcam: true,\n        deviceLabel: device.label,\n        type: \"webcam\",\n        webcamType: this._getWebcamType(device),\n        paused: this._webcamProducer.paused,\n        track: this._webcamProducer.track,\n        rtpParameters: this._webcamProducer.rtpParameters,\n        codec:\n          this._webcamProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n      });\n\n      this._webcamProducer.on(\"transportclose\", () => {\n        this._webcamProducer = null;\n      });\n\n      this._webcamProducer.on(\"trackended\", () => {\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Webcam disconnected!\",\n        //   })\n        // );\n\n        this.disableWebcam().catch(() => {});\n      });\n    } catch (error) {\n      //logger.error(\"enableWebcam() | failed:%o\", error);\n\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling webcam: ${error}`,\n      //   })\n      // );\n\n      if (track) track.stop();\n    }\n\n    // store.dispatch(stateActions.setWebcamInProgress(false));\n  }\n\n  async disableWebcam() {\n    //logger.debug(\"disableWebcam()\");\n    if (!this._webcamProducer) return;\n\n    this._webcamProducer.close();\n\n    emitter.emit(\"removeProducer\", {\n      type: \"webcam\",\n    });\n\n    // store.dispatch(stateActions.removeProducer(this._webcamProducer.id));\n    // store.dispatch(toggleVideo(false));\n    try {\n      await this._protoo.request(\"closeProducer\", {\n        producerId: this._webcamProducer.id,\n      });\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error closing server-side webcam Producer: ${error}`,\n      //   })\n      // );\n    }\n\n    this._webcamProducer = null;\n  }\n\n  //Pause & resume cam logic\n\n  async pauseVideo() {\n    //logger.debug(\"muteMic()\");\n\n    this._webcamProducer.pause();\n\n    try {\n      await this._protoo.request(\"pauseProducer\", {\n        producerId: this._webcamProducer.id,\n      });\n\n      // store.dispatch(stateActions.setProducerPaused(this._webcamProducer.id));\n      // store.dispatch(toggleVideo(false));\n    } catch (error) {\n      //logger.error(\"muteMic() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error pausing server-side webcam Producer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async resumeVideo() {\n    this._webcamProducer.resume();\n\n    try {\n      await this._protoo.request(\"resumeProducer\", {\n        producerId: this._webcamProducer.id,\n      });\n\n      // store.dispatch(stateActions.setProducerResumed(this._webcamProducer.id));\n      // store.dispatch(toggleVideo(true));\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error resuming server-side webcam Producer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async changeWebcam() {\n    //logger.debug(\"changeWebcam()\");\n\n    // store.dispatch(stateActions.setWebcamInProgress(true));\n\n    try {\n      await this._updateWebcams();\n\n      const array = Array.from(this._webcams.keys());\n      const len = array.length;\n      const deviceId = this._webcam.device\n        ? this._webcam.device.deviceId\n        : undefined;\n      let idx = array.indexOf(deviceId);\n\n      if (idx < len - 1) idx++;\n      else idx = 0;\n\n      this._webcam.device = this._webcams.get(array[idx]);\n\n      //logger.debug(\n      //   \"changeWebcam() | new selected webcam [device:%o]\",\n      //   this._webcam.device\n      // );\n\n      // Reset video resolution to HD.\n      this._webcam.resolution = \"hd\";\n\n      if (!this._webcam.device) throw new Error(\"no webcam devices\");\n\n      // Closing the current video track before asking for a new one (mobiles do not like\n      // having both front/back cameras open at the same time).\n      this._webcamProducer.track.stop();\n\n      //logger.debug(\"changeWebcam() | calling getUserMedia()\");\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: { exact: this._webcam.device.deviceId },\n          ...VIDEO_CONSTRAINS[this._webcam.resolution],\n        },\n      });\n\n      const track = stream.getVideoTracks()[0];\n\n      await this._webcamProducer.replaceTrack({ track });\n\n      // store.dispatch(\n      //   stateActions.setProducerTrack(this._webcamProducer.id, track)\n      // );\n    } catch (error) {\n      emitter.emit(\"error\", `could not change webcam: ${error}`);\n      //logger.error(\"changeWebcam() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Could not change webcam: ${error}`,\n      //   })\n      // );\n    }\n\n    // store.dispatch(stateActions.setWebcamInProgress(false));\n  }\n\n  async changeWebcamResolution() {\n    //logger.debug(\"changeWebcamResolution()\");\n\n    // store.dispatch(stateActions.setWebcamInProgress(true));\n\n    try {\n      switch (this._webcam.resolution) {\n        case \"qvga\":\n          this._webcam.resolution = \"vga\";\n          break;\n        case \"vga\":\n          this._webcam.resolution = \"hd\";\n          break;\n        case \"hd\":\n          this._webcam.resolution = \"qvga\";\n          break;\n        default:\n          this._webcam.resolution = \"hd\";\n      }\n\n      //logger.debug(\"changeWebcamResolution() | calling getUserMedia()\");\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: { exact: this._webcam.device.deviceId },\n          ...VIDEO_CONSTRAINS[this._webcam.resolution],\n        },\n      });\n\n      const track = stream.getVideoTracks()[0];\n\n      await this._webcamProducer.replaceTrack({ track });\n\n      // store.dispatch(\n      //   stateActions.setProducerTrack(this._webcamProducer.id, track)\n      // );\n    } catch (error) {\n      //logger.error(\"changeWebcamResolution() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Could not change webcam resolution: ${error}`,\n      //   })\n      // );\n    }\n\n    // store.dispatch(stateActions.setWebcamInProgress(false));\n  }\n\n  async enableShare() {\n    //logger.debug(\"enableShare()\");\n\n    if (this._shareProducer) return;\n\n    if (!this._mediasoupDevice.canProduce(\"video\")) {\n      //logger.error(\"enableShare() | cannot produce video\");\n\n      return;\n    }\n\n    let track;\n\n    // store.dispatch(stateActions.setShareInProgress(true));\n\n    try {\n      //logger.debug(\"enableShare() | calling getUserMedia()\");\n\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        audio: false,\n        video: {\n          displaySurface: \"monitor\",\n          logicalSurface: true,\n          cursor: true,\n          width: { max: 1920 },\n          height: { max: 1080 },\n          frameRate: { max: 30 },\n        },\n      });\n\n      // May mean cancelled (in some implementations).\n      if (!stream) {\n        // store.dispatch(stateActions.setShareInProgress(true));\n\n        return;\n      }\n\n      track = stream.getVideoTracks()[0];\n\n      let encodings;\n      let codec;\n      const codecOptions = {\n        videoGoogleStartBitrate: 1000,\n      };\n\n      if (this._forceH264) {\n        codec = this._mediasoupDevice.rtpCapabilities.codecs.find(\n          (c) => c.mimeType.toLowerCase() === \"video/h264\"\n        );\n\n        if (!codec) {\n          throw new Error(\"desired H264 codec+configuration is not supported\");\n        }\n      } else if (this._forceVP9) {\n        codec = this._mediasoupDevice.rtpCapabilities.codecs.find(\n          (c) => c.mimeType.toLowerCase() === \"video/vp9\"\n        );\n\n        if (!codec) {\n          throw new Error(\"desired VP9 codec+configuration is not supported\");\n        }\n      }\n\n      if (this._useSharingSimulcast) {\n        // If VP9 is the only available video codec then use SVC.\n        const firstVideoCodec =\n          this._mediasoupDevice.rtpCapabilities.codecs.find(\n            (c) => c.kind === \"video\"\n          );\n\n        if (\n          (this._forceVP9 && codec) ||\n          firstVideoCodec.mimeType.toLowerCase() === \"video/vp9\"\n        ) {\n          encodings = SCREEN_SHARING_SVC_ENCODINGS;\n        } else {\n          encodings = SCREEN_SHARING_SIMULCAST_ENCODINGS.map((encoding) => ({\n            ...encoding,\n            dtx: true,\n          }));\n        }\n      }\n\n      this._shareProducer = await this._sendTransport.produce({\n        track,\n        encodings,\n        codecOptions,\n        codec,\n        appData: {\n          share: true,\n        },\n      });\n\n      // store.dispatch(\n      //   stateActions.addProducer({\n      //     id: this._shareProducer.id,\n      //     type: \"share\",\n      //     paused: this._shareProducer.paused,\n      //     track: this._shareProducer.track,\n      //     rtpParameters: this._shareProducer.rtpParameters,\n      //     codec:\n      //       this._shareProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n      //   })\n      // );\n\n      emitter.emit(\"addProducer\", {\n        id: this._shareProducer.id,\n        type: \"screen\",\n        paused: this._shareProducer.paused,\n        track: this._shareProducer.track,\n        rtpParameters: this._shareProducer.rtpParameters,\n        codec:\n          this._shareProducer.rtpParameters.codecs[0].mimeType.split(\"/\")[1],\n      });\n\n      this._shareProducer.on(\"transportclose\", () => {\n        this._shareProducer = null;\n      });\n\n      this._shareProducer.on(\"trackended\", () => {\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Share disconnected!\",\n        //   })\n        // );\n\n        this.disableShare().catch(() => {});\n      });\n      // store.dispatch(stateActions.setShareInProgress(false));\n      // store.dispatch(toggleScreenShare(true));\n      return true;\n    } catch (error) {\n      //logger.error(\"enableShare() | failed:%o\", error);\n\n      if (error.name !== \"NotAllowedError\") {\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: `Error sharing: ${error}`,\n        //   })\n        // );\n      }\n\n      if (track) track.stop();\n      // store.dispatch(stateActions.setShareInProgress(false));\n      return false;\n    }\n  }\n\n  async disableShare() {\n    //logger.debug(\"disableShare()\");\n\n    if (!this._shareProducer) return;\n\n    this._shareProducer.close();\n\n    // store.dispatch(stateActions.removeProducer(this._shareProducer.id));\n\n    emitter.emit(\"removeProducer\", {\n      type: \"screen\",\n    });\n\n    try {\n      await this._protoo.request(\"closeProducer\", {\n        producerId: this._shareProducer.id,\n      });\n      // store.dispatch(toggleScreenShare(false));\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error closing server-side share Producer: ${error}`,\n      //   })\n      // );\n    }\n\n    this._shareProducer = null;\n  }\n\n  async enableAudioOnly() {\n    //logger.debug(\"enableAudioOnly()\");\n\n    // store.dispatch(stateActions.setAudioOnlyInProgress(true));\n\n    this.disableWebcam();\n\n    for (const consumer of this._consumers.values()) {\n      if (consumer.kind !== \"video\") continue;\n\n      this._pauseConsumer(consumer);\n    }\n    this._setLocalState(\"audioOnly\", true);\n\n    // store.dispatch(stateActions.setAudioOnlyState(true));\n\n    // store.dispatch(stateActions.setAudioOnlyInProgress(false));\n  }\n\n  async disableAudioOnly() {\n    //logger.debug(\"disableAudioOnly()\");\n\n    // store.dispatch(stateActions.setAudioOnlyInProgress(true));\n\n    if (\n      !this._webcamProducer &&\n      this._produce\n      // &&\n      // (cookiesManager.getDevices() || {}).webcamEnabled\n    ) {\n      this.enableWebcam();\n    }\n\n    for (const consumer of this._consumers.values()) {\n      if (consumer.kind !== \"video\") continue;\n\n      this._resumeConsumer(consumer);\n    }\n    this._setLocalState(\"audioOnly\", false);\n\n    // store.dispatch(stateActions.setAudioOnlyState(false));\n\n    // store.dispatch(stateActions.setAudioOnlyInProgress(false));\n  }\n\n  async muteAudio() {\n    //logger.debug(\"muteAudio()\");\n    // store.dispatch(stateActions.setAudioMutedState(true));\n  }\n\n  async unmuteAudio() {\n    //logger.debug(\"unmuteAudio()\");\n    // store.dispatch(stateActions.setAudioMutedState(false));\n  }\n\n  async restartIce() {\n    //logger.debug(\"restartIce()\");\n\n    // store.dispatch(stateActions.setRestartIceInProgress(true));\n\n    try {\n      if (this._sendTransport) {\n        const iceParameters = await this._protoo.request(\"restartIce\", {\n          transportId: this._sendTransport.id,\n        });\n\n        await this._sendTransport.restartIce({ iceParameters });\n      }\n\n      if (this._recvTransport) {\n        const iceParameters = await this._protoo.request(\"restartIce\", {\n          transportId: this._recvTransport.id,\n        });\n\n        await this._recvTransport.restartIce({ iceParameters });\n      }\n\n      // store.dispatch(\n      //   requestActions.notify({\n      //     text: \"ICE restarted\",\n      //   })\n      // );\n    } catch (error) {\n      //logger.error(\"restartIce() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `ICE restart failed: ${error}`,\n      //   })\n      // );\n    }\n\n    // store.dispatch(stateActions.setRestartIceInProgress(false));\n  }\n\n  async setMaxSendingSpatialLayer(spatialLayer) {\n    //logger.debug(\"setMaxSendingSpatialLayer() [spatialLayer:%s]\", spatialLayer);\n\n    try {\n      if (this._webcamProducer)\n        await this._webcamProducer.setMaxSpatialLayer(spatialLayer);\n      else if (this._shareProducer)\n        await this._shareProducer.setMaxSpatialLayer(spatialLayer);\n    } catch (error) {\n      //logger.error(\"setMaxSendingSpatialLayer() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error setting max sending video spatial layer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async setConsumerPreferredLayers(consumerId, spatialLayer, temporalLayer) {\n    //logger.debug(\n    //   \"setConsumerPreferredLayers() [consumerId:%s, spatialLayer:%s, temporalLayer:%s]\",\n    //   consumerId,\n    //   spatialLayer,\n    //   temporalLayer\n    // );\n\n    try {\n      await this._protoo.request(\"setConsumerPreferredLayers\", {\n        consumerId,\n        spatialLayer,\n        temporalLayer,\n      });\n\n      // store.dispatch(\n      //   stateActions.setConsumerPreferredLayers(\n      //     consumerId,\n      //     spatialLayer,\n      //     temporalLayer\n      //   )\n      // );\n    } catch (error) {\n      //logger.error(\"setConsumerPreferredLayers() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error setting Consumer preferred layers: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async setConsumerPriority(consumerId, priority) {\n    //logger.debug(\n    //   \"setConsumerPriority() [consumerId:%s, priority:%d]\",\n    //   consumerId,\n    //   priority\n    // );\n\n    try {\n      await this._protoo.request(\"setConsumerPriority\", {\n        consumerId,\n        priority,\n      });\n\n      // store.dispatch(stateActions.setConsumerPriority(consumerId, priority));\n    } catch (error) {\n      //logger.error(\"setConsumerPriority() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error setting Consumer priority: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async requestConsumerKeyFrame(consumerId) {\n    //logger.debug(\"requestConsumerKeyFrame() [consumerId:%s]\", consumerId);\n\n    try {\n      await this._protoo.request(\"requestConsumerKeyFrame\", { consumerId });\n\n      // store.dispatch(\n      //   requestActions.notify({\n      //     text: \"Keyframe requested for video consumer\",\n      //   })\n      // );\n    } catch (error) {\n      //logger.error(\"requestConsumerKeyFrame() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error requesting key frame for Consumer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  //custom data producer made by @danisharora099\n  async enableRaiseHandDataProducer() {\n    if (this._raiseHandDataProducer) return;\n    try {\n      this._raiseHandDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"raise-hand\",\n        priority: \"medium\",\n        appData: { info: \"my-raise-hand-DataProducer\" },\n      });\n\n      // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._raiseHandDataProducer.id,\n      //     sctpStreamParameters:\n      //       this._raiseHandDataProducer.sctpStreamParameters,\n      //     label: this._raiseHandDataProducer.label,\n      //     protocol: this._raiseHandDataProducer.protocol,\n      //   })\n      // );\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling  DataProducer: ${error}`,\n      //   })\n      // );\n\n      throw error;\n    }\n  }\n\n  //custom data producer made by @danisharora099\n  async enableReactionsDataProducer() {\n    if (this._reactionsDataProducer) return;\n    try {\n      this._reactionsDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"reactions\",\n        priority: \"medium\",\n        appData: { info: \"my-reactions-DataProducer\" },\n      });\n\n      // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._reactionsDataProducer.id,\n      //     sctpStreamParameters:\n      //       this._reactionsDataProducer.sctpStreamParameters,\n      //     label: this._reactionsDataProducer.label,\n      //     protocol: this._reactionsDataProducer.protocol,\n      //   })\n      // );\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling  DataProducer: ${error}`,\n      //   })\n      // );\n\n      throw error;\n    }\n  }\n\n  //Miro\n  //custom data producer made by @Akshit1311\n  async enableMiroDataProducer() {\n    if (this._miroDataProducer) return;\n    try {\n      this._miroDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"miro\",\n        priority: \"medium\",\n        appData: { info: \"miro-DataProducer\" },\n      });\n\n      // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._miroDataProducer.id,\n      //     sctpStreamParameters: this._miroDataProducer.sctpStreamParameters,\n      //     label: this._miroDataProducer.label,\n      //     protocol: this._miroDataProducer.protocol,\n      //   })\n      // );\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling  DataProducer: ${error}`,\n      //   })\n      // );\n\n      throw error;\n    }\n  }\n\n  //custom data producer made by @danisharora099\n  async enableMiscDataProducer() {\n    if (!this._useDataChannel) return;\n\n    try {\n      this._miscDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"misc\",\n        priority: \"medium\",\n        appData: { info: \"my-misc-DataProducer\" },\n      });\n\n      // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._miscDataProducer.id,\n      //     sctpStreamParameters: this._miscDataProducer.sctpStreamParameters,\n      //     label: this._miscDataProducer.label,\n      //     protocol: this._miscDataProducer.protocol,\n      //   })\n      // );\n    } catch (error) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling  DataProducer: ${error}`,\n      //   })\n      // );\n\n      throw error;\n    }\n  }\n\n  async enableChatDataProducer() {\n    //logger.debug(\"enableChatDataProducer()\");\n\n    if (!this._useDataChannel) return;\n\n    // NOTE: Should enable this code but it's useful for testing.\n    // if (this._chatDataProducer)\n    // \treturn;\n\n    try {\n      // Create chat DataProducer.\n      this._chatDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxRetransmits: 1,\n        label: \"chat\",\n        priority: \"medium\",\n        appData: { info: \"my-chat-DataProducer\" },\n      });\n\n      // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._chatDataProducer.id,\n      //     sctpStreamParameters: this._chatDataProducer.sctpStreamParameters,\n      //     label: this._chatDataProducer.label,\n      //     protocol: this._chatDataProducer.protocol,\n      //   })\n      // );\n\n      this._chatDataProducer.on(\"transportclose\", () => {\n        this._chatDataProducer = null;\n      });\n\n      this._chatDataProducer.on(\"open\", () => {\n        //logger.debug('chat DataProducer \"open\" event');\n      });\n\n      this._chatDataProducer.on(\"close\", () => {\n        //logger.error('chat DataProducer \"close\" event');\n\n        this._chatDataProducer = null;\n\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Chat DataProducer closed\",\n        //   })\n        // );\n      });\n\n      this._chatDataProducer.on(\"error\", (error) => {\n        //logger.error('chat DataProducer \"error\" event:%o', error);\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: `Chat DataProducer error: ${error}`,\n        //   })\n        // );\n      });\n\n      this._chatDataProducer.on(\"bufferedamountlow\", () => {\n        //logger.debug('chat DataProducer \"bufferedamountlow\" event');\n      });\n    } catch (error) {\n      //logger.error(\"enableChatDataProducer() | failed:%o\", error);\n\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling chat DataProducer: ${error}`,\n      //   })\n      // );\n\n      throw error;\n    }\n  }\n\n  async enableBotDataProducer() {\n    //logger.debug(\"enableBotDataProducer()\");\n\n    if (!this._useDataChannel) return;\n\n    // NOTE: Should enable this code but it's useful for testing.\n    // if (this._botDataProducer)\n    // \treturn;\n\n    try {\n      // Create chat DataProducer.\n      this._botDataProducer = await this._sendTransport.produceData({\n        ordered: false,\n        maxPacketLifeTime: 2000,\n        label: \"bot\",\n        priority: \"medium\",\n        appData: { info: \"my-bot-DataProducer\" },\n      });\n\n      // store.dispatch(\n      //   stateActions.addDataProducer({\n      //     id: this._botDataProducer.id,\n      //     sctpStreamParameters: this._botDataProducer.sctpStreamParameters,\n      //     label: this._botDataProducer.label,\n      //     protocol: this._botDataProducer.protocol,\n      //   })\n      // );\n\n      this._botDataProducer.on(\"transportclose\", () => {\n        this._botDataProducer = null;\n      });\n\n      this._botDataProducer.on(\"open\", () => {\n        //logger.debug('bot DataProducer \"open\" event');\n      });\n\n      this._botDataProducer.on(\"close\", () => {\n        //logger.error('bot DataProducer \"close\" event');\n\n        this._botDataProducer = null;\n\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: \"Bot DataProducer closed\",\n        //   })\n        // );\n      });\n\n      this._botDataProducer.on(\"error\", (error) => {\n        //logger.error('bot DataProducer \"error\" event:%o', error);\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: `Bot DataProducer error: ${error}`,\n        //   })\n        // );\n      });\n\n      this._botDataProducer.on(\"bufferedamountlow\", () => {\n        //logger.debug('bot DataProducer \"bufferedamountlow\" event');\n      });\n    } catch (error) {\n      //logger.error(\"enableBotDataProducer() | failed:%o\", error);\n\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error enabling bot DataProducer: ${error}`,\n      //   })\n      // );\n\n      throw error;\n    }\n  }\n\n  //takes true/false BUT in string (\"true\"/\"false\")\n  async raiseHand(booleanInString) {\n    if (!this._raiseHandDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No misc DataProducer\",\n      //   })\n      // );\n\n      return;\n    }\n\n    try {\n      this._raiseHandDataProducer.send(booleanInString);\n    } catch (error) {\n      //logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `raise-hand DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async sendReaction(reaction) {\n    if (![\"😂\", \"😢\", \"💯\", \"🚀\", \"👍\", \"👎\"].includes(reaction)) return;\n\n    if (!this._reactionsDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No reactions DataProducer\",\n      //   })\n      // );\n\n      return;\n    }\n\n    try {\n      this._reactionsDataProducer.send(reaction);\n      // store.dispatch(stateActions.setMeReaction(reaction));\n      setTimeout(() => {\n        // store.dispatch(stateActions.setMeReaction(null));\n      }, 5000);\n    } catch (error) {\n      //logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `reactions DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  //Miro\n  async sendMiro(boardId) {\n    if (!this._miroDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No miro DataProducer\",\n      //   })\n      // );\n\n      return;\n    }\n\n    try {\n      this._miroDataProducer.send(boardId);\n    } catch (error) {\n      //logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `miro DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async sendMiscMessages(text) {\n    if (!this._miscDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No misc DataProducer\",\n      //   })\n      // );\n\n      return;\n    }\n\n    try {\n      this._miscDataProducer.send(text);\n    } catch (error) {\n      //logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `misc DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async sendChatMessage(text) {\n    //logger.debug('sendChatMessage() [text:\"%s]', text);\n\n    if (!this._chatDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No chat DataProducer\",\n      //   })\n      // );\n\n      return;\n    }\n\n    try {\n      this._chatDataProducer.send(text);\n    } catch (error) {\n      //logger.error(\"chat DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `chat DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async sendBotMessage(text) {\n    //logger.debug('sendBotMessage() [text:\"%s]', text);\n\n    if (!this._botDataProducer) {\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: \"No bot DataProducer\",\n      //   })\n      // );\n\n      return;\n    }\n\n    try {\n      this._botDataProducer.send(text);\n    } catch (error) {\n      //logger.error(\"bot DataProducer.send() failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `bot DataProducer.send() failed: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  //host only function\n  //peerIdOrIds is an array of one or more peerIds\n  async disablePeerProducer(producerType, peerIdOrIds) {\n    try {\n      const status = await this._protoo.request(\"disablePeerProducer\", {\n        producerType,\n        peerIdOrIds,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async kickPeerFromRoom(peerIdToKick) {\n    try {\n      await this._protoo.request(\"kickPeerFromRoom\", { peerIdToKick });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async closeRoomForAll() {\n    try {\n      await this._protoo.request(\"closeRoomForEverybody\");\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async makeACoHost(peerId) {\n    try {\n      await this._protoo.request(\"makeACoHost\", { peerId });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async startRecording() {\n    if (window.location.href.search(\"localhost\") !== -1) {\n      throw new Error(\n        \"Recordings are only available in production settings so that our recorder can reach your URL\"\n      );\n    }\n    try {\n      await this._protoo.request(\"startRecording\");\n      return true;\n    } catch (error) {\n      throw new Error(\"error while starting recording - \", error);\n    }\n  }\n\n  async stopRecording() {\n    if (window.location.href.search(\"localhost\") !== -1) {\n      throw new Error(\n        \"Recordings are only available in production settings so that our recorder can reach your URL\"\n      );\n    }\n    try {\n      await this._protoo.request(\"stopRecording\");\n      return true;\n    } catch (e) {\n      throw new Error(\"error while stopping recording - \", e);\n    }\n  }\n\n  async emailRecordingUrl(to, url) {\n    try {\n      await this._protoo.request(\"emailRecordingUrl\", { to, url });\n    } catch (e) {\n      throw new Error(\"error while stopping recording - \", e);\n    }\n  }\n\n  async toggleRoomLock(_bool) {\n    try {\n      await this._protoo.request(\"toggleRoomLock\", { state: _bool });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async changeDisplayName(displayName) {\n    //logger.debug('changeDisplayName() [displayName:\"%s\"]', displayName);\n\n    // //store in cookie.\n    // cookiesManager.setUser({ displayName });\n\n    try {\n      await this._protoo.request(\"changeDisplayName\", { displayName });\n\n      this._displayName = displayName;\n\n      // store.dispatch(stateActions.setDisplayName(displayName));\n\n      // store.dispatch(\n      //   requestActions.notify({\n      //     text: \"Display name changed\",\n      //   })\n      // );\n    } catch (error) {\n      //logger.error(\"changeDisplayName() | failed: %o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Could not change display name: ${error}`,\n      //   })\n      // );\n      // We need to refresh the component for it to render the previous\n      // displayName again.\n      // store.dispatch(stateActions.setDisplayName());\n    }\n  }\n\n  async getSendTransportRemoteStats() {\n    //logger.debug(\"getSendTransportRemoteStats()\");\n\n    if (!this._sendTransport) return;\n\n    return this._protoo.request(\"getTransportStats\", {\n      transportId: this._sendTransport.id,\n    });\n  }\n\n  async getRecvTransportRemoteStats() {\n    //logger.debug(\"getRecvTransportRemoteStats()\");\n\n    if (!this._recvTransport) return;\n\n    return this._protoo.request(\"getTransportStats\", {\n      transportId: this._recvTransport.id,\n    });\n  }\n\n  async getAudioRemoteStats() {\n    //logger.debug(\"getAudioRemoteStats()\");\n\n    if (!this._micProducer) return;\n\n    return this._protoo.request(\"getProducerStats\", {\n      producerId: this._micProducer.id,\n    });\n  }\n\n  async getVideoRemoteStats() {\n    //logger.debug(\"getVideoRemoteStats()\");\n\n    const producer = this._webcamProducer || this._shareProducer;\n\n    if (!producer) return;\n\n    return this._protoo.request(\"getProducerStats\", {\n      producerId: producer.id,\n    });\n  }\n\n  async getConsumerRemoteStats(consumerId) {\n    //logger.debug(\"getConsumerRemoteStats()\");\n\n    const consumer = this._consumers.get(consumerId);\n\n    if (!consumer) return;\n\n    return this._protoo.request(\"getConsumerStats\", { consumerId });\n  }\n\n  async getChatDataProducerRemoteStats() {\n    //logger.debug(\"getChatDataProducerRemoteStats()\");\n\n    const dataProducer = this._chatDataProducer;\n\n    if (!dataProducer) return;\n\n    return this._protoo.request(\"getDataProducerStats\", {\n      dataProducerId: dataProducer.id,\n    });\n  }\n\n  async getBotDataProducerRemoteStats() {\n    //logger.debug(\"getBotDataProducerRemoteStats()\");\n\n    const dataProducer = this._botDataProducer;\n\n    if (!dataProducer) return;\n\n    return this._protoo.request(\"getDataProducerStats\", {\n      dataProducerId: dataProducer.id,\n    });\n  }\n\n  async getDataConsumerRemoteStats(dataConsumerId) {\n    //logger.debug(\"getDataConsumerRemoteStats()\");\n\n    const dataConsumer = this._dataConsumers.get(dataConsumerId);\n\n    if (!dataConsumer) return;\n\n    return this._protoo.request(\"getDataConsumerStats\", { dataConsumerId });\n  }\n\n  async getSendTransportLocalStats() {\n    //logger.debug(\"getSendTransportLocalStats()\");\n\n    if (!this._sendTransport) return;\n\n    return this._sendTransport.getStats();\n  }\n\n  async getRecvTransportLocalStats() {\n    //logger.debug(\"getRecvTransportLocalStats()\");\n\n    if (!this._recvTransport) return;\n\n    return this._recvTransport.getStats();\n  }\n\n  async getAudioLocalStats() {\n    //logger.debug(\"getAudioLocalStats()\");\n\n    if (!this._micProducer) return;\n\n    return this._micProducer.getStats();\n  }\n\n  async getVideoLocalStats() {\n    //logger.debug(\"getVideoLocalStats()\");\n\n    const producer = this._webcamProducer || this._shareProducer;\n\n    if (!producer) return;\n\n    return producer.getStats();\n  }\n\n  async getConsumerLocalStats(consumerId) {\n    const consumer = this._consumers.get(consumerId);\n\n    if (!consumer) return;\n\n    return consumer.getStats();\n  }\n\n  async applyNetworkThrottle({ uplink, downlink, rtt, secret }) {\n    //logger.debug(\n    //   \"applyNetworkThrottle() [uplink:%s, downlink:%s, rtt:%s]\",\n    //   uplink,\n    //   downlink,\n    //   rtt\n    // );\n\n    try {\n      await this._protoo.request(\"applyNetworkThrottle\", {\n        uplink,\n        downlink,\n        rtt,\n        secret,\n      });\n    } catch (error) {\n      //logger.error(\"applyNetworkThrottle() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error applying network throttle: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async resetNetworkThrottle({ silent = false, secret }) {\n    //logger.debug(\"resetNetworkThrottle()\");\n\n    try {\n      await this._protoo.request(\"resetNetworkThrottle\", { secret });\n    } catch (error) {\n      if (!silent) {\n        //logger.error(\"resetNetworkThrottle() | failed:%o\", error);\n        // store.dispatch(\n        //   requestActions.notify({\n        //     type: \"error\",\n        //     text: `Error resetting network throttle: ${error}`,\n        //   })\n        // );\n      }\n    }\n  }\n\n  async _joinRoom() {\n    //logger.debug(\"_joinRoom()\");\n\n    try {\n      this._mediasoupDevice = new mediasoupClient.Device({\n        handlerName: this._handlerName,\n      });\n\n      const routerRtpCapabilities = await this._protoo.request(\n        \"getRouterRtpCapabilities\"\n      );\n\n      // console.log(this._mediasoupDevice.loaded());\n      await this._mediasoupDevice.load({ routerRtpCapabilities });\n\n      // NOTE: Stuff to play remote audios due to browsers' new autoplay policy.\n      //\n      // Just get access to the mic and DO NOT close the mic track for a while.\n      // Super hack!\n      if (!this._isBot) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n        const audioTrack = stream.getAudioTracks()[0];\n\n        audioTrack.enabled = false;\n\n        setTimeout(() => audioTrack.stop(), 120000);\n      }\n      // Create mediasoup Transport for sending (unless we don't want to produce).\n      if (this._produce) {\n        const transportInfo = await this._protoo.request(\n          \"createWebRtcTransport\",\n          {\n            forceTcp: this._forceTcp,\n            producing: true,\n            consuming: false,\n            sctpCapabilities: this._useDataChannel\n              ? this._mediasoupDevice.sctpCapabilities\n              : undefined,\n          }\n        );\n\n        const {\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n        } = transportInfo;\n\n        this._sendTransport = this._mediasoupDevice.createSendTransport({\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          iceServers: [],\n          proprietaryConstraints: PC_PROPRIETARY_CONSTRAINTS,\n        });\n\n        this._sendTransport.on(\n          \"connect\",\n          (\n            { dtlsParameters },\n            callback,\n            errback // eslint-disable-line no-shadow\n          ) => {\n            this._protoo\n              .request(\"connectWebRtcTransport\", {\n                transportId: this._sendTransport.id,\n                dtlsParameters,\n              })\n              .then(callback)\n              .catch(errback);\n          }\n        );\n\n        this._sendTransport.on(\n          \"produce\",\n          async ({ kind, rtpParameters, appData }, callback, errback) => {\n            try {\n              // eslint-disable-next-line no-shadow\n              const { id } = await this._protoo.request(\"produce\", {\n                transportId: this._sendTransport.id,\n                kind,\n                rtpParameters,\n                appData,\n              });\n\n              callback({ id });\n            } catch (error) {\n              errback(error);\n            }\n          }\n        );\n\n        this._sendTransport.on(\n          \"producedata\",\n          async (\n            { sctpStreamParameters, label, protocol, appData },\n            callback,\n            errback\n          ) => {\n            //logger.debug(\n            //   '\"producedata\" event: [sctpStreamParameters:%o, appData:%o]',\n            //   sctpStreamParameters,\n            //   appData\n            // );\n\n            try {\n              // eslint-disable-next-line no-shadow\n              const { id } = await this._protoo.request(\"produceData\", {\n                transportId: this._sendTransport.id,\n                sctpStreamParameters,\n                label,\n                protocol,\n                appData,\n              });\n\n              callback({ id });\n            } catch (error) {\n              errback(error);\n            }\n          }\n        );\n      }\n\n      // Create mediasoup Transport for sending (unless we don't want to consume).\n      if (this._consume) {\n        const transportInfo = await this._protoo.request(\n          \"createWebRtcTransport\",\n          {\n            forceTcp: this._forceTcp,\n            producing: false,\n            consuming: true,\n            sctpCapabilities: this._useDataChannel\n              ? this._mediasoupDevice.sctpCapabilities\n              : undefined,\n          }\n        );\n\n        const {\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n        } = transportInfo;\n\n        this._recvTransport = this._mediasoupDevice.createRecvTransport({\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          iceServers: [],\n        });\n\n        this._recvTransport.on(\n          \"connect\",\n          (\n            { dtlsParameters },\n            callback,\n            errback // eslint-disable-line no-shadow\n          ) => {\n            this._protoo\n              .request(\"connectWebRtcTransport\", {\n                transportId: this._recvTransport.id,\n                dtlsParameters,\n              })\n              .then(callback)\n              .catch(errback);\n          }\n        );\n      }\n\n      // Join now into the room.\n      // NOTE: Don't send our RTP capabilities if we don't want to consume.\n      //custom by @danisharora099 to handle host logic\n      const {\n        lobbyPeers,\n        peers,\n        hostId,\n        coHostIds,\n        isRoomLocked,\n        isRecording,\n      } = await this._protoo.request(\"join\", {\n        displayName: this._displayName,\n        device: this._device,\n        rtpCapabilities: this._consume\n          ? this._mediasoupDevice.rtpCapabilities\n          : undefined,\n        sctpCapabilities:\n          this._useDataChannel && this._consume\n            ? this._mediasoupDevice.sctpCapabilities\n            : undefined,\n      });\n      //TODO: dispatch recording status to redux\n      // store.dispatch(stateActions.setRoomLock(isRoomLocked));\n      // store.dispatch(stateActions.setRoomHost(hostId));\n      // store.dispatch(stateActions.updateCoHosts(coHostIds));\n\n      // store.dispatch(stateActions.setRoomState(\"connected\"));\n\n      // Clean all the existing notifcations.\n      // store.dispatch(stateActions.removeAllNotifications());\n\n      // store.dispatch(\n      //   requestActions.notify({\n      //     title: \"are in the room!\",\n      //     text: \"You are in the room!\",\n      //     displayName: \"You\",\n      //     timeout: 3000,\n      //   })\n      // );\n\n      for (const peer of peers) {\n        // store.dispatch(\n        //   stateActions.addPeer({\n        //     ...peer,\n        //     consumers: [],\n        //     dataConsumers: [],\n        //     messages: [],\n        //     unreadMsgs: 0,\n        //   })\n        // );\n        emitter.emit(\"addPeer\", {\n          ...peer,\n          consumers: [],\n          dataConsumers: [],\n          messages: [],\n          unreadMsgs: 0,\n        });\n      }\n\n      // Enable mic/webcam.\n      if (this._produce) {\n        // Set our media capabilities.\n        // store.dispatch(\n        //   stateActions.setMediaCapabilities({\n        //     canSendMic: this._mediasoupDevice.canProduce(\"audio\"),\n        //     canSendWebcam: this._mediasoupDevice.canProduce(\"video\"),\n        //   })\n        // );\n\n        // this.enableMic();\n\n        // const devicesCookie = cookiesManager.getDevices();\n\n        if (\n          // !devicesCookie ||\n          // devicesCookie.webcamEnabled ||\n          this._externalVideo\n        )\n          // this.enableWebcam();\n\n          this._sendTransport.on(\"connectionstatechange\", (connectionState) => {\n            //we are now manually turning on the data producers in RoomContainer.js\n            // if (connectionState === \"connected\") {\n            //   this.enableChatDataProducer();\n            //   this.enableBotDataProducer();\n            // }\n          });\n      }\n\n      // NOTE: For testing.\n      // if (window.SHOW_INFO) {\n      //   const { me } = //store.getState();\n      //   store.dispatch(stateActions.setRoomStatsPeerId(me.id));\n      // }\n    } catch (error) {\n      //logger.error(\"_joinRoom() failed:%o\", error);\n\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Could not join the room: ${error}`,\n      //   })\n      // );\n\n      this.close();\n    }\n  }\n\n  async _updateWebcams() {\n    //logger.debug(\"_updateWebcams()\");\n\n    // Reset the list.\n    this._webcams = new Map();\n\n    //logger.debug(\"_updateWebcams() | calling enumerateDevices()\");\n\n    const devices = await navigator.mediaDevices.enumerateDevices();\n\n    for (const device of devices) {\n      if (device.kind !== \"videoinput\") continue;\n\n      this._webcams.set(device.deviceId, device);\n    }\n\n    const array = Array.from(this._webcams.values());\n    const len = array.length;\n    const currentWebcamId = this._webcam.device\n      ? this._webcam.device.deviceId\n      : undefined;\n\n    //logger.debug(\"_updateWebcams() [webcams:%o]\", array);\n\n    if (len === 0) this._webcam.device = null;\n    else if (!this._webcams.has(currentWebcamId))\n      this._webcam.device = array[0];\n\n    // store.dispatch(stateActions.setCanChangeWebcam(this._webcams.size > 1));\n  }\n\n  _getWebcamType(device) {\n    if (/(back|rear)/i.test(device.label)) {\n      //logger.debug(\"_getWebcamType() | it seems to be a back camera\");\n\n      return \"back\";\n    } else {\n      //logger.debug(\"_getWebcamType() | it seems to be a front camera\");\n\n      return \"front\";\n    }\n  }\n\n  async _pauseConsumer(consumer) {\n    if (consumer.paused) return;\n\n    try {\n      await this._protoo.request(\"pauseConsumer\", { consumerId: consumer.id });\n\n      consumer.pause();\n\n      // store.dispatch(stateActions.setConsumerPaused(consumer.id, \"local\"));\n    } catch (error) {\n      //logger.error(\"_pauseConsumer() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error pausing Consumer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async _resumeConsumer(consumer) {\n    if (!consumer.paused) return;\n\n    try {\n      await this._protoo.request(\"resumeConsumer\", { consumerId: consumer.id });\n\n      consumer.resume();\n\n      // store.dispatch(stateActions.setConsumerResumed(consumer.id, \"local\"));\n    } catch (error) {\n      //logger.error(\"_resumeConsumer() | failed:%o\", error);\n      // store.dispatch(\n      //   requestActions.notify({\n      //     type: \"error\",\n      //     text: `Error resuming Consumer: ${error}`,\n      //   })\n      // );\n    }\n  }\n\n  async _getExternalVideoStream() {\n    if (this._externalVideoStream) return this._externalVideoStream;\n\n    if (this._externalVideo.readyState < 3) {\n      await new Promise((resolve) =>\n        this._externalVideo.addEventListener(\"canplay\", resolve)\n      );\n    }\n\n    if (this._externalVideo.captureStream)\n      this._externalVideoStream = this._externalVideo.captureStream();\n    else if (this._externalVideo.mozCaptureStream)\n      this._externalVideoStream = this._externalVideo.mozCaptureStream();\n    else throw new Error(\"video.captureStream() not supported\");\n\n    return this._externalVideoStream;\n  }\n}\n\nexport { emitter };\n"]},"metadata":{},"sourceType":"module"}