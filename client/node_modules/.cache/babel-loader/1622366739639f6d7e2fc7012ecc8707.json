{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateBnbTx = exports.decodeBnbTx = exports.encodeBnbTx = void 0;\n\nconst bnbSdk = __importStar(require(\"bnb-javascript-sdk-nobroadcast\"));\n\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\n\nconst tiny_secp256k1_1 = __importDefault(require(\"tiny-secp256k1\"));\n\nfunction encodeBnbTx(unsignedTx, publicKey, signature) {\n  const {\n    account_number,\n    chain_id,\n    sequence,\n    source\n  } = unsignedTx;\n  const msg = unsignedTx.msgs[0];\n\n  const amountToInt = x => Number(x);\n\n  const msgNormalizer = x => ({\n    address: bnbSdk.crypto.decodeAddress(x.address),\n    coins: x.coins.map(y => ({\n      // In particular, these keys are backwards because we can't have nice things.\n      denom: y.denom,\n      amount: amountToInt(y.amount)\n    }))\n  });\n\n  const baseMsg = {\n    inputs: msg.inputs.map(msgNormalizer),\n    outputs: msg.outputs.map(msgNormalizer),\n    aminoPrefix: \"2A2C87FA\"\n  };\n  const tx = new bnbSdk.Transaction(Object.assign({}, unsignedTx, {\n    chainId: chain_id,\n    accountNumber: Number(account_number),\n    source: Number(source !== null && source !== void 0 ? source : 0),\n    sequence: Number(sequence),\n    // A bug in the binance SDK makes this field required, even though it shouldn't be.\n    baseMsg: {\n      getMsg: () => baseMsg,\n      getBaseMsg: () => baseMsg,\n      getSignMsg: () => baseMsg\n    }\n  }));\n  const ecPubKey = bnbSdk.crypto.getPublicKey(Buffer.from(publicKey).toString(\"hex\"));\n  tx.addSignature(ecPubKey, signature);\n  const serializedTx = Buffer.from(tx.serialize(), \"hex\");\n  if (!validateBnbTx(serializedTx, chain_id)) throw new Error(\"serialized tx did not validate\");\n  return serializedTx;\n}\n\nexports.encodeBnbTx = encodeBnbTx;\n\nfunction decodeBnbTx(txBytes, chainId) {\n  const txDecoded = bnbSdk.amino.decoder.unMarshalBinaryLengthPrefixed(txBytes, {\n    aminoPrefix: \"f0625dee\",\n    msgs: [{\n      aminoPrefix: \"2a2c87fa\",\n      inputs: [{\n        address: Buffer.alloc(0),\n        coins: [{\n          denom: \"\",\n          amount: 0\n        }]\n      }],\n      outputs: [{\n        address: Buffer.alloc(0),\n        coins: [{\n          denom: \"\",\n          amount: 0\n        }]\n      }]\n    }],\n    signatures: [{\n      pubKey: Buffer.alloc(0),\n      signature: Buffer.alloc(0),\n      accountNumber: 0,\n      sequence: 0\n    }],\n    memo: \"\",\n    source: 0,\n    data: Buffer.alloc(0)\n  }).val;\n  if (txDecoded.data !== null) throw new Error(\"bad data length\");\n  if (txDecoded.msgs.length !== 1) throw new Error(\"bad msgs length\");\n  if (txDecoded.signatures.length !== 1) throw new Error(\"bad signatures length\");\n  const signBytes = JSON.stringify({\n    account_number: String(txDecoded.signatures[0].accountNumber),\n    chain_id: chainId,\n    data: null,\n    memo: txDecoded.memo,\n    msgs: [{\n      inputs: txDecoded.msgs[0].inputs.map(x => ({\n        address: bnbSdk.crypto.encodeAddress(x.address, \"bnb\"),\n        coins: x.coins.map(y => ({\n          amount: Number(y.amount),\n          denom: y.denom\n        }))\n      })),\n      outputs: txDecoded.msgs[0].outputs.map(x => ({\n        address: bnbSdk.crypto.encodeAddress(x.address, \"bnb\"),\n        coins: x.coins.map(y => ({\n          amount: Number(y.amount),\n          denom: y.denom\n        }))\n      }))\n    }],\n    sequence: String(txDecoded.signatures[0].sequence),\n    source: String(txDecoded.source)\n  });\n  const signBytesHash = crypto_js_1.default.SHA256(crypto_js_1.default.enc.Utf8.parse(signBytes)).toString();\n  const pubKeyAmino = Buffer.from(txDecoded.signatures[0].pubKey);\n  if (pubKeyAmino.readUInt32BE(0) !== 0xeb5ae987) throw new Error(\"bad pubkey aminoPrefix\");\n  if (pubKeyAmino.readUInt8(4) !== 33) throw new Error(\"bad pubKey length\");\n  const pubKey = pubKeyAmino.slice(5);\n  const signature = txDecoded.signatures[0].signature;\n  return {\n    signBytes,\n    signBytesHash,\n    pubKey,\n    signature\n  };\n}\n\nexports.decodeBnbTx = decodeBnbTx;\n\nfunction validateBnbTx(txBytes, chainId) {\n  const {\n    signBytesHash,\n    pubKey,\n    signature\n  } = decodeBnbTx(txBytes, chainId);\n  return tiny_secp256k1_1.default.verify(Buffer.from(signBytesHash, \"hex\"), pubKey, signature);\n}\n\nexports.validateBnbTx = validateBnbTx;","map":{"version":3,"sources":["../src/bnbencoding.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateBnbTx = exports.decodeBnbTx = exports.encodeBnbTx = void 0;\nconst bnbSdk = __importStar(require(\"bnb-javascript-sdk-nobroadcast\"));\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\nconst tiny_secp256k1_1 = __importDefault(require(\"tiny-secp256k1\"));\nfunction encodeBnbTx(unsignedTx, publicKey, signature) {\n    const { account_number, chain_id, sequence, source } = unsignedTx;\n    const msg = unsignedTx.msgs[0];\n    const amountToInt = (x) => Number(x);\n    const msgNormalizer = (x) => ({\n        address: bnbSdk.crypto.decodeAddress(x.address),\n        coins: x.coins.map((y) => ({\n            // In particular, these keys are backwards because we can't have nice things.\n            denom: y.denom,\n            amount: amountToInt(y.amount),\n        })),\n    });\n    const baseMsg = {\n        inputs: msg.inputs.map(msgNormalizer),\n        outputs: msg.outputs.map(msgNormalizer),\n        aminoPrefix: \"2A2C87FA\",\n    };\n    const tx = new bnbSdk.Transaction(Object.assign({}, unsignedTx, {\n        chainId: chain_id,\n        accountNumber: Number(account_number),\n        source: Number(source !== null && source !== void 0 ? source : 0),\n        sequence: Number(sequence),\n        // A bug in the binance SDK makes this field required, even though it shouldn't be.\n        baseMsg: { getMsg: () => baseMsg, getBaseMsg: () => baseMsg, getSignMsg: () => baseMsg },\n    }));\n    const ecPubKey = bnbSdk.crypto.getPublicKey(Buffer.from(publicKey).toString(\"hex\"));\n    tx.addSignature(ecPubKey, signature);\n    const serializedTx = Buffer.from(tx.serialize(), \"hex\");\n    if (!validateBnbTx(serializedTx, chain_id))\n        throw new Error(\"serialized tx did not validate\");\n    return serializedTx;\n}\nexports.encodeBnbTx = encodeBnbTx;\nfunction decodeBnbTx(txBytes, chainId) {\n    const txDecoded = bnbSdk.amino.decoder.unMarshalBinaryLengthPrefixed(txBytes, {\n        aminoPrefix: \"f0625dee\",\n        msgs: [\n            {\n                aminoPrefix: \"2a2c87fa\",\n                inputs: [{ address: Buffer.alloc(0), coins: [{ denom: \"\", amount: 0 }] }],\n                outputs: [{ address: Buffer.alloc(0), coins: [{ denom: \"\", amount: 0 }] }],\n            },\n        ],\n        signatures: [\n            {\n                pubKey: Buffer.alloc(0),\n                signature: Buffer.alloc(0),\n                accountNumber: 0,\n                sequence: 0,\n            },\n        ],\n        memo: \"\",\n        source: 0,\n        data: Buffer.alloc(0),\n    }).val;\n    if (txDecoded.data !== null)\n        throw new Error(\"bad data length\");\n    if (txDecoded.msgs.length !== 1)\n        throw new Error(\"bad msgs length\");\n    if (txDecoded.signatures.length !== 1)\n        throw new Error(\"bad signatures length\");\n    const signBytes = JSON.stringify({\n        account_number: String(txDecoded.signatures[0].accountNumber),\n        chain_id: chainId,\n        data: null,\n        memo: txDecoded.memo,\n        msgs: [\n            {\n                inputs: txDecoded.msgs[0].inputs.map((x) => ({\n                    address: bnbSdk.crypto.encodeAddress(x.address, \"bnb\"),\n                    coins: x.coins.map((y) => ({\n                        amount: Number(y.amount),\n                        denom: y.denom,\n                    })),\n                })),\n                outputs: txDecoded.msgs[0].outputs.map((x) => ({\n                    address: bnbSdk.crypto.encodeAddress(x.address, \"bnb\"),\n                    coins: x.coins.map((y) => ({\n                        amount: Number(y.amount),\n                        denom: y.denom,\n                    })),\n                })),\n            },\n        ],\n        sequence: String(txDecoded.signatures[0].sequence),\n        source: String(txDecoded.source),\n    });\n    const signBytesHash = crypto_js_1.default.SHA256(crypto_js_1.default.enc.Utf8.parse(signBytes)).toString();\n    const pubKeyAmino = Buffer.from(txDecoded.signatures[0].pubKey);\n    if (pubKeyAmino.readUInt32BE(0) !== 0xeb5ae987)\n        throw new Error(\"bad pubkey aminoPrefix\");\n    if (pubKeyAmino.readUInt8(4) !== 33)\n        throw new Error(\"bad pubKey length\");\n    const pubKey = pubKeyAmino.slice(5);\n    const signature = txDecoded.signatures[0].signature;\n    return { signBytes, signBytesHash, pubKey, signature };\n}\nexports.decodeBnbTx = decodeBnbTx;\nfunction validateBnbTx(txBytes, chainId) {\n    const { signBytesHash, pubKey, signature } = decodeBnbTx(txBytes, chainId);\n    return tiny_secp256k1_1.default.verify(Buffer.from(signBytesHash, \"hex\"), pubKey, signature);\n}\nexports.validateBnbTx = validateBnbTx;\n//# sourceMappingURL=bnbencoding.js.map"]},"metadata":{},"sourceType":"script"}