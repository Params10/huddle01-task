{"ast":null,"code":"const Logger = require('./Logger');\n\nconst {\n  generateRandomNumber\n} = require('./utils');\n\nconst logger = new Logger('Message');\n\nclass Message {\n  static parse(raw) {\n    let object;\n    const message = {};\n\n    try {\n      object = JSON.parse(raw);\n    } catch (error) {\n      logger.error('parse() | invalid JSON: %s', error);\n      return;\n    }\n\n    if (typeof object !== 'object' || Array.isArray(object)) {\n      logger.error('parse() | not an object');\n      return;\n    } // Request.\n\n\n    if (object.request) {\n      message.request = true;\n\n      if (typeof object.method !== 'string') {\n        logger.error('parse() | missing/invalid method field');\n        return;\n      }\n\n      if (typeof object.id !== 'number') {\n        logger.error('parse() | missing/invalid id field');\n        return;\n      }\n\n      message.id = object.id;\n      message.method = object.method;\n      message.data = object.data || {};\n    } // Response.\n    else if (object.response) {\n      message.response = true;\n\n      if (typeof object.id !== 'number') {\n        logger.error('parse() | missing/invalid id field');\n        return;\n      }\n\n      message.id = object.id; // Success.\n\n      if (object.ok) {\n        message.ok = true;\n        message.data = object.data || {};\n      } // Error.\n      else {\n        message.ok = false;\n        message.errorCode = object.errorCode;\n        message.errorReason = object.errorReason;\n      }\n    } // Notification.\n    else if (object.notification) {\n      message.notification = true;\n\n      if (typeof object.method !== 'string') {\n        logger.error('parse() | missing/invalid method field');\n        return;\n      }\n\n      message.method = object.method;\n      message.data = object.data || {};\n    } // Invalid.\n    else {\n      logger.error('parse() | missing request/response field');\n      return;\n    }\n\n    return message;\n  }\n\n  static createRequest(method, data) {\n    const request = {\n      request: true,\n      id: generateRandomNumber(),\n      method: method,\n      data: data || {}\n    };\n    return request;\n  }\n\n  static createSuccessResponse(request, data) {\n    const response = {\n      response: true,\n      id: request.id,\n      ok: true,\n      data: data || {}\n    };\n    return response;\n  }\n\n  static createErrorResponse(request, errorCode, errorReason) {\n    const response = {\n      response: true,\n      id: request.id,\n      ok: false,\n      errorCode: errorCode,\n      errorReason: errorReason\n    };\n    return response;\n  }\n\n  static createNotification(method, data) {\n    const notification = {\n      notification: true,\n      method: method,\n      data: data || {}\n    };\n    return notification;\n  }\n\n}\n\nmodule.exports = Message;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/protoo-client/lib/Message.js"],"names":["Logger","require","generateRandomNumber","logger","Message","parse","raw","object","message","JSON","error","Array","isArray","request","method","id","data","response","ok","errorCode","errorReason","notification","createRequest","createSuccessResponse","createErrorResponse","createNotification","module","exports"],"mappings":"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","sourcesContent":["const Logger = require('./Logger');\nconst { generateRandomNumber } = require('./utils');\n\nconst logger = new Logger('Message');\n\nclass Message\n{\n\tstatic parse(raw)\n\t{\n\t\tlet object;\n\t\tconst message = {};\n\n\t\ttry\n\t\t{\n\t\t\tobject = JSON.parse(raw);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tlogger.error('parse() | invalid JSON: %s', error);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof object !== 'object' || Array.isArray(object))\n\t\t{\n\t\t\tlogger.error('parse() | not an object');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Request.\n\t\tif (object.request)\n\t\t{\n\t\t\tmessage.request = true;\n\n\t\t\tif (typeof object.method !== 'string')\n\t\t\t{\n\t\t\t\tlogger.error('parse() | missing/invalid method field');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof object.id !== 'number')\n\t\t\t{\n\t\t\t\tlogger.error('parse() | missing/invalid id field');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmessage.id = object.id;\n\t\t\tmessage.method = object.method;\n\t\t\tmessage.data = object.data || {};\n\t\t}\n\t\t// Response.\n\t\telse if (object.response)\n\t\t{\n\t\t\tmessage.response = true;\n\n\t\t\tif (typeof object.id !== 'number')\n\t\t\t{\n\t\t\t\tlogger.error('parse() | missing/invalid id field');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmessage.id = object.id;\n\n\t\t\t// Success.\n\t\t\tif (object.ok)\n\t\t\t{\n\t\t\t\tmessage.ok = true;\n\t\t\t\tmessage.data = object.data || {};\n\t\t\t}\n\t\t\t// Error.\n\t\t\telse\n\t\t\t{\n\t\t\t\tmessage.ok = false;\n\t\t\t\tmessage.errorCode = object.errorCode;\n\t\t\t\tmessage.errorReason = object.errorReason;\n\t\t\t}\n\t\t}\n\t\t// Notification.\n\t\telse if (object.notification)\n\t\t{\n\t\t\tmessage.notification = true;\n\n\t\t\tif (typeof object.method !== 'string')\n\t\t\t{\n\t\t\t\tlogger.error('parse() | missing/invalid method field');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmessage.method = object.method;\n\t\t\tmessage.data = object.data || {};\n\t\t}\n\t\t// Invalid.\n\t\telse\n\t\t{\n\t\t\tlogger.error('parse() | missing request/response field');\n\n\t\t\treturn;\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tstatic createRequest(method, data)\n\t{\n\t\tconst request =\n\t\t{\n\t\t\trequest : true,\n\t\t\tid      : generateRandomNumber(),\n\t\t\tmethod  : method,\n\t\t\tdata    : data || {}\n\t\t};\n\n\t\treturn request;\n\t}\n\n\tstatic createSuccessResponse(request, data)\n\t{\n\t\tconst response =\n\t\t{\n\t\t\tresponse : true,\n\t\t\tid       : request.id,\n\t\t\tok       : true,\n\t\t\tdata     : data || {}\n\t\t};\n\n\t\treturn response;\n\t}\n\n\tstatic createErrorResponse(request, errorCode, errorReason)\n\t{\n\t\tconst response =\n\t\t{\n\t\t\tresponse    : true,\n\t\t\tid          : request.id,\n\t\t\tok          : false,\n\t\t\terrorCode   : errorCode,\n\t\t\terrorReason : errorReason\n\t\t};\n\n\t\treturn response;\n\t}\n\n\tstatic createNotification(method, data)\n\t{\n\t\tconst notification =\n\t\t{\n\t\t\tnotification : true,\n\t\t\tmethod       : method,\n\t\t\tdata         : data || {}\n\t\t};\n\n\t\treturn notification;\n\t}\n}\n\nmodule.exports = Message;\n"]},"metadata":{},"sourceType":"script"}