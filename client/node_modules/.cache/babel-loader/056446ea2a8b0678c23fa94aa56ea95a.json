{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = exports.info = exports.KeepKeyHDWallet = exports.KeepKeyHDWalletInfo = exports.isKeepKey = void 0;\n\nconst core = __importStar(require(\"@shapeshiftoss/hdwallet-core\"));\n\nconst Messages = __importStar(require(\"@keepkey/device-protocol/lib/messages_pb\"));\n\nconst Types = __importStar(require(\"@keepkey/device-protocol/lib/types_pb\"));\n\nconst lodash_1 = __importDefault(require(\"lodash\"));\n\nconst semver_1 = __importDefault(require(\"semver\"));\n\nconst Binance = __importStar(require(\"./binance\"));\n\nconst Btc = __importStar(require(\"./bitcoin\"));\n\nconst Cosmos = __importStar(require(\"./cosmos\"));\n\nconst Eos = __importStar(require(\"./eos\"));\n\nconst Eth = __importStar(require(\"./ethereum\"));\n\nconst Ripple = __importStar(require(\"./ripple\"));\n\nconst Thorchain = __importStar(require(\"./thorchain\"));\n\nconst typeRegistry_1 = require(\"./typeRegistry\");\n\nconst utils_1 = require(\"./utils\");\n\nfunction isKeepKey(wallet) {\n  return lodash_1.default.isObject(wallet) && wallet._isKeepKey;\n}\n\nexports.isKeepKey = isKeepKey;\n\nfunction describeETHPath(path) {\n  let pathStr = core.addressNListToBIP32(path);\n  let unknown = {\n    verbose: pathStr,\n    coin: \"Ethereum\",\n    isKnown: false\n  };\n  if (path.length != 5) return unknown;\n  if (path[0] != 0x80000000 + 44) return unknown;\n  if (path[1] != 0x80000000 + core.slip44ByCoin(\"Ethereum\")) return unknown;\n  if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) return unknown;\n  if (path[3] != 0) return unknown;\n  if (path[4] != 0) return unknown;\n  let index = path[2] & 0x7fffffff;\n  return {\n    verbose: `Ethereum Account #${index}`,\n    accountIdx: index,\n    wholeAccount: true,\n    coin: \"Ethereum\",\n    isKnown: true,\n    isPrefork: false\n  };\n}\n\nfunction describeUTXOPath(path, coin, scriptType) {\n  var _a;\n\n  let pathStr = core.addressNListToBIP32(path);\n  let unknown = {\n    verbose: pathStr,\n    coin,\n    scriptType,\n    isKnown: false\n  };\n  if (!scriptType) return unknown;\n  if (!Btc.btcSupportsCoin(coin)) return unknown;\n  if (!Btc.btcSupportsScriptType(coin, scriptType)) return unknown;\n  if (path.length !== 3 && path.length !== 5) return unknown;\n  if ((path[0] & 0x80000000) >>> 0 !== 0x80000000) return unknown;\n  let purpose = path[0] & 0x7fffffff;\n  if (![44, 49, 84].includes(purpose)) return unknown;\n  if (purpose === 44 && scriptType !== core.BTCInputScriptType.SpendAddress) return unknown;\n  if (purpose === 49 && scriptType !== core.BTCInputScriptType.SpendP2SHWitness) return unknown;\n  if (purpose === 84 && scriptType !== core.BTCInputScriptType.SpendWitness) return unknown;\n  let wholeAccount = path.length === 3;\n  let script = scriptType ? (_a = {\n    [core.BTCInputScriptType.SpendAddress]: [\"Legacy\"],\n    [core.BTCInputScriptType.SpendP2SHWitness]: [],\n    [core.BTCInputScriptType.SpendWitness]: [\"Segwit Native\"]\n  }[scriptType]) !== null && _a !== void 0 ? _a : [] : [];\n  let isPrefork = false;\n  const slip44 = core.slip44ByCoin(coin);\n  if (slip44 === undefined) return unknown;\n\n  if (path[1] !== 0x80000000 + slip44) {\n    switch (coin) {\n      case \"BitcoinCash\":\n      case \"BitcoinGold\":\n        {\n          if (path[1] === 0x80000000 + core.slip44ByCoin(\"Bitcoin\")) {\n            isPrefork = true;\n            break;\n          }\n\n          return unknown;\n        }\n\n      case \"BitcoinSV\":\n        {\n          if (path[1] === 0x80000000 + core.slip44ByCoin(\"Bitcoin\") || path[1] === 0x80000000 + core.slip44ByCoin(\"BitcoinCash\")) {\n            isPrefork = true;\n            break;\n          }\n\n          return unknown;\n        }\n\n      default:\n        return unknown;\n    }\n  }\n\n  let attributes = isPrefork ? [\"Prefork\"] : [];\n\n  switch (coin) {\n    case \"Bitcoin\":\n    case \"Litecoin\":\n    case \"BitcoinGold\":\n    case \"Testnet\":\n      {\n        attributes = attributes.concat(script);\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  let attr = attributes.length ? ` (${attributes.join(\", \")})` : \"\";\n  let accountIdx = path[2] & 0x7fffffff;\n\n  if (wholeAccount) {\n    return {\n      coin,\n      verbose: `${coin} Account #${accountIdx}${attr}`,\n      accountIdx,\n      wholeAccount: true,\n      isKnown: true,\n      scriptType,\n      isPrefork\n    };\n  } else {\n    let change = path[3] === 1 ? \"Change \" : \"\";\n    let addressIdx = path[4];\n    return {\n      coin,\n      verbose: `${coin} Account #${accountIdx}, ${change}Address #${addressIdx}${attr}`,\n      accountIdx,\n      addressIdx,\n      wholeAccount: false,\n      isKnown: true,\n      isChange: path[3] === 1,\n      scriptType,\n      isPrefork\n    };\n  }\n}\n\nfunction describeCosmosPath(path) {\n  let pathStr = core.addressNListToBIP32(path);\n  let unknown = {\n    verbose: pathStr,\n    coin: \"Atom\",\n    isKnown: false\n  };\n\n  if (path.length != 5) {\n    return unknown;\n  }\n\n  if (path[0] != 0x80000000 + 44) {\n    return unknown;\n  }\n\n  if (path[1] != 0x80000000 + core.slip44ByCoin(\"Atom\")) {\n    return unknown;\n  }\n\n  if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n    return unknown;\n  }\n\n  if (path[3] !== 0 || path[4] !== 0) {\n    return unknown;\n  }\n\n  let index = path[2] & 0x7fffffff;\n  return {\n    verbose: `Cosmos Account #${index}`,\n    accountIdx: index,\n    wholeAccount: true,\n    coin: \"Atom\",\n    isKnown: true,\n    isPrefork: false\n  };\n}\n\nfunction describeThorchainPath(path) {\n  let pathStr = core.addressNListToBIP32(path);\n  let unknown = {\n    verbose: pathStr,\n    coin: \"Rune\",\n    isKnown: false\n  };\n\n  if (path.length != 5) {\n    return unknown;\n  }\n\n  if (path[0] != 0x80000000 + 44) {\n    return unknown;\n  }\n\n  if (path[1] != 0x80000000 + core.slip44ByCoin(\"Rune\")) {\n    return unknown;\n  }\n\n  if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n    return unknown;\n  }\n\n  if (path[3] !== 0 || path[4] !== 0) {\n    return unknown;\n  }\n\n  let index = path[2] & 0x7fffffff;\n  return {\n    verbose: `THORChain Account #${index}`,\n    accountIdx: index,\n    wholeAccount: true,\n    coin: \"Rune\",\n    isKnown: true,\n    isPrefork: false\n  };\n}\n\nfunction describeEosPath(path) {\n  let pathStr = core.addressNListToBIP32(path);\n  let unknown = {\n    verbose: pathStr,\n    coin: \"Eos\",\n    isKnown: false\n  };\n\n  if (path.length != 5) {\n    return unknown;\n  }\n\n  if (path[0] != 0x80000000 + 44) {\n    return unknown;\n  }\n\n  if (path[1] != 0x80000000 + core.slip44ByCoin(\"Eos\")) {\n    return unknown;\n  }\n\n  if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n    return unknown;\n  }\n\n  if (path[3] !== 0 || path[4] !== 0) {\n    return unknown;\n  }\n\n  let index = path[2] & 0x7fffffff;\n  return {\n    verbose: `Eos Account #${index}`,\n    accountIdx: index,\n    wholeAccount: true,\n    coin: \"Eos\",\n    isKnown: true,\n    isPrefork: false\n  };\n}\n\nfunction describeRipplePath(path) {\n  let pathStr = core.addressNListToBIP32(path);\n  let unknown = {\n    verbose: pathStr,\n    coin: \"Ripple\",\n    isKnown: false\n  };\n\n  if (path.length != 5) {\n    return unknown;\n  }\n\n  if (path[0] != 0x80000000 + 44) {\n    return unknown;\n  }\n\n  if (path[1] != 0x80000000 + core.slip44ByCoin(\"Ripple\")) {\n    return unknown;\n  }\n\n  if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n    return unknown;\n  }\n\n  if (path[3] !== 0 || path[4] !== 0) {\n    return unknown;\n  }\n\n  let index = path[2] & 0x7fffffff;\n  return {\n    verbose: `Ripple Account #${index}`,\n    accountIdx: index,\n    wholeAccount: true,\n    coin: \"Ripple\",\n    isKnown: true,\n    isPrefork: false\n  };\n}\n\nfunction describeBinancePath(path) {\n  let pathStr = core.addressNListToBIP32(path);\n  let unknown = {\n    verbose: pathStr,\n    coin: \"Binance\",\n    isKnown: false\n  };\n\n  if (path.length != 5) {\n    return unknown;\n  }\n\n  if (path[0] != 0x80000000 + 44) {\n    return unknown;\n  }\n\n  if (path[1] != 0x80000000 + core.slip44ByCoin(\"Binance\")) {\n    return unknown;\n  }\n\n  if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n    return unknown;\n  }\n\n  if (path[3] !== 0 || path[4] !== 0) {\n    return unknown;\n  }\n\n  let index = path[2] & 0x7fffffff;\n  return {\n    verbose: `Binance Account #${index}`,\n    accountIdx: index,\n    wholeAccount: true,\n    coin: \"Binance\",\n    isKnown: true,\n    isPrefork: false\n  };\n}\n\nclass KeepKeyHDWalletInfo {\n  constructor() {\n    this._supportsBTCInfo = true;\n    this._supportsETHInfo = true;\n    this._supportsCosmosInfo = true;\n    this._supportsRippleInfo = true;\n    this._supportsBinanceInfo = true;\n    this._supportsEosInfo = true;\n    this._supportsFioInfo = false;\n    this._supportsThorchainInfo = true;\n    this._supportsSecretInfo = false;\n    this._supportsKavaInfo = false;\n    this._supportsTerraInfo = false;\n  }\n\n  getVendor() {\n    return \"KeepKey\";\n  }\n\n  btcSupportsCoin(coin) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Btc.btcSupportsCoin(coin);\n    });\n  }\n\n  btcSupportsScriptType(coin, scriptType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Btc.btcSupportsScriptType(coin, scriptType);\n    });\n  }\n\n  btcSupportsSecureTransfer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Btc.btcSupportsSecureTransfer();\n    });\n  }\n\n  btcSupportsNativeShapeShift() {\n    return Btc.btcSupportsNativeShapeShift();\n  }\n\n  btcGetAccountPaths(msg) {\n    return Btc.btcGetAccountPaths(msg);\n  }\n\n  btcIsSameAccount(msg) {\n    return Btc.btcIsSameAccount(msg);\n  }\n\n  ethSupportsNetwork(chain_id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Eth.ethSupportsNetwork(chain_id);\n    });\n  }\n\n  ethSupportsSecureTransfer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Eth.ethSupportsSecureTransfer();\n    });\n  }\n\n  ethSupportsNativeShapeShift() {\n    return Eth.ethSupportsNativeShapeShift();\n  }\n\n  ethSupportsEIP1559() {\n    return Eth.ethSupportsEIP1559();\n  }\n\n  ethGetAccountPaths(msg) {\n    return Eth.ethGetAccountPaths(msg);\n  }\n\n  cosmosGetAccountPaths(msg) {\n    return Cosmos.cosmosGetAccountPaths(msg);\n  }\n\n  thorchainGetAccountPaths(msg) {\n    return Thorchain.thorchainGetAccountPaths(msg);\n  }\n\n  rippleGetAccountPaths(msg) {\n    return Ripple.rippleGetAccountPaths(msg);\n  }\n\n  binanceGetAccountPaths(msg) {\n    return Binance.binanceGetAccountPaths(msg);\n  }\n\n  eosGetAccountPaths(msg) {\n    return Eos.eosGetAccountPaths(msg);\n  }\n\n  hasOnDevicePinEntry() {\n    return false;\n  }\n\n  hasOnDevicePassphrase() {\n    return false;\n  }\n\n  hasOnDeviceDisplay() {\n    return true;\n  }\n\n  hasOnDeviceRecovery() {\n    return false;\n  }\n\n  hasNativeShapeShift(srcCoin, dstCoin) {\n    return true;\n  }\n\n  describePath(msg) {\n    switch (msg.coin) {\n      case \"Ethereum\":\n        return describeETHPath(msg.path);\n\n      case \"Atom\":\n        return describeCosmosPath(msg.path);\n\n      case \"Binance\":\n        return describeBinancePath(msg.path);\n\n      case \"Ripple\":\n        return describeRipplePath(msg.path);\n\n      case \"Eos\":\n        return describeEosPath(msg.path);\n\n      default:\n        return describeUTXOPath(msg.path, msg.coin, msg.scriptType);\n    }\n  }\n\n  btcNextAccountPath(msg) {\n    let description = describeUTXOPath(msg.addressNList, msg.coin, msg.scriptType);\n\n    if (!description.isKnown) {\n      return undefined;\n    }\n\n    let addressNList = msg.addressNList;\n\n    if (addressNList[0] === 0x80000000 + 44 || addressNList[0] === 0x80000000 + 49 || addressNList[0] === 0x80000000 + 84) {\n      addressNList[2] += 1;\n      return Object.assign(Object.assign({}, msg), {\n        addressNList\n      });\n    }\n\n    return undefined;\n  }\n\n  ethNextAccountPath(msg) {\n    let addressNList = msg.hardenedPath.concat(msg.relPath);\n    let description = describeETHPath(addressNList);\n\n    if (!description.isKnown) {\n      return undefined;\n    }\n\n    if (addressNList[0] === 0x80000000 + 44) {\n      addressNList[2] += 1;\n      return Object.assign(Object.assign({}, msg), {\n        addressNList,\n        hardenedPath: core.hardenedPath(addressNList),\n        relPath: core.relativePath(addressNList)\n      });\n    }\n\n    return undefined;\n  }\n\n  cosmosNextAccountPath(msg) {\n    let description = describeCosmosPath(msg.addressNList);\n\n    if (!description.isKnown) {\n      return undefined;\n    }\n\n    let addressNList = msg.addressNList;\n    addressNList[2] += 1;\n    return Object.assign(Object.assign({}, msg), {\n      addressNList\n    });\n  }\n\n  thorchainNextAccountPath(msg) {\n    let description = describeThorchainPath(msg.addressNList);\n\n    if (!description.isKnown) {\n      return undefined;\n    }\n\n    let addressNList = msg.addressNList;\n    addressNList[2] += 1;\n    return Object.assign(Object.assign({}, msg), {\n      addressNList\n    });\n  }\n\n  rippleNextAccountPath(msg) {\n    let description = describeRipplePath(msg.addressNList);\n\n    if (!description.isKnown) {\n      return undefined;\n    }\n\n    let addressNList = msg.addressNList;\n    addressNList[2] += 1;\n    return Object.assign(Object.assign({}, msg), {\n      addressNList\n    });\n  }\n\n  binanceNextAccountPath(msg) {\n    let description = describeBinancePath(msg.addressNList);\n\n    if (!description.isKnown) {\n      return undefined;\n    }\n\n    let addressNList = msg.addressNList;\n    addressNList[2] += 1;\n    return Object.assign(Object.assign({}, msg), {\n      addressNList\n    });\n  }\n\n  eosNextAccountPath(msg) {\n    let description = describeEosPath(msg.addressNList);\n\n    if (!description.isKnown) {\n      return undefined;\n    }\n\n    let addressNList = msg.addressNList;\n    addressNList[2] += 1;\n    return Object.assign(Object.assign({}, msg), {\n      addressNList\n    });\n  }\n\n}\n\nexports.KeepKeyHDWalletInfo = KeepKeyHDWalletInfo;\n\nclass KeepKeyHDWallet {\n  constructor(transport) {\n    this._supportsETHInfo = true;\n    this._supportsBTCInfo = true;\n    this._supportsCosmosInfo = true;\n    this._supportsRippleInfo = true;\n    this._supportsBinanceInfo = true;\n    this._supportsEosInfo = true;\n    this._supportsFioInfo = false;\n    this._isKeepKey = true;\n    this._supportsETH = true;\n    this._supportsBTC = true;\n    this._supportsCosmos = true;\n    this._supportsRipple = true;\n    this._supportsBinance = true;\n    this._supportsEos = true;\n    this._supportsFio = false;\n    this._supportsThorchainInfo = true;\n    this._supportsThorchain = true;\n    this._supportsSecretInfo = false;\n    this._supportsSecret = false;\n    this._supportsKava = false;\n    this._supportsKavaInfo = false;\n    this._supportsTerra = false;\n    this._supportsTerraInfo = false;\n    this.transport = transport;\n    this._supportsDebugLink = transport.debugLink;\n    this.info = new KeepKeyHDWalletInfo();\n  }\n\n  static create(transport) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new KeepKeyHDWallet(transport);\n    });\n  }\n\n  getDeviceID() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const featuresId = (yield this.getFeatures(\n      /*cached=*/\n      true)).deviceId; // Some devices are showing up with empty string deviceId's in their\n      // features object. Not sure how that's happening.\n\n      if (featuresId) return featuresId; // Grabbing the one from the transport seems to be a reasonable fallback.\n\n      return yield this.transport.getDeviceID();\n    });\n  }\n\n  getVendor() {\n    return \"KeepKey\";\n  }\n\n  getModel() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return core.mustBeDefined((yield this.getFeatures(\n      /*cached=*/\n      true)).model);\n    });\n  }\n\n  getFirmwareVersion() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const features = yield this.getFeatures(\n      /*cached=*/\n      true);\n      return `v${features.majorVersion}.${features.minorVersion}.${features.patchVersion}`;\n    });\n  }\n\n  getLabel() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      return (_a = (yield this.getFeatures(\n      /*cached=*/\n      true)).label) !== null && _a !== void 0 ? _a : \"\";\n    });\n  }\n\n  isInitialized() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return !!(yield this.getFeatures()).initialized;\n    });\n  }\n\n  isLocked() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const features = yield this.getFeatures();\n      if (features.pinProtection && !features.pinCached) return true;\n      if (features.passphraseProtection && !features.passphraseCached) return true;\n      return false;\n    });\n  }\n\n  getPublicKeys(getPublicKeys) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const publicKeys = [];\n\n      for (let i = 0; i < getPublicKeys.length; i++) {\n        const {\n          coin,\n          addressNList,\n          curve,\n          showDisplay,\n          scriptType\n        } = getPublicKeys[i];\n        const GPK = new Messages.GetPublicKey();\n        if (coin) GPK.setCoinName(coin);\n        GPK.setAddressNList(addressNList);\n        GPK.setShowDisplay(showDisplay || false);\n        GPK.setEcdsaCurveName(curve || \"secp256k1\");\n        GPK.setScriptType(utils_1.translateInputScriptType(scriptType || core.BTCInputScriptType.SpendAddress));\n        const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETPUBLICKEY, GPK, showDisplay ? core.LONG_TIMEOUT : core.DEFAULT_TIMEOUT);\n        if (event.message_type === core.Events.FAILURE) throw event;\n        const publicKey = event.proto;\n        publicKeys.push({\n          xpub: core.mustBeDefined(publicKey.getXpub())\n        });\n      }\n\n      return publicKeys;\n    });\n  }\n\n  ping(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const ping = new Messages.Ping();\n      ping.setMessage(msg.msg);\n      ping.setButtonProtection(msg.button || false);\n      ping.setPinProtection(msg.pin || false);\n      ping.setPassphraseProtection(msg.passphrase || false);\n      const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_PING, ping, msg.button || msg.pin || msg.passphrase ? core.LONG_TIMEOUT : core.DEFAULT_TIMEOUT);\n      if (event.message_type === core.Events.FAILURE) throw event;\n      const message = event.proto;\n      return {\n        msg: core.mustBeDefined(message.getMessage())\n      };\n    });\n  }\n\n  reset(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const resetDevice = new Messages.ResetDevice();\n      resetDevice.setStrength(msg.entropy || 128);\n      resetDevice.setDisplayRandom(false);\n      resetDevice.setPassphraseProtection(msg.passphrase || false);\n      resetDevice.setPinProtection(msg.pin || false);\n      resetDevice.setLabel(msg.label);\n\n      if (msg.autoLockDelayMs) {\n        resetDevice.setAutoLockDelayMs(msg.autoLockDelayMs);\n      }\n\n      resetDevice.setU2fCounter(msg.u2fCounter || Math.floor(+new Date() / 1000)); // resetDevice.setWordsPerGape(wordsPerScreen) // Re-enable when patch gets in\n      // Send\n\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_RESETDEVICE, resetDevice, core.LONG_TIMEOUT);\n      this.cacheFeatures(undefined);\n    });\n  }\n\n  recover(r) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const msg = new Messages.RecoveryDevice();\n      msg.setWordCount({\n        128: 12,\n        192: 18,\n        256: 24\n      }[r.entropy]);\n      msg.setPassphraseProtection(r.passphrase);\n      msg.setPinProtection(r.pin);\n      msg.setLabel(r.label);\n      msg.setLanguage(r.language || \"english\");\n      msg.setEnforceWordlist(true);\n      msg.setUseCharacterCipher(true);\n\n      if (r.autoLockDelayMs) {\n        msg.setAutoLockDelayMs(r.autoLockDelayMs);\n      }\n\n      msg.setU2fCounter(r.u2fCounter || Math.floor(+new Date() / 1000));\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_RECOVERYDEVICE, msg, core.LONG_TIMEOUT);\n      this.cacheFeatures(undefined);\n    });\n  }\n\n  pressYes() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.press(true);\n    });\n  }\n\n  pressNo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.press(false);\n    });\n  }\n\n  press(isYes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let decision = new Messages.DebugLinkDecision();\n      decision.setYesNo(isYes);\n      yield this.transport.callDebugLink(Messages.MessageType.MESSAGETYPE_DEBUGLINKDECISION, decision, core.DEFAULT_TIMEOUT,\n      /*omitLock=*/\n      false,\n      /*noWait=*/\n      true);\n    });\n  }\n\n  hasOnDevicePinEntry() {\n    return false;\n  }\n\n  hasOnDevicePassphrase() {\n    return false;\n  }\n\n  hasOnDeviceDisplay() {\n    return true;\n  }\n\n  hasOnDeviceRecovery() {\n    return false;\n  }\n\n  hasNativeShapeShift(srcCoin, dstCoin) {\n    return true;\n  }\n\n  sendPin(pin) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const matrixAck = new Messages.PinMatrixAck();\n      matrixAck.setPin(pin);\n      console.assert(undefined === (yield this.transport.call(Messages.MessageType.MESSAGETYPE_PINMATRIXACK, matrixAck, core.DEFAULT_TIMEOUT, true, true)));\n    });\n  }\n\n  sendPassphrase(passphrase) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const passphraseAck = new Messages.PassphraseAck();\n      passphraseAck.setPassphrase(passphrase);\n      console.assert(undefined === (yield this.transport.call(Messages.MessageType.MESSAGETYPE_PASSPHRASEACK, passphraseAck, core.DEFAULT_TIMEOUT, true, true)));\n    });\n  }\n\n  sendCharacter(character) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.sendCharacterProto(character, false, false);\n    });\n  }\n\n  sendCharacterDelete() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.sendCharacterProto(\"\", true, false);\n    });\n  }\n\n  sendCharacterDone() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.sendCharacterProto(\"\", false, true);\n    });\n  }\n\n  sendWord(word) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new Error(\"Not Yet Implemented :(\");\n    });\n  }\n\n  sendCharacterProto(character, _delete, _done) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const characterAck = new Messages.CharacterAck();\n\n      if (character !== \"\") {\n        characterAck.setCharacter(character);\n      } else if (_delete) {\n        characterAck.setDelete(_delete);\n      } else if (_done) {\n        characterAck.setDone(_done);\n      }\n\n      console.assert(undefined === (yield this.transport.call(Messages.MessageType.MESSAGETYPE_CHARACTERACK, characterAck, core.DEFAULT_TIMEOUT, true, true)));\n    });\n  } // ApplyPolicy enables or disables a named policy such as \"ShapeShift\" on the device\n\n\n  applyPolicy(p) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const policy = new Types.PolicyType();\n      policy.setPolicyName(p.policyName);\n      policy.setEnabled(p.enabled);\n      const applyPolicies = new Messages.ApplyPolicies();\n      applyPolicies.setPolicyList([policy]);\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_APPLYPOLICIES, applyPolicies, core.LONG_TIMEOUT);\n      this.cacheFeatures(undefined);\n    });\n  } // ApplySettings changes the label, language, and enabling/disabling the passphrase\n  // The default language is english\n\n\n  applySettings(s) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const applySettings = new Messages.ApplySettings();\n\n      if (s.label) {\n        applySettings.setLabel(s.label);\n      }\n\n      if (s.language) {\n        applySettings.setLanguage(s.language);\n      }\n\n      if (s.usePassphrase !== undefined) {\n        applySettings.setUsePassphrase(s.usePassphrase);\n      }\n\n      if (s.autoLockDelayMs) {\n        applySettings.setAutoLockDelayMs(s.autoLockDelayMs);\n      }\n\n      if (s.u2fCounter) {\n        applySettings.setU2fCounter(s.u2fCounter);\n      }\n\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_APPLYSETTINGS, applySettings);\n      this.cacheFeatures(undefined);\n    });\n  } // Cancel aborts the last device action that required user interaction\n  // It can follow a button request, passphrase request, or pin request\n\n\n  cancel() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.transport.cancel();\n    });\n  } // ChangePin requests setting/changing the pin\n\n\n  changePin() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const changePin = new Messages.ChangePin(); // User may be propmpted for button press up to 2 times\n\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_CHANGEPIN, changePin, core.LONG_TIMEOUT);\n    });\n  } // CipherKeyValue encrypts or decrypts a value with a given key, nodepath, and initializationVector\n  // This method encrypts if encrypt is true and decrypts if false, the confirm paramater determines wether\n  // the user is prompted on the device. See EncryptKeyValue() and DecryptKeyValue() for convenience methods\n  // NOTE: If the length of the value in bytes is not divisible by 16 it will be zero padded\n\n\n  cipherKeyValue(v) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // if(val.length % 16 !== 0) val = val.concat() TODO THIS\n      const cipherKeyValue = new Messages.CipherKeyValue();\n      cipherKeyValue.setAddressNList(v.addressNList);\n      cipherKeyValue.setKey(v.key);\n      cipherKeyValue.setValue(v.value);\n      cipherKeyValue.setEncrypt(!!v.encrypt);\n      cipherKeyValue.setAskOnEncrypt(v.askOnEncrypt || false);\n      cipherKeyValue.setAskOnDecrypt(v.askOnDecrypt || false);\n      cipherKeyValue.setIv(v.iv || \"\");\n      const response = yield this.transport.call(Messages.MessageType.MESSAGETYPE_CIPHERKEYVALUE, cipherKeyValue);\n      if (response.message_type === core.Events.FAILURE) throw event;\n      const ckv = response.message;\n      return ckv.getValue();\n    });\n  } // ClearSession clears cached session values such as the pin and passphrase\n\n\n  clearSession() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const clearSession = new Messages.ClearSession();\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_CLEARSESSION, clearSession);\n      this.cacheFeatures(undefined);\n    });\n  } // DecryptKeyValue is a convenience method around decrypting with CipherKeyValue().\n  // For more granular control of the process use CipherKeyValue()\n\n\n  decryptKeyValue(v) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.cipherKeyValue(v);\n    });\n  } // FirmwareErase askes the device to erase its firmware\n\n\n  firmwareErase() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const firmwareErase = new Messages.FirmwareErase(); // send\n\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_FIRMWAREERASE, firmwareErase);\n      this.cacheFeatures(undefined);\n    });\n  }\n\n  firmwareUpload(firmware) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const firmwareUpload = new Messages.FirmwareUpload();\n      const hash = yield this.transport.getFirmwareHash(firmware);\n      firmwareUpload.setPayload(firmware);\n      firmwareUpload.setPayloadHash(hash);\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_FIRMWAREUPLOAD, firmwareUpload);\n      this.cacheFeatures(undefined);\n    });\n  } // Initialize assigns a hid connection to this KeepKey and send initialize message to device\n\n\n  initialize() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const initialize = new Messages.Initialize();\n      const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_INITIALIZE, initialize);\n      if (event.message_type === core.Events.FAILURE || !event.message) throw event;\n      const out = event.message;\n      if (!out.deviceId) throw new Error(\"no deviceId in features object\");\n      this.features = out; // v6.1.0 firmware changed usb serial numbers to match STM32 desig_device_id\n      // If the deviceId in the features table doesn't match, then we need to\n      // add another k-v pair to the keyring so it can be looked up either way.\n\n      const transportDeviceID = yield this.transport.getDeviceID();\n\n      if (transportDeviceID !== out.deviceId) {\n        this.transport.keyring.addAlias(transportDeviceID, out.deviceId);\n      } // Cosmos isn't supported until v6.3.0\n\n\n      const fwVersion = `v${out.majorVersion}.${out.minorVersion}.${out.patchVersion}`;\n      this._supportsCosmos = semver_1.default.gte(fwVersion, \"v6.3.0\");\n      this._supportsRipple = semver_1.default.gte(fwVersion, \"v6.4.0\");\n      this._supportsBinance = semver_1.default.gte(fwVersion, \"v6.4.0\");\n      this._supportsEos = semver_1.default.gte(fwVersion, \"v6.4.0\"); // this._supportsThorchain = Semver.get(fwVersion, \"v7.0.0\");\n\n      this.cacheFeatures(out);\n      return out;\n    });\n  } // GetFeatures returns the features and other device information such as the version, label, and supported coins\n\n\n  getFeatures(cached = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (cached && this.featuresCache) return this.featuresCache;\n      const features = new Messages.GetFeatures();\n      const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETFEATURES, features);\n      if (event.message_type === core.Events.FAILURE) throw event;\n      this.cacheFeatures(event.message);\n      return event.message;\n    });\n  }\n\n  cacheFeatures(features) {\n    this.featuresCache = features;\n  } // GetEntropy requests sample data from the hardware RNG\n\n\n  getEntropy(size) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const getEntropy = new Messages.GetEntropy();\n      getEntropy.setSize(size); // send\n\n      const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETENTROPY, getEntropy, core.LONG_TIMEOUT);\n      if (event.message_type === core.Events.FAILURE) throw event;\n      return core.mustBeDefined(event.proto).getEntropy_asU8();\n    });\n  } // GetNumCoins returns the number of coins supported by the device regardless of if the hanve funds.\n\n\n  getNumCoins() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const getCoinTable = new Messages.GetCoinTable();\n      const response = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETCOINTABLE, getCoinTable);\n      if (response.message_type === core.Events.FAILURE) throw response;\n      return core.mustBeDefined(core.mustBeDefined(response.proto).getNumCoins());\n    });\n  } // GetCoinTable returns an array of Types.CoinTypes, with start and end arguments for paging.\n  // You cannot request more than 10 at a time.\n\n\n  getCoinTable(start = 0, end = start + 10) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const getCoinTable = new Messages.GetCoinTable();\n      getCoinTable.setStart(start);\n      getCoinTable.setEnd(end);\n      const response = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETCOINTABLE, getCoinTable);\n      if (response.message_type === core.Events.FAILURE) throw event;\n      const coinTable = response.message;\n      return coinTable.tableList;\n    });\n  } // LoadDevice loads a provided seed onto the device and applies the provided settings\n  // including setting a pin/device label, enabling/disabling the passphrase, and whether to\n  // check the checksum of the provided mnemonic\n\n\n  loadDevice(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const loadDevice = new Messages.LoadDevice();\n      loadDevice.setMnemonic(msg.mnemonic);\n      loadDevice.setPassphraseProtection(!!msg.passphrase);\n      loadDevice.setSkipChecksum(!!msg.skipChecksum);\n      if (msg.pin) loadDevice.setPin(msg.pin);\n      if (msg.label) loadDevice.setLabel(msg.label); // send\n\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_LOADDEVICE, loadDevice, core.LONG_TIMEOUT);\n      this.cacheFeatures(undefined);\n    });\n  } // RemovePin disables pin protection for the device. If a pin is currently enabled\n  // it will prompt the user to enter the current pin\n\n\n  removePin() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const changePin = new Messages.ChangePin();\n      changePin.setRemove(true); // send\n\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_CHANGEPIN, changePin);\n      this.cacheFeatures(undefined);\n    });\n  }\n\n  send(events) {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const event of events) {\n        const MessageType = typeRegistry_1.messageTypeRegistry[core.mustBeDefined(event.message_enum)];\n        const msg = new MessageType();\n        Object.entries(event.message).forEach(([key, value]) => {\n          const setterMethod = utils_1.protoFieldToSetMethod(key);\n\n          if (msg[setterMethod]) {\n            // Assume setter methods are always of the format: strength -> setStrength\n            // until this exists https://github.com/protocolbuffers/protobuf/issues/1591\n            msg[setterMethod](value);\n          }\n        });\n        yield this.transport.call(core.mustBeDefined(event.message_enum), msg);\n      }\n    });\n  } // SoftReset power cycles the device. The device only responds to\n  // this message while in manufacturer mode\n\n\n  softReset() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const softReset = new Messages.SoftReset(); // send\n\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_SOFTRESET, softReset);\n      this.cacheFeatures(undefined);\n    });\n  } // WipeDevice wipes all sensitive data and settings\n\n\n  wipe() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wipeDevice = new Messages.WipeDevice(); // send\n\n      yield this.transport.call(Messages.MessageType.MESSAGETYPE_WIPEDEVICE, wipeDevice);\n      this.cacheFeatures(undefined);\n    });\n  }\n\n  btcSupportsCoin(coin) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.info.btcSupportsCoin(coin);\n    });\n  }\n\n  btcSupportsScriptType(coin, scriptType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.info.btcSupportsScriptType(coin, scriptType);\n    });\n  }\n\n  btcGetAddress(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Btc.btcGetAddress(this, this.transport, msg);\n    });\n  }\n\n  btcSignTx(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Btc.btcSignTx(this, this.transport, msg);\n    });\n  }\n\n  btcSupportsSecureTransfer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.info.btcSupportsSecureTransfer();\n    });\n  }\n\n  btcSupportsNativeShapeShift() {\n    return this.info.btcSupportsNativeShapeShift();\n  }\n\n  ethSupportsEIP1559() {\n    return this.info.ethSupportsEIP1559();\n  }\n\n  btcSignMessage(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Btc.btcSignMessage(this, this.transport, msg);\n    });\n  }\n\n  btcVerifyMessage(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Btc.btcVerifyMessage(this, this.transport, msg);\n    });\n  }\n\n  btcGetAccountPaths(msg) {\n    return this.info.btcGetAccountPaths(msg);\n  }\n\n  btcIsSameAccount(msg) {\n    // TODO: mixed-mode segwit was added in v6.0.2\n    // https://github.com/keepkey/keepkey-firmware/pull/81\n    // if (firmware_version.lt('6.0.2') && msg.length > 1)\n    //  return false\n    return this.info.btcIsSameAccount(msg);\n  }\n\n  ethSignTx(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Eth.ethSignTx(this.transport, msg);\n    });\n  }\n\n  ethGetAddress(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Eth.ethGetAddress(this.transport, msg);\n    });\n  }\n\n  ethSignMessage(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Eth.ethSignMessage(this.transport, msg);\n    });\n  }\n\n  ethVerifyMessage(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Eth.ethVerifyMessage(this.transport, msg);\n    });\n  }\n\n  ethSupportsNetwork(chain_id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.info.ethSupportsNetwork(chain_id);\n    });\n  }\n\n  ethSupportsSecureTransfer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.info.ethSupportsSecureTransfer();\n    });\n  }\n\n  ethSupportsNativeShapeShift() {\n    return this.info.ethSupportsNativeShapeShift();\n  }\n\n  ethGetAccountPaths(msg) {\n    return this.info.ethGetAccountPaths(msg);\n  }\n\n  rippleGetAccountPaths(msg) {\n    return this.info.rippleGetAccountPaths(msg);\n  }\n\n  rippleGetAddress(msg) {\n    return Ripple.rippleGetAddress(this.transport, msg);\n  }\n\n  rippleSignTx(msg) {\n    return Ripple.rippleSignTx(this.transport, msg);\n  }\n\n  cosmosGetAccountPaths(msg) {\n    return this.info.cosmosGetAccountPaths(msg);\n  }\n\n  cosmosGetAddress(msg) {\n    return Cosmos.cosmosGetAddress(this.transport, msg);\n  }\n\n  cosmosSignTx(msg) {\n    return Cosmos.cosmosSignTx(this.transport, msg);\n  }\n\n  thorchainGetAccountPaths(msg) {\n    return this.info.thorchainGetAccountPaths(msg);\n  }\n\n  thorchainGetAddress(msg) {\n    return Thorchain.thorchainGetAddress(this.transport, msg);\n  }\n\n  thorchainSignTx(msg) {\n    return Thorchain.thorchainSignTx(this.transport, msg);\n  }\n\n  binanceGetAccountPaths(msg) {\n    return this.info.binanceGetAccountPaths(msg);\n  }\n\n  binanceGetAddress(msg) {\n    return Binance.binanceGetAddress(this.transport, msg);\n  }\n\n  binanceSignTx(msg) {\n    return Binance.binanceSignTx(this.transport, msg);\n  }\n\n  eosGetAccountPaths(msg) {\n    return this.info.eosGetAccountPaths(msg);\n  }\n\n  eosGetPublicKey(msg) {\n    return Eos.eosGetPublicKey(this.transport, msg);\n  }\n\n  eosSignTx(msg) {\n    return Eos.eosSignTx(this.transport, msg);\n  }\n\n  describePath(msg) {\n    return this.info.describePath(msg);\n  }\n\n  disconnect() {\n    return this.transport.disconnect();\n  }\n\n  btcNextAccountPath(msg) {\n    return this.info.btcNextAccountPath(msg);\n  }\n\n  ethNextAccountPath(msg) {\n    return this.info.ethNextAccountPath(msg);\n  }\n\n  eosNextAccountPath(msg) {\n    return this.info.eosNextAccountPath(msg);\n  }\n\n  cosmosNextAccountPath(msg) {\n    return this.info.cosmosNextAccountPath(msg);\n  }\n\n  rippleNextAccountPath(msg) {\n    return this.info.rippleNextAccountPath(msg);\n  }\n\n  binanceNextAccountPath(msg) {\n    return this.info.binanceNextAccountPath(msg);\n  }\n\n}\n\nexports.KeepKeyHDWallet = KeepKeyHDWallet;\n\nfunction info() {\n  return new KeepKeyHDWalletInfo();\n}\n\nexports.info = info;\n\nfunction create(transport) {\n  return new KeepKeyHDWallet(transport);\n}\n\nexports.create = create;","map":{"version":3,"sources":["../src/keepkey.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.create = exports.info = exports.KeepKeyHDWallet = exports.KeepKeyHDWalletInfo = exports.isKeepKey = void 0;\nconst core = __importStar(require(\"@shapeshiftoss/hdwallet-core\"));\nconst Messages = __importStar(require(\"@keepkey/device-protocol/lib/messages_pb\"));\nconst Types = __importStar(require(\"@keepkey/device-protocol/lib/types_pb\"));\nconst lodash_1 = __importDefault(require(\"lodash\"));\nconst semver_1 = __importDefault(require(\"semver\"));\nconst Binance = __importStar(require(\"./binance\"));\nconst Btc = __importStar(require(\"./bitcoin\"));\nconst Cosmos = __importStar(require(\"./cosmos\"));\nconst Eos = __importStar(require(\"./eos\"));\nconst Eth = __importStar(require(\"./ethereum\"));\nconst Ripple = __importStar(require(\"./ripple\"));\nconst Thorchain = __importStar(require(\"./thorchain\"));\nconst typeRegistry_1 = require(\"./typeRegistry\");\nconst utils_1 = require(\"./utils\");\nfunction isKeepKey(wallet) {\n    return lodash_1.default.isObject(wallet) && wallet._isKeepKey;\n}\nexports.isKeepKey = isKeepKey;\nfunction describeETHPath(path) {\n    let pathStr = core.addressNListToBIP32(path);\n    let unknown = {\n        verbose: pathStr,\n        coin: \"Ethereum\",\n        isKnown: false,\n    };\n    if (path.length != 5)\n        return unknown;\n    if (path[0] != 0x80000000 + 44)\n        return unknown;\n    if (path[1] != 0x80000000 + core.slip44ByCoin(\"Ethereum\"))\n        return unknown;\n    if ((path[2] & 0x80000000) >>> 0 !== 0x80000000)\n        return unknown;\n    if (path[3] != 0)\n        return unknown;\n    if (path[4] != 0)\n        return unknown;\n    let index = path[2] & 0x7fffffff;\n    return {\n        verbose: `Ethereum Account #${index}`,\n        accountIdx: index,\n        wholeAccount: true,\n        coin: \"Ethereum\",\n        isKnown: true,\n        isPrefork: false,\n    };\n}\nfunction describeUTXOPath(path, coin, scriptType) {\n    var _a;\n    let pathStr = core.addressNListToBIP32(path);\n    let unknown = {\n        verbose: pathStr,\n        coin,\n        scriptType,\n        isKnown: false,\n    };\n    if (!scriptType)\n        return unknown;\n    if (!Btc.btcSupportsCoin(coin))\n        return unknown;\n    if (!Btc.btcSupportsScriptType(coin, scriptType))\n        return unknown;\n    if (path.length !== 3 && path.length !== 5)\n        return unknown;\n    if ((path[0] & 0x80000000) >>> 0 !== 0x80000000)\n        return unknown;\n    let purpose = path[0] & 0x7fffffff;\n    if (![44, 49, 84].includes(purpose))\n        return unknown;\n    if (purpose === 44 && scriptType !== core.BTCInputScriptType.SpendAddress)\n        return unknown;\n    if (purpose === 49 && scriptType !== core.BTCInputScriptType.SpendP2SHWitness)\n        return unknown;\n    if (purpose === 84 && scriptType !== core.BTCInputScriptType.SpendWitness)\n        return unknown;\n    let wholeAccount = path.length === 3;\n    let script = scriptType ? (_a = {\n        [core.BTCInputScriptType.SpendAddress]: [\"Legacy\"],\n        [core.BTCInputScriptType.SpendP2SHWitness]: [],\n        [core.BTCInputScriptType.SpendWitness]: [\"Segwit Native\"],\n    }[scriptType]) !== null && _a !== void 0 ? _a : [] : [];\n    let isPrefork = false;\n    const slip44 = core.slip44ByCoin(coin);\n    if (slip44 === undefined)\n        return unknown;\n    if (path[1] !== 0x80000000 + slip44) {\n        switch (coin) {\n            case \"BitcoinCash\":\n            case \"BitcoinGold\": {\n                if (path[1] === 0x80000000 + core.slip44ByCoin(\"Bitcoin\")) {\n                    isPrefork = true;\n                    break;\n                }\n                return unknown;\n            }\n            case \"BitcoinSV\": {\n                if (path[1] === 0x80000000 + core.slip44ByCoin(\"Bitcoin\") || path[1] === 0x80000000 + core.slip44ByCoin(\"BitcoinCash\")) {\n                    isPrefork = true;\n                    break;\n                }\n                return unknown;\n            }\n            default:\n                return unknown;\n        }\n    }\n    let attributes = isPrefork ? [\"Prefork\"] : [];\n    switch (coin) {\n        case \"Bitcoin\":\n        case \"Litecoin\":\n        case \"BitcoinGold\":\n        case \"Testnet\": {\n            attributes = attributes.concat(script);\n            break;\n        }\n        default:\n            break;\n    }\n    let attr = attributes.length ? ` (${attributes.join(\", \")})` : \"\";\n    let accountIdx = path[2] & 0x7fffffff;\n    if (wholeAccount) {\n        return {\n            coin,\n            verbose: `${coin} Account #${accountIdx}${attr}`,\n            accountIdx,\n            wholeAccount: true,\n            isKnown: true,\n            scriptType,\n            isPrefork,\n        };\n    }\n    else {\n        let change = path[3] === 1 ? \"Change \" : \"\";\n        let addressIdx = path[4];\n        return {\n            coin,\n            verbose: `${coin} Account #${accountIdx}, ${change}Address #${addressIdx}${attr}`,\n            accountIdx,\n            addressIdx,\n            wholeAccount: false,\n            isKnown: true,\n            isChange: path[3] === 1,\n            scriptType,\n            isPrefork,\n        };\n    }\n}\nfunction describeCosmosPath(path) {\n    let pathStr = core.addressNListToBIP32(path);\n    let unknown = {\n        verbose: pathStr,\n        coin: \"Atom\",\n        isKnown: false,\n    };\n    if (path.length != 5) {\n        return unknown;\n    }\n    if (path[0] != 0x80000000 + 44) {\n        return unknown;\n    }\n    if (path[1] != 0x80000000 + core.slip44ByCoin(\"Atom\")) {\n        return unknown;\n    }\n    if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n        return unknown;\n    }\n    if (path[3] !== 0 || path[4] !== 0) {\n        return unknown;\n    }\n    let index = path[2] & 0x7fffffff;\n    return {\n        verbose: `Cosmos Account #${index}`,\n        accountIdx: index,\n        wholeAccount: true,\n        coin: \"Atom\",\n        isKnown: true,\n        isPrefork: false,\n    };\n}\nfunction describeThorchainPath(path) {\n    let pathStr = core.addressNListToBIP32(path);\n    let unknown = {\n        verbose: pathStr,\n        coin: \"Rune\",\n        isKnown: false,\n    };\n    if (path.length != 5) {\n        return unknown;\n    }\n    if (path[0] != 0x80000000 + 44) {\n        return unknown;\n    }\n    if (path[1] != 0x80000000 + core.slip44ByCoin(\"Rune\")) {\n        return unknown;\n    }\n    if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n        return unknown;\n    }\n    if (path[3] !== 0 || path[4] !== 0) {\n        return unknown;\n    }\n    let index = path[2] & 0x7fffffff;\n    return {\n        verbose: `THORChain Account #${index}`,\n        accountIdx: index,\n        wholeAccount: true,\n        coin: \"Rune\",\n        isKnown: true,\n        isPrefork: false,\n    };\n}\nfunction describeEosPath(path) {\n    let pathStr = core.addressNListToBIP32(path);\n    let unknown = {\n        verbose: pathStr,\n        coin: \"Eos\",\n        isKnown: false,\n    };\n    if (path.length != 5) {\n        return unknown;\n    }\n    if (path[0] != 0x80000000 + 44) {\n        return unknown;\n    }\n    if (path[1] != 0x80000000 + core.slip44ByCoin(\"Eos\")) {\n        return unknown;\n    }\n    if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n        return unknown;\n    }\n    if (path[3] !== 0 || path[4] !== 0) {\n        return unknown;\n    }\n    let index = path[2] & 0x7fffffff;\n    return {\n        verbose: `Eos Account #${index}`,\n        accountIdx: index,\n        wholeAccount: true,\n        coin: \"Eos\",\n        isKnown: true,\n        isPrefork: false,\n    };\n}\nfunction describeRipplePath(path) {\n    let pathStr = core.addressNListToBIP32(path);\n    let unknown = {\n        verbose: pathStr,\n        coin: \"Ripple\",\n        isKnown: false,\n    };\n    if (path.length != 5) {\n        return unknown;\n    }\n    if (path[0] != 0x80000000 + 44) {\n        return unknown;\n    }\n    if (path[1] != 0x80000000 + core.slip44ByCoin(\"Ripple\")) {\n        return unknown;\n    }\n    if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n        return unknown;\n    }\n    if (path[3] !== 0 || path[4] !== 0) {\n        return unknown;\n    }\n    let index = path[2] & 0x7fffffff;\n    return {\n        verbose: `Ripple Account #${index}`,\n        accountIdx: index,\n        wholeAccount: true,\n        coin: \"Ripple\",\n        isKnown: true,\n        isPrefork: false,\n    };\n}\nfunction describeBinancePath(path) {\n    let pathStr = core.addressNListToBIP32(path);\n    let unknown = {\n        verbose: pathStr,\n        coin: \"Binance\",\n        isKnown: false,\n    };\n    if (path.length != 5) {\n        return unknown;\n    }\n    if (path[0] != 0x80000000 + 44) {\n        return unknown;\n    }\n    if (path[1] != 0x80000000 + core.slip44ByCoin(\"Binance\")) {\n        return unknown;\n    }\n    if ((path[2] & 0x80000000) >>> 0 !== 0x80000000) {\n        return unknown;\n    }\n    if (path[3] !== 0 || path[4] !== 0) {\n        return unknown;\n    }\n    let index = path[2] & 0x7fffffff;\n    return {\n        verbose: `Binance Account #${index}`,\n        accountIdx: index,\n        wholeAccount: true,\n        coin: \"Binance\",\n        isKnown: true,\n        isPrefork: false,\n    };\n}\nclass KeepKeyHDWalletInfo {\n    constructor() {\n        this._supportsBTCInfo = true;\n        this._supportsETHInfo = true;\n        this._supportsCosmosInfo = true;\n        this._supportsRippleInfo = true;\n        this._supportsBinanceInfo = true;\n        this._supportsEosInfo = true;\n        this._supportsFioInfo = false;\n        this._supportsThorchainInfo = true;\n        this._supportsSecretInfo = false;\n        this._supportsKavaInfo = false;\n        this._supportsTerraInfo = false;\n    }\n    getVendor() {\n        return \"KeepKey\";\n    }\n    btcSupportsCoin(coin) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Btc.btcSupportsCoin(coin);\n        });\n    }\n    btcSupportsScriptType(coin, scriptType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Btc.btcSupportsScriptType(coin, scriptType);\n        });\n    }\n    btcSupportsSecureTransfer() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Btc.btcSupportsSecureTransfer();\n        });\n    }\n    btcSupportsNativeShapeShift() {\n        return Btc.btcSupportsNativeShapeShift();\n    }\n    btcGetAccountPaths(msg) {\n        return Btc.btcGetAccountPaths(msg);\n    }\n    btcIsSameAccount(msg) {\n        return Btc.btcIsSameAccount(msg);\n    }\n    ethSupportsNetwork(chain_id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Eth.ethSupportsNetwork(chain_id);\n        });\n    }\n    ethSupportsSecureTransfer() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Eth.ethSupportsSecureTransfer();\n        });\n    }\n    ethSupportsNativeShapeShift() {\n        return Eth.ethSupportsNativeShapeShift();\n    }\n    ethSupportsEIP1559() {\n        return Eth.ethSupportsEIP1559();\n    }\n    ethGetAccountPaths(msg) {\n        return Eth.ethGetAccountPaths(msg);\n    }\n    cosmosGetAccountPaths(msg) {\n        return Cosmos.cosmosGetAccountPaths(msg);\n    }\n    thorchainGetAccountPaths(msg) {\n        return Thorchain.thorchainGetAccountPaths(msg);\n    }\n    rippleGetAccountPaths(msg) {\n        return Ripple.rippleGetAccountPaths(msg);\n    }\n    binanceGetAccountPaths(msg) {\n        return Binance.binanceGetAccountPaths(msg);\n    }\n    eosGetAccountPaths(msg) {\n        return Eos.eosGetAccountPaths(msg);\n    }\n    hasOnDevicePinEntry() {\n        return false;\n    }\n    hasOnDevicePassphrase() {\n        return false;\n    }\n    hasOnDeviceDisplay() {\n        return true;\n    }\n    hasOnDeviceRecovery() {\n        return false;\n    }\n    hasNativeShapeShift(srcCoin, dstCoin) {\n        return true;\n    }\n    describePath(msg) {\n        switch (msg.coin) {\n            case \"Ethereum\":\n                return describeETHPath(msg.path);\n            case \"Atom\":\n                return describeCosmosPath(msg.path);\n            case \"Binance\":\n                return describeBinancePath(msg.path);\n            case \"Ripple\":\n                return describeRipplePath(msg.path);\n            case \"Eos\":\n                return describeEosPath(msg.path);\n            default:\n                return describeUTXOPath(msg.path, msg.coin, msg.scriptType);\n        }\n    }\n    btcNextAccountPath(msg) {\n        let description = describeUTXOPath(msg.addressNList, msg.coin, msg.scriptType);\n        if (!description.isKnown) {\n            return undefined;\n        }\n        let addressNList = msg.addressNList;\n        if (addressNList[0] === 0x80000000 + 44 ||\n            addressNList[0] === 0x80000000 + 49 ||\n            addressNList[0] === 0x80000000 + 84) {\n            addressNList[2] += 1;\n            return Object.assign(Object.assign({}, msg), { addressNList });\n        }\n        return undefined;\n    }\n    ethNextAccountPath(msg) {\n        let addressNList = msg.hardenedPath.concat(msg.relPath);\n        let description = describeETHPath(addressNList);\n        if (!description.isKnown) {\n            return undefined;\n        }\n        if (addressNList[0] === 0x80000000 + 44) {\n            addressNList[2] += 1;\n            return Object.assign(Object.assign({}, msg), { addressNList, hardenedPath: core.hardenedPath(addressNList), relPath: core.relativePath(addressNList) });\n        }\n        return undefined;\n    }\n    cosmosNextAccountPath(msg) {\n        let description = describeCosmosPath(msg.addressNList);\n        if (!description.isKnown) {\n            return undefined;\n        }\n        let addressNList = msg.addressNList;\n        addressNList[2] += 1;\n        return Object.assign(Object.assign({}, msg), { addressNList });\n    }\n    thorchainNextAccountPath(msg) {\n        let description = describeThorchainPath(msg.addressNList);\n        if (!description.isKnown) {\n            return undefined;\n        }\n        let addressNList = msg.addressNList;\n        addressNList[2] += 1;\n        return Object.assign(Object.assign({}, msg), { addressNList });\n    }\n    rippleNextAccountPath(msg) {\n        let description = describeRipplePath(msg.addressNList);\n        if (!description.isKnown) {\n            return undefined;\n        }\n        let addressNList = msg.addressNList;\n        addressNList[2] += 1;\n        return Object.assign(Object.assign({}, msg), { addressNList });\n    }\n    binanceNextAccountPath(msg) {\n        let description = describeBinancePath(msg.addressNList);\n        if (!description.isKnown) {\n            return undefined;\n        }\n        let addressNList = msg.addressNList;\n        addressNList[2] += 1;\n        return Object.assign(Object.assign({}, msg), { addressNList });\n    }\n    eosNextAccountPath(msg) {\n        let description = describeEosPath(msg.addressNList);\n        if (!description.isKnown) {\n            return undefined;\n        }\n        let addressNList = msg.addressNList;\n        addressNList[2] += 1;\n        return Object.assign(Object.assign({}, msg), { addressNList });\n    }\n}\nexports.KeepKeyHDWalletInfo = KeepKeyHDWalletInfo;\nclass KeepKeyHDWallet {\n    constructor(transport) {\n        this._supportsETHInfo = true;\n        this._supportsBTCInfo = true;\n        this._supportsCosmosInfo = true;\n        this._supportsRippleInfo = true;\n        this._supportsBinanceInfo = true;\n        this._supportsEosInfo = true;\n        this._supportsFioInfo = false;\n        this._isKeepKey = true;\n        this._supportsETH = true;\n        this._supportsBTC = true;\n        this._supportsCosmos = true;\n        this._supportsRipple = true;\n        this._supportsBinance = true;\n        this._supportsEos = true;\n        this._supportsFio = false;\n        this._supportsThorchainInfo = true;\n        this._supportsThorchain = true;\n        this._supportsSecretInfo = false;\n        this._supportsSecret = false;\n        this._supportsKava = false;\n        this._supportsKavaInfo = false;\n        this._supportsTerra = false;\n        this._supportsTerraInfo = false;\n        this.transport = transport;\n        this._supportsDebugLink = transport.debugLink;\n        this.info = new KeepKeyHDWalletInfo();\n    }\n    static create(transport) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new KeepKeyHDWallet(transport);\n        });\n    }\n    getDeviceID() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const featuresId = (yield this.getFeatures(/*cached=*/ true)).deviceId;\n            // Some devices are showing up with empty string deviceId's in their\n            // features object. Not sure how that's happening.\n            if (featuresId)\n                return featuresId;\n            // Grabbing the one from the transport seems to be a reasonable fallback.\n            return yield this.transport.getDeviceID();\n        });\n    }\n    getVendor() {\n        return \"KeepKey\";\n    }\n    getModel() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return core.mustBeDefined((yield this.getFeatures(/*cached=*/ true)).model);\n        });\n    }\n    getFirmwareVersion() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const features = yield this.getFeatures(/*cached=*/ true);\n            return `v${features.majorVersion}.${features.minorVersion}.${features.patchVersion}`;\n        });\n    }\n    getLabel() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            return (_a = (yield this.getFeatures(/*cached=*/ true)).label) !== null && _a !== void 0 ? _a : \"\";\n        });\n    }\n    isInitialized() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return !!(yield this.getFeatures()).initialized;\n        });\n    }\n    isLocked() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const features = yield this.getFeatures();\n            if (features.pinProtection && !features.pinCached)\n                return true;\n            if (features.passphraseProtection && !features.passphraseCached)\n                return true;\n            return false;\n        });\n    }\n    getPublicKeys(getPublicKeys) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const publicKeys = [];\n            for (let i = 0; i < getPublicKeys.length; i++) {\n                const { coin, addressNList, curve, showDisplay, scriptType } = getPublicKeys[i];\n                const GPK = new Messages.GetPublicKey();\n                if (coin)\n                    GPK.setCoinName(coin);\n                GPK.setAddressNList(addressNList);\n                GPK.setShowDisplay(showDisplay || false);\n                GPK.setEcdsaCurveName(curve || \"secp256k1\");\n                GPK.setScriptType(utils_1.translateInputScriptType(scriptType || core.BTCInputScriptType.SpendAddress));\n                const event = (yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETPUBLICKEY, GPK, showDisplay ? core.LONG_TIMEOUT : core.DEFAULT_TIMEOUT));\n                if (event.message_type === core.Events.FAILURE)\n                    throw event;\n                const publicKey = event.proto;\n                publicKeys.push({ xpub: core.mustBeDefined(publicKey.getXpub()) });\n            }\n            return publicKeys;\n        });\n    }\n    ping(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ping = new Messages.Ping();\n            ping.setMessage(msg.msg);\n            ping.setButtonProtection(msg.button || false);\n            ping.setPinProtection(msg.pin || false);\n            ping.setPassphraseProtection(msg.passphrase || false);\n            const event = (yield this.transport.call(Messages.MessageType.MESSAGETYPE_PING, ping, msg.button || msg.pin || msg.passphrase ? core.LONG_TIMEOUT : core.DEFAULT_TIMEOUT));\n            if (event.message_type === core.Events.FAILURE)\n                throw event;\n            const message = event.proto;\n            return { msg: core.mustBeDefined(message.getMessage()) };\n        });\n    }\n    reset(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const resetDevice = new Messages.ResetDevice();\n            resetDevice.setStrength(msg.entropy || 128);\n            resetDevice.setDisplayRandom(false);\n            resetDevice.setPassphraseProtection(msg.passphrase || false);\n            resetDevice.setPinProtection(msg.pin || false);\n            resetDevice.setLabel(msg.label);\n            if (msg.autoLockDelayMs) {\n                resetDevice.setAutoLockDelayMs(msg.autoLockDelayMs);\n            }\n            resetDevice.setU2fCounter(msg.u2fCounter || Math.floor(+new Date() / 1000));\n            // resetDevice.setWordsPerGape(wordsPerScreen) // Re-enable when patch gets in\n            // Send\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_RESETDEVICE, resetDevice, core.LONG_TIMEOUT);\n            this.cacheFeatures(undefined);\n        });\n    }\n    recover(r) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const msg = new Messages.RecoveryDevice();\n            msg.setWordCount({ 128: 12, 192: 18, 256: 24 }[r.entropy]);\n            msg.setPassphraseProtection(r.passphrase);\n            msg.setPinProtection(r.pin);\n            msg.setLabel(r.label);\n            msg.setLanguage(r.language || \"english\");\n            msg.setEnforceWordlist(true);\n            msg.setUseCharacterCipher(true);\n            if (r.autoLockDelayMs) {\n                msg.setAutoLockDelayMs(r.autoLockDelayMs);\n            }\n            msg.setU2fCounter(r.u2fCounter || Math.floor(+new Date() / 1000));\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_RECOVERYDEVICE, msg, core.LONG_TIMEOUT);\n            this.cacheFeatures(undefined);\n        });\n    }\n    pressYes() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.press(true);\n        });\n    }\n    pressNo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.press(false);\n        });\n    }\n    press(isYes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let decision = new Messages.DebugLinkDecision();\n            decision.setYesNo(isYes);\n            yield this.transport.callDebugLink(Messages.MessageType.MESSAGETYPE_DEBUGLINKDECISION, decision, core.DEFAULT_TIMEOUT, \n            /*omitLock=*/ false, \n            /*noWait=*/ true);\n        });\n    }\n    hasOnDevicePinEntry() {\n        return false;\n    }\n    hasOnDevicePassphrase() {\n        return false;\n    }\n    hasOnDeviceDisplay() {\n        return true;\n    }\n    hasOnDeviceRecovery() {\n        return false;\n    }\n    hasNativeShapeShift(srcCoin, dstCoin) {\n        return true;\n    }\n    sendPin(pin) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const matrixAck = new Messages.PinMatrixAck();\n            matrixAck.setPin(pin);\n            console.assert(undefined ===\n                (yield this.transport.call(Messages.MessageType.MESSAGETYPE_PINMATRIXACK, matrixAck, core.DEFAULT_TIMEOUT, true, true)));\n        });\n    }\n    sendPassphrase(passphrase) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const passphraseAck = new Messages.PassphraseAck();\n            passphraseAck.setPassphrase(passphrase);\n            console.assert(undefined ===\n                (yield this.transport.call(Messages.MessageType.MESSAGETYPE_PASSPHRASEACK, passphraseAck, core.DEFAULT_TIMEOUT, true, true)));\n        });\n    }\n    sendCharacter(character) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.sendCharacterProto(character, false, false);\n        });\n    }\n    sendCharacterDelete() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.sendCharacterProto(\"\", true, false);\n        });\n    }\n    sendCharacterDone() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.sendCharacterProto(\"\", false, true);\n        });\n    }\n    sendWord(word) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error(\"Not Yet Implemented :(\");\n        });\n    }\n    sendCharacterProto(character, _delete, _done) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const characterAck = new Messages.CharacterAck();\n            if (character !== \"\") {\n                characterAck.setCharacter(character);\n            }\n            else if (_delete) {\n                characterAck.setDelete(_delete);\n            }\n            else if (_done) {\n                characterAck.setDone(_done);\n            }\n            console.assert(undefined ===\n                (yield this.transport.call(Messages.MessageType.MESSAGETYPE_CHARACTERACK, characterAck, core.DEFAULT_TIMEOUT, true, true)));\n        });\n    }\n    // ApplyPolicy enables or disables a named policy such as \"ShapeShift\" on the device\n    applyPolicy(p) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const policy = new Types.PolicyType();\n            policy.setPolicyName(p.policyName);\n            policy.setEnabled(p.enabled);\n            const applyPolicies = new Messages.ApplyPolicies();\n            applyPolicies.setPolicyList([policy]);\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_APPLYPOLICIES, applyPolicies, core.LONG_TIMEOUT);\n            this.cacheFeatures(undefined);\n        });\n    }\n    // ApplySettings changes the label, language, and enabling/disabling the passphrase\n    // The default language is english\n    applySettings(s) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const applySettings = new Messages.ApplySettings();\n            if (s.label) {\n                applySettings.setLabel(s.label);\n            }\n            if (s.language) {\n                applySettings.setLanguage(s.language);\n            }\n            if (s.usePassphrase !== undefined) {\n                applySettings.setUsePassphrase(s.usePassphrase);\n            }\n            if (s.autoLockDelayMs) {\n                applySettings.setAutoLockDelayMs(s.autoLockDelayMs);\n            }\n            if (s.u2fCounter) {\n                applySettings.setU2fCounter(s.u2fCounter);\n            }\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_APPLYSETTINGS, applySettings);\n            this.cacheFeatures(undefined);\n        });\n    }\n    // Cancel aborts the last device action that required user interaction\n    // It can follow a button request, passphrase request, or pin request\n    cancel() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.transport.cancel();\n        });\n    }\n    // ChangePin requests setting/changing the pin\n    changePin() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const changePin = new Messages.ChangePin();\n            // User may be propmpted for button press up to 2 times\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_CHANGEPIN, changePin, core.LONG_TIMEOUT);\n        });\n    }\n    // CipherKeyValue encrypts or decrypts a value with a given key, nodepath, and initializationVector\n    // This method encrypts if encrypt is true and decrypts if false, the confirm paramater determines wether\n    // the user is prompted on the device. See EncryptKeyValue() and DecryptKeyValue() for convenience methods\n    // NOTE: If the length of the value in bytes is not divisible by 16 it will be zero padded\n    cipherKeyValue(v) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // if(val.length % 16 !== 0) val = val.concat() TODO THIS\n            const cipherKeyValue = new Messages.CipherKeyValue();\n            cipherKeyValue.setAddressNList(v.addressNList);\n            cipherKeyValue.setKey(v.key);\n            cipherKeyValue.setValue(v.value);\n            cipherKeyValue.setEncrypt(!!v.encrypt);\n            cipherKeyValue.setAskOnEncrypt(v.askOnEncrypt || false);\n            cipherKeyValue.setAskOnDecrypt(v.askOnDecrypt || false);\n            cipherKeyValue.setIv(v.iv || \"\");\n            const response = (yield this.transport.call(Messages.MessageType.MESSAGETYPE_CIPHERKEYVALUE, cipherKeyValue));\n            if (response.message_type === core.Events.FAILURE)\n                throw event;\n            const ckv = response.message;\n            return ckv.getValue();\n        });\n    }\n    // ClearSession clears cached session values such as the pin and passphrase\n    clearSession() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const clearSession = new Messages.ClearSession();\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_CLEARSESSION, clearSession);\n            this.cacheFeatures(undefined);\n        });\n    }\n    // DecryptKeyValue is a convenience method around decrypting with CipherKeyValue().\n    // For more granular control of the process use CipherKeyValue()\n    decryptKeyValue(v) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.cipherKeyValue(v);\n        });\n    }\n    // FirmwareErase askes the device to erase its firmware\n    firmwareErase() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const firmwareErase = new Messages.FirmwareErase();\n            // send\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_FIRMWAREERASE, firmwareErase);\n            this.cacheFeatures(undefined);\n        });\n    }\n    firmwareUpload(firmware) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const firmwareUpload = new Messages.FirmwareUpload();\n            const hash = yield this.transport.getFirmwareHash(firmware);\n            firmwareUpload.setPayload(firmware);\n            firmwareUpload.setPayloadHash(hash);\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_FIRMWAREUPLOAD, firmwareUpload);\n            this.cacheFeatures(undefined);\n        });\n    }\n    // Initialize assigns a hid connection to this KeepKey and send initialize message to device\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const initialize = new Messages.Initialize();\n            const event = (yield this.transport.call(Messages.MessageType.MESSAGETYPE_INITIALIZE, initialize));\n            if (event.message_type === core.Events.FAILURE || !event.message)\n                throw event;\n            const out = event.message;\n            if (!out.deviceId)\n                throw new Error(\"no deviceId in features object\");\n            this.features = out;\n            // v6.1.0 firmware changed usb serial numbers to match STM32 desig_device_id\n            // If the deviceId in the features table doesn't match, then we need to\n            // add another k-v pair to the keyring so it can be looked up either way.\n            const transportDeviceID = yield this.transport.getDeviceID();\n            if (transportDeviceID !== out.deviceId) {\n                this.transport.keyring.addAlias(transportDeviceID, out.deviceId);\n            }\n            // Cosmos isn't supported until v6.3.0\n            const fwVersion = `v${out.majorVersion}.${out.minorVersion}.${out.patchVersion}`;\n            this._supportsCosmos = semver_1.default.gte(fwVersion, \"v6.3.0\");\n            this._supportsRipple = semver_1.default.gte(fwVersion, \"v6.4.0\");\n            this._supportsBinance = semver_1.default.gte(fwVersion, \"v6.4.0\");\n            this._supportsEos = semver_1.default.gte(fwVersion, \"v6.4.0\");\n            // this._supportsThorchain = Semver.get(fwVersion, \"v7.0.0\");\n            this.cacheFeatures(out);\n            return out;\n        });\n    }\n    // GetFeatures returns the features and other device information such as the version, label, and supported coins\n    getFeatures(cached = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (cached && this.featuresCache)\n                return this.featuresCache;\n            const features = new Messages.GetFeatures();\n            const event = (yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETFEATURES, features));\n            if (event.message_type === core.Events.FAILURE)\n                throw event;\n            this.cacheFeatures(event.message);\n            return event.message;\n        });\n    }\n    cacheFeatures(features) {\n        this.featuresCache = features;\n    }\n    // GetEntropy requests sample data from the hardware RNG\n    getEntropy(size) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const getEntropy = new Messages.GetEntropy();\n            getEntropy.setSize(size);\n            // send\n            const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETENTROPY, getEntropy, core.LONG_TIMEOUT);\n            if (event.message_type === core.Events.FAILURE)\n                throw event;\n            return core.mustBeDefined(event.proto).getEntropy_asU8();\n        });\n    }\n    // GetNumCoins returns the number of coins supported by the device regardless of if the hanve funds.\n    getNumCoins() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const getCoinTable = new Messages.GetCoinTable();\n            const response = (yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETCOINTABLE, getCoinTable));\n            if (response.message_type === core.Events.FAILURE)\n                throw response;\n            return core.mustBeDefined(core.mustBeDefined(response.proto).getNumCoins());\n        });\n    }\n    // GetCoinTable returns an array of Types.CoinTypes, with start and end arguments for paging.\n    // You cannot request more than 10 at a time.\n    getCoinTable(start = 0, end = start + 10) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const getCoinTable = new Messages.GetCoinTable();\n            getCoinTable.setStart(start);\n            getCoinTable.setEnd(end);\n            const response = (yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETCOINTABLE, getCoinTable));\n            if (response.message_type === core.Events.FAILURE)\n                throw event;\n            const coinTable = response.message;\n            return coinTable.tableList;\n        });\n    }\n    // LoadDevice loads a provided seed onto the device and applies the provided settings\n    // including setting a pin/device label, enabling/disabling the passphrase, and whether to\n    // check the checksum of the provided mnemonic\n    loadDevice(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const loadDevice = new Messages.LoadDevice();\n            loadDevice.setMnemonic(msg.mnemonic);\n            loadDevice.setPassphraseProtection(!!msg.passphrase);\n            loadDevice.setSkipChecksum(!!msg.skipChecksum);\n            if (msg.pin)\n                loadDevice.setPin(msg.pin);\n            if (msg.label)\n                loadDevice.setLabel(msg.label);\n            // send\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_LOADDEVICE, loadDevice, core.LONG_TIMEOUT);\n            this.cacheFeatures(undefined);\n        });\n    }\n    // RemovePin disables pin protection for the device. If a pin is currently enabled\n    // it will prompt the user to enter the current pin\n    removePin() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const changePin = new Messages.ChangePin();\n            changePin.setRemove(true);\n            // send\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_CHANGEPIN, changePin);\n            this.cacheFeatures(undefined);\n        });\n    }\n    send(events) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const event of events) {\n                const MessageType = typeRegistry_1.messageTypeRegistry[core.mustBeDefined(event.message_enum)];\n                const msg = new MessageType();\n                Object.entries(event.message).forEach(([key, value]) => {\n                    const setterMethod = utils_1.protoFieldToSetMethod(key);\n                    if (msg[setterMethod]) {\n                        // Assume setter methods are always of the format: strength -> setStrength\n                        // until this exists https://github.com/protocolbuffers/protobuf/issues/1591\n                        msg[setterMethod](value);\n                    }\n                });\n                yield this.transport.call(core.mustBeDefined(event.message_enum), msg);\n            }\n        });\n    }\n    // SoftReset power cycles the device. The device only responds to\n    // this message while in manufacturer mode\n    softReset() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const softReset = new Messages.SoftReset();\n            // send\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_SOFTRESET, softReset);\n            this.cacheFeatures(undefined);\n        });\n    }\n    // WipeDevice wipes all sensitive data and settings\n    wipe() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wipeDevice = new Messages.WipeDevice();\n            // send\n            yield this.transport.call(Messages.MessageType.MESSAGETYPE_WIPEDEVICE, wipeDevice);\n            this.cacheFeatures(undefined);\n        });\n    }\n    btcSupportsCoin(coin) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.info.btcSupportsCoin(coin);\n        });\n    }\n    btcSupportsScriptType(coin, scriptType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.info.btcSupportsScriptType(coin, scriptType);\n        });\n    }\n    btcGetAddress(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Btc.btcGetAddress(this, this.transport, msg);\n        });\n    }\n    btcSignTx(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Btc.btcSignTx(this, this.transport, msg);\n        });\n    }\n    btcSupportsSecureTransfer() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.info.btcSupportsSecureTransfer();\n        });\n    }\n    btcSupportsNativeShapeShift() {\n        return this.info.btcSupportsNativeShapeShift();\n    }\n    ethSupportsEIP1559() {\n        return this.info.ethSupportsEIP1559();\n    }\n    btcSignMessage(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Btc.btcSignMessage(this, this.transport, msg);\n        });\n    }\n    btcVerifyMessage(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Btc.btcVerifyMessage(this, this.transport, msg);\n        });\n    }\n    btcGetAccountPaths(msg) {\n        return this.info.btcGetAccountPaths(msg);\n    }\n    btcIsSameAccount(msg) {\n        // TODO: mixed-mode segwit was added in v6.0.2\n        // https://github.com/keepkey/keepkey-firmware/pull/81\n        // if (firmware_version.lt('6.0.2') && msg.length > 1)\n        //  return false\n        return this.info.btcIsSameAccount(msg);\n    }\n    ethSignTx(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Eth.ethSignTx(this.transport, msg);\n        });\n    }\n    ethGetAddress(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Eth.ethGetAddress(this.transport, msg);\n        });\n    }\n    ethSignMessage(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Eth.ethSignMessage(this.transport, msg);\n        });\n    }\n    ethVerifyMessage(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Eth.ethVerifyMessage(this.transport, msg);\n        });\n    }\n    ethSupportsNetwork(chain_id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.info.ethSupportsNetwork(chain_id);\n        });\n    }\n    ethSupportsSecureTransfer() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.info.ethSupportsSecureTransfer();\n        });\n    }\n    ethSupportsNativeShapeShift() {\n        return this.info.ethSupportsNativeShapeShift();\n    }\n    ethGetAccountPaths(msg) {\n        return this.info.ethGetAccountPaths(msg);\n    }\n    rippleGetAccountPaths(msg) {\n        return this.info.rippleGetAccountPaths(msg);\n    }\n    rippleGetAddress(msg) {\n        return Ripple.rippleGetAddress(this.transport, msg);\n    }\n    rippleSignTx(msg) {\n        return Ripple.rippleSignTx(this.transport, msg);\n    }\n    cosmosGetAccountPaths(msg) {\n        return this.info.cosmosGetAccountPaths(msg);\n    }\n    cosmosGetAddress(msg) {\n        return Cosmos.cosmosGetAddress(this.transport, msg);\n    }\n    cosmosSignTx(msg) {\n        return Cosmos.cosmosSignTx(this.transport, msg);\n    }\n    thorchainGetAccountPaths(msg) {\n        return this.info.thorchainGetAccountPaths(msg);\n    }\n    thorchainGetAddress(msg) {\n        return Thorchain.thorchainGetAddress(this.transport, msg);\n    }\n    thorchainSignTx(msg) {\n        return Thorchain.thorchainSignTx(this.transport, msg);\n    }\n    binanceGetAccountPaths(msg) {\n        return this.info.binanceGetAccountPaths(msg);\n    }\n    binanceGetAddress(msg) {\n        return Binance.binanceGetAddress(this.transport, msg);\n    }\n    binanceSignTx(msg) {\n        return Binance.binanceSignTx(this.transport, msg);\n    }\n    eosGetAccountPaths(msg) {\n        return this.info.eosGetAccountPaths(msg);\n    }\n    eosGetPublicKey(msg) {\n        return Eos.eosGetPublicKey(this.transport, msg);\n    }\n    eosSignTx(msg) {\n        return Eos.eosSignTx(this.transport, msg);\n    }\n    describePath(msg) {\n        return this.info.describePath(msg);\n    }\n    disconnect() {\n        return this.transport.disconnect();\n    }\n    btcNextAccountPath(msg) {\n        return this.info.btcNextAccountPath(msg);\n    }\n    ethNextAccountPath(msg) {\n        return this.info.ethNextAccountPath(msg);\n    }\n    eosNextAccountPath(msg) {\n        return this.info.eosNextAccountPath(msg);\n    }\n    cosmosNextAccountPath(msg) {\n        return this.info.cosmosNextAccountPath(msg);\n    }\n    rippleNextAccountPath(msg) {\n        return this.info.rippleNextAccountPath(msg);\n    }\n    binanceNextAccountPath(msg) {\n        return this.info.binanceNextAccountPath(msg);\n    }\n}\nexports.KeepKeyHDWallet = KeepKeyHDWallet;\nfunction info() {\n    return new KeepKeyHDWalletInfo();\n}\nexports.info = info;\nfunction create(transport) {\n    return new KeepKeyHDWallet(transport);\n}\nexports.create = create;\n//# sourceMappingURL=keepkey.js.map"]},"metadata":{},"sourceType":"script"}