{"ast":null,"code":"const {\n  EventEmitter\n} = require('events');\n\nconst Logger = require('./Logger');\n\nclass EnhancedEventEmitter extends EventEmitter {\n  constructor(logger) {\n    super();\n    this.setMaxListeners(Infinity);\n    this._logger = logger || new Logger('EnhancedEventEmitter');\n  }\n\n  safeEmit(event, ...args) {\n    try {\n      this.emit(event, ...args);\n    } catch (error) {\n      this._logger.error('safeEmit() | event listener threw an error [event:%s]:%o', event, error);\n    }\n  }\n\n  async safeEmitAsPromise(event, ...args) {\n    return new Promise((resolve, reject) => {\n      this.safeEmit(event, ...args, resolve, reject);\n    });\n  }\n\n}\n\nmodule.exports = EnhancedEventEmitter;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/protoo-client/lib/EnhancedEventEmitter.js"],"names":["EventEmitter","require","Logger","EnhancedEventEmitter","constructor","logger","setMaxListeners","Infinity","_logger","safeEmit","event","args","emit","error","safeEmitAsPromise","Promise","resolve","reject","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,QAAD,CAAhC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAME,oBAAN,SAAmCH,YAAnC,CACA;AACCI,EAAAA,WAAW,CAACC,MAAD,EACX;AACC;AACA,SAAKC,eAAL,CAAqBC,QAArB;AAEA,SAAKC,OAAL,GAAeH,MAAM,IAAI,IAAIH,MAAJ,CAAW,sBAAX,CAAzB;AACA;;AAEDO,EAAAA,QAAQ,CAACC,KAAD,EAAQ,GAAGC,IAAX,EACR;AACC,QACA;AACC,WAAKC,IAAL,CAAUF,KAAV,EAAiB,GAAGC,IAApB;AACA,KAHD,CAIA,OAAOE,KAAP,EACA;AACC,WAAKL,OAAL,CAAaK,KAAb,CACC,0DADD,EAECH,KAFD,EAEQG,KAFR;AAGA;AACD;;AAEsB,QAAjBC,iBAAiB,CAACJ,KAAD,EAAQ,GAAGC,IAAX,EACvB;AACC,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACnB;AACC,WAAKR,QAAL,CAAcC,KAAd,EAAqB,GAAGC,IAAxB,EAA8BK,OAA9B,EAAuCC,MAAvC;AACA,KAHM,CAAP;AAIA;;AA7BF;;AAgCAC,MAAM,CAACC,OAAP,GAAiBhB,oBAAjB","sourcesContent":["const { EventEmitter } = require('events');\nconst Logger = require('./Logger');\n\nclass EnhancedEventEmitter extends EventEmitter\n{\n\tconstructor(logger)\n\t{\n\t\tsuper();\n\t\tthis.setMaxListeners(Infinity);\n\n\t\tthis._logger = logger || new Logger('EnhancedEventEmitter');\n\t}\n\n\tsafeEmit(event, ...args)\n\t{\n\t\ttry\n\t\t{\n\t\t\tthis.emit(event, ...args);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tthis._logger.error(\n\t\t\t\t'safeEmit() | event listener threw an error [event:%s]:%o',\n\t\t\t\tevent, error);\n\t\t}\n\t}\n\n\tasync safeEmitAsPromise(event, ...args)\n\t{\n\t\treturn new Promise((resolve, reject) =>\n\t\t{\n\t\t\tthis.safeEmit(event, ...args, resolve, reject);\n\t\t});\n\t}\n}\n\nmodule.exports = EnhancedEventEmitter;\n"]},"metadata":{},"sourceType":"script"}