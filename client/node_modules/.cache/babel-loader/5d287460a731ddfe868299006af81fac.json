{"ast":null,"code":"import * as ethUtil from 'ethereumjs-util';\nimport HDKey from 'hdkey';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (![\"60'\", \"1'\", \"73799'\", \"246'\"].includes(parts[2])) {\n    return false;\n  }\n\n  if (parts[3] === undefined || parts[3] === \"0'\") {\n    return true;\n  }\n\n  var accountFieldNumber = Number(parts[3].slice(0, -1));\n\n  if (isNaN(accountFieldNumber) || accountFieldNumber < 0 || parts[3].slice(-1) !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldNumber = Number(parts[4]);\n\n  if (isNaN(changeFieldNumber) || changeFieldNumber < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldNumber = Number(parts[5]);\n\n  if (isNaN(addressFieldNumber) || addressFieldNumber < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/bnc-onboard/dist/esm/hd-wallet-51018814.js"],"names":["ethUtil","HDKey","Buffer","publicToAddress","toChecksumAddress","numberToGet","generateAddresses","account","offset","publicKey","chainCode","path","hdk","addresses","i","dkey","deriveChild","address","toString","push","dPath","concat","isValidPath","parts","split","includes","undefined","accountFieldNumber","Number","slice","isNaN","changeFieldNumber","addressFieldNumber"],"mappings":"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","sourcesContent":["import * as ethUtil from 'ethereumjs-util';\nimport HDKey from 'hdkey';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (![\"60'\", \"1'\", \"73799'\", \"246'\"].includes(parts[2])) {\n    return false;\n  }\n\n  if (parts[3] === undefined || parts[3] === \"0'\") {\n    return true;\n  }\n\n  var accountFieldNumber = Number(parts[3].slice(0, -1));\n\n  if (isNaN(accountFieldNumber) || accountFieldNumber < 0 || parts[3].slice(-1) !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldNumber = Number(parts[4]);\n\n  if (isNaN(changeFieldNumber) || changeFieldNumber < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldNumber = Number(parts[5]);\n\n  if (isNaN(addressFieldNumber) || addressFieldNumber < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };"]},"metadata":{},"sourceType":"module"}