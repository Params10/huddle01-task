{"ast":null,"code":"var _jsxFileName = \"/home/param/Desktop/huddle01-task/client/src/containers/Room.js\",\n    _s = $RefreshSig$();\n\n//client sdk import\nimport HuddleClient, { emitter } from \"huddle01-client\"; //react imports\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\"; //helper imports\n\nimport { getTrack } from \"../lib/utils/helpers\";\nimport { PeerVideo, PeerAudio, PeerScreen } from \"../components/PeerViewPort\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Room() {\n  _s();\n\n  const history = useHistory(); //to allow for recordings\n\n  const isBot = localStorage.getItem(\"bot_password\") === \"huddle01\"; //initialising states\n\n  const [huddle, setHuddle] = useState(null);\n  const [roomState, setRoomState] = useState(false);\n  const [micState, setMicState] = useState(false);\n  const [webcamState, setWebcamState] = useState(false);\n  const [screenshareState, setScreenshareState] = useState(false);\n  const [isHost, setIsHost] = useState(true); //const [HostId, setHostId]=useState('');\n\n  let hostid = \"\";\n  const [peers, setPeers] = useState([]);\n  const [consumerStreams, setConsumerStreams] = useState({\n    video: [],\n    audio: [],\n    screen: []\n  });\n  const meVideoElem = useRef(null);\n  const meScreenElem = useRef(null);\n  const joinRoomBtn = useRef(null);\n  const config = {\n    apiKey: \"i4pzqbpxza8vpijQMwZsP1H7nZZEH0TN3vR4NdNS\",\n    roomId: \"C131\",\n    peerId: \"Rick\" + Math.floor(Math.random() * 4000),\n    displayName: \"Rick Sanchez\",\n    window,\n    isBot // true/false -- gets calculated on line 15\n\n  }; //initialize the app\n\n  useEffect(() => {\n    history.push(`?roomId=${config.roomId}`);\n    const myHuddleClient = new HuddleClient(config);\n    setHuddle(myHuddleClient);\n  }, []);\n  useEffect(() => {\n    console.log(\"peers array \", peers);\n\n    if (huddle) {\n      console.log(huddle);\n\n      if (huddle._hostId) {\n        if (huddle._hostId != huddle._peerId) {\n          setIsHost(false);\n        }\n      }\n    }\n  }, [peers, huddle]); //recording config\n\n  useEffect(() => {\n    //joinRoomBtn here can be whatever button/function used that calls `huddle.join()`\n    huddle && isBot && joinRoomBtn.current.click();\n  }, [huddle, isBot]);\n\n  const setupEventListeners = async () => {\n    emitter.on(\"roomState\", state => {\n      switch (state) {\n        case \"connected\":\n          //do whatever\n          break;\n\n        case \"failed\":\n          //do whatever\n          break;\n\n        case \"disconnected\":\n          //do whatever\n          break;\n\n        default:\n          break;\n      }\n\n      setRoomState(state);\n    });\n    emitter.on(\"error\", error => {\n      alert(error); //do whatever\n    });\n    emitter.on(\"addPeer\", peer => {\n      console.log(\"new peer =>\", peer);\n      setPeers(_peers => [..._peers, peer]);\n    });\n    emitter.on(\"addProducer\", producer => {\n      console.log(\"new prod\", producer);\n\n      switch (producer.type) {\n        case \"webcam\":\n          let videoStream = producer.track;\n\n          if (typeof videoStream == \"object\") {\n            try {\n              meVideoElem.current.srcObject = getTrack(videoStream);\n            } catch (error) {\n              console.error(error);\n            }\n          }\n\n          break;\n\n        case \"mic\":\n          //do whatever\n          break;\n\n        case \"screen\":\n          videoStream = producer.track;\n\n          if (typeof videoStream == \"object\") {\n            try {\n              meScreenElem.current.srcObject = getTrack(videoStream);\n            } catch (error) {\n              console.error(error);\n            }\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    });\n    emitter.on(\"removeProducer\", producer => {\n      console.log(\"remove \", producer);\n\n      switch (producer.type) {\n        case \"webcam\":\n          try {\n            meVideoElem.current.srcObject = null;\n          } catch (error) {\n            console.error(error);\n          }\n\n          break;\n\n        case \"mic\":\n          //do whatever\n          break;\n\n        case \"screen\":\n          try {\n            meScreenElem.current.srcObject = null;\n          } catch (error) {\n            console.error(error);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    });\n    emitter.on(\"addConsumer\", consumer => {\n      switch (consumer.type) {\n        case \"webcam\":\n          {\n            const videoStream = consumer.track;\n            setConsumerStreams(prevState => ({ ...prevState,\n              video: [...prevState.video, videoStream]\n            }));\n            break;\n          }\n\n        case \"screen\":\n          {\n            const screenStream = consumer.track;\n            setConsumerStreams(prevState => ({ ...prevState,\n              screen: [...prevState.screen, screenStream]\n            }));\n            break;\n          }\n\n        case \"mic\":\n          {\n            const audioStream = consumer.track;\n            setConsumerStreams(prevState => ({ ...prevState,\n              audio: [...prevState.audio, audioStream]\n            }));\n            break;\n          }\n\n        default:\n          break;\n      }\n    });\n    emitter.on(\"removeConsumer\", consumer => {\n      switch (consumer.type) {\n        case \"screen\":\n          setConsumerStreams(prevState => {\n            return { ...prevState,\n              screen: prevState.screen.filter(_consumer => _consumer.id !== consumer._id)\n            };\n          });\n          break;\n\n        case \"webcam\":\n          setConsumerStreams(prevState => {\n            return { ...prevState,\n              video: prevState.video.filter(_consumer => _consumer.id !== consumer._id)\n            };\n          });\n          break;\n\n        case \"mic\":\n          setConsumerStreams(prevState => {\n            return { ...prevState,\n              audio: prevState.audio.filter(_consumer => _consumer.id !== consumer._id)\n            };\n          });\n          break;\n\n        default:\n          break;\n      }\n    });\n  };\n\n  const joinRoom = async () => {\n    if (!huddle) return;\n\n    try {\n      setupEventListeners();\n      await huddle.join();\n      console.log(\"post join\", huddle);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const leaveRoom = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.close();\n      setRoomState(false);\n    } catch (error) {\n      alert(error);\n    }\n  }; //TODO: add pauseWebcam() and resumeWebcam()\n\n\n  const enableWebcam = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.enableWebcam();\n      setWebcamState(true);\n    } catch (error) {\n      setWebcamState(false);\n      alert(error);\n    }\n  };\n\n  const disableWebcam = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.disableWebcam();\n      setWebcamState(false);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const startScreenshare = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.enableShare();\n      setScreenshareState(true);\n    } catch (error) {\n      alert(error);\n      setScreenshareState(false);\n    }\n  };\n\n  const stopScreenshare = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.disableShare();\n      setScreenshareState(false);\n    } catch (error) {\n      alert(error);\n    }\n  }; //TODO: add muteMic() and unmuteMic()\n\n\n  const enableMic = async () => {\n    if (!huddle) return;\n\n    try {\n      huddle.enableMic();\n      setMicState(true);\n    } catch (error) {\n      setMicState(false);\n      alert(error);\n    }\n  };\n\n  const disableMic = async () => {\n    if (!huddle) return;\n\n    try {\n      huddle.disableMic();\n      setMicState(false);\n    } catch (error) {\n      alert(error);\n      setMicState(true);\n    }\n  };\n\n  const startRecording = async () => {\n    if (!huddle) return;\n\n    try {\n      const status = await huddle.startRecording();\n      if (status) console.log(\"recording successfully initiated\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const stopRecorder = async () => {\n    if (!huddle) return;\n\n    try {\n      const status = await huddle.stopRecording();\n      if (status) console.log(\"recording successfully stopped\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"me-ports\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        height: \"400px\",\n        width: \"400px\",\n        autoPlay: true,\n        ref: meVideoElem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        height: \"400px\",\n        width: \"400px\",\n        autoPlay: true,\n        ref: meScreenElem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-grp\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        ref: joinRoomBtn,\n        id: \"join-btn\",\n        onClick: roomState === \"connected\" ? leaveRoom : joinRoom,\n        children: roomState === \"connected\" ? \"Leave Room\" : \"Join Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: webcamState ? disableWebcam : enableWebcam,\n        disabled: !isHost,\n        children: webcamState ? \"Disable Webcam\" : \"Enable Webcam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: micState ? disableMic : enableMic,\n        disabled: !isHost,\n        children: micState ? \"Disable Mic\" : \"Enable Mic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: screenshareState ? stopScreenshare : startScreenshare,\n        disabled: !isHost,\n        children: screenshareState ? \"Disable Screenshare\" : \"Enable Screenshare\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"peer-ports\",\n      children: [consumerStreams.video.map((stream, idx) => {\n        return /*#__PURE__*/_jsxDEV(PeerVideo, {\n          videoTrack: getTrack(stream)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 28\n        }, this);\n      }), consumerStreams.screen.map((stream, idx) => {\n        return /*#__PURE__*/_jsxDEV(PeerScreen, {\n          screenTrack: getTrack(stream)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 28\n        }, this);\n      }), consumerStreams.audio.map((stream, idx) => {\n        return /*#__PURE__*/_jsxDEV(PeerAudio, {\n          audioTrack: getTrack(stream)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 28\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Room, \"91ut+a74mVdO5ze1DWuszSQRXaA=\", false, function () {\n  return [useHistory];\n});\n\n_c = Room;\nexport default Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/src/containers/Room.js"],"names":["HuddleClient","emitter","useEffect","useState","useRef","useHistory","getTrack","PeerVideo","PeerAudio","PeerScreen","Room","history","isBot","localStorage","getItem","huddle","setHuddle","roomState","setRoomState","micState","setMicState","webcamState","setWebcamState","screenshareState","setScreenshareState","isHost","setIsHost","hostid","peers","setPeers","consumerStreams","setConsumerStreams","video","audio","screen","meVideoElem","meScreenElem","joinRoomBtn","config","apiKey","roomId","peerId","Math","floor","random","displayName","window","push","myHuddleClient","console","log","_hostId","_peerId","current","click","setupEventListeners","on","state","error","alert","peer","_peers","producer","type","videoStream","track","srcObject","consumer","prevState","screenStream","audioStream","filter","_consumer","id","_id","joinRoom","join","leaveRoom","close","enableWebcam","disableWebcam","startScreenshare","enableShare","stopScreenshare","disableShare","enableMic","disableMic","startRecording","status","stopRecorder","stopRecording","map","stream","idx"],"mappings":";;;AAAA;AACA,OAAOA,YAAP,IAAuBC,OAAvB,QAAsC,iBAAtC,C,CAEA;;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CAEA;;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,4BAAjD;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACZ,QAAMC,OAAO,GAAGN,UAAU,EAA1B,CADY,CAEZ;;AACA,QAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,MAAyC,UAAvD,CAHY,CAIZ;;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACoB,gBAAD,EAAmBC,mBAAnB,IAA0CrB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBvB,QAAQ,CAAC,IAAD,CAApC,CAVY,CAWZ;;AAEA,MAAIwB,MAAM,GAAG,EAAb;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC2B,eAAD,EAAkBC,kBAAlB,IAAwC5B,QAAQ,CAAC;AACnD6B,IAAAA,KAAK,EAAE,EAD4C;AAEnDC,IAAAA,KAAK,EAAE,EAF4C;AAGnDC,IAAAA,MAAM,EAAE;AAH2C,GAAD,CAAtD;AAMA,QAAMC,WAAW,GAAG/B,MAAM,CAAC,IAAD,CAA1B;AACA,QAAMgC,YAAY,GAAGhC,MAAM,CAAC,IAAD,CAA3B;AACA,QAAMiC,WAAW,GAAGjC,MAAM,CAAC,IAAD,CAA1B;AAEA,QAAMkC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,0CADG;AAEXC,IAAAA,MAAM,EAAE,MAFG;AAGXC,IAAAA,MAAM,EAAE,SAASC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAHN;AAIXC,IAAAA,WAAW,EAAE,cAJF;AAKXC,IAAAA,MALW;AAMXlC,IAAAA,KANW,CAMJ;;AANI,GAAf,CAzBY,CAkCZ;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,OAAO,CAACoC,IAAR,CAAc,WAAUT,MAAM,CAACE,MAAO,EAAtC;AAEA,UAAMQ,cAAc,GAAG,IAAIhD,YAAJ,CAAiBsC,MAAjB,CAAvB;AACAtB,IAAAA,SAAS,CAACgC,cAAD,CAAT;AAEH,GANQ,EAMN,EANM,CAAT;AAOA9C,EAAAA,SAAS,CAAC,MAAM;AACZ+C,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BtB,KAA5B;;AACA,QAAGb,MAAH,EAAU;AACNkC,MAAAA,OAAO,CAACC,GAAR,CAAYnC,MAAZ;;AACA,UAAGA,MAAM,CAACoC,OAAV,EAAkB;AACd,YAAGpC,MAAM,CAACoC,OAAP,IAAgBpC,MAAM,CAACqC,OAA1B,EACA;AACI1B,UAAAA,SAAS,CAAC,KAAD,CAAT;AACH;AACJ;AACJ;AAEJ,GAZQ,EAYN,CAACE,KAAD,EAAOb,MAAP,CAZM,CAAT,CA1CY,CAwDZ;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAa,IAAAA,MAAM,IAAIH,KAAV,IAAmByB,WAAW,CAACgB,OAAZ,CAAoBC,KAApB,EAAnB;AACH,GAHQ,EAGN,CAACvC,MAAD,EAASH,KAAT,CAHM,CAAT;;AAKA,QAAM2C,mBAAmB,GAAG,YAAY;AACpCtD,IAAAA,OAAO,CAACuD,EAAR,CAAW,WAAX,EAAyBC,KAAD,IAAW;AAC/B,cAAQA,KAAR;AACI,aAAK,WAAL;AACI;AACA;;AACJ,aAAK,QAAL;AACI;AACA;;AACJ,aAAK,cAAL;AACI;AACA;;AACJ;AACI;AAXR;;AAaAvC,MAAAA,YAAY,CAACuC,KAAD,CAAZ;AACH,KAfD;AAiBAxD,IAAAA,OAAO,CAACuD,EAAR,CAAW,OAAX,EAAqBE,KAAD,IAAW;AAC3BC,MAAAA,KAAK,CAACD,KAAD,CAAL,CAD2B,CAE3B;AACH,KAHD;AAKAzD,IAAAA,OAAO,CAACuD,EAAR,CAAW,SAAX,EAAuBI,IAAD,IAAU;AAC5BX,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BU,IAA3B;AACA/B,MAAAA,QAAQ,CAAEgC,MAAD,IAAY,CAAC,GAAGA,MAAJ,EAAYD,IAAZ,CAAb,CAAR;AACH,KAHD;AAKA3D,IAAAA,OAAO,CAACuD,EAAR,CAAW,aAAX,EAA2BM,QAAD,IAAc;AACpCb,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBY,QAAxB;;AACA,cAAQA,QAAQ,CAACC,IAAjB;AACI,aAAK,QAAL;AACI,cAAIC,WAAW,GAAGF,QAAQ,CAACG,KAA3B;;AACA,cAAI,OAAOD,WAAP,IAAsB,QAA1B,EAAoC;AAChC,gBAAI;AACA7B,cAAAA,WAAW,CAACkB,OAAZ,CAAoBa,SAApB,GAAgC5D,QAAQ,CAAC0D,WAAD,CAAxC;AACH,aAFD,CAEE,OAAON,KAAP,EAAc;AACZT,cAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;AACJ;;AACD;;AACJ,aAAK,KAAL;AACI;AACA;;AACJ,aAAK,QAAL;AACIM,UAAAA,WAAW,GAAGF,QAAQ,CAACG,KAAvB;;AACA,cAAI,OAAOD,WAAP,IAAsB,QAA1B,EAAoC;AAChC,gBAAI;AACA5B,cAAAA,YAAY,CAACiB,OAAb,CAAqBa,SAArB,GAAiC5D,QAAQ,CAAC0D,WAAD,CAAzC;AACH,aAFD,CAEE,OAAON,KAAP,EAAc;AACZT,cAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;AACJ;;AACD;;AAEJ;AACI;AA1BR;AA4BH,KA9BD;AAgCAzD,IAAAA,OAAO,CAACuD,EAAR,CAAW,gBAAX,EAA8BM,QAAD,IAAc;AACvCb,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBY,QAAvB;;AACA,cAAQA,QAAQ,CAACC,IAAjB;AACI,aAAK,QAAL;AACI,cAAI;AACA5B,YAAAA,WAAW,CAACkB,OAAZ,CAAoBa,SAApB,GAAgC,IAAhC;AACH,WAFD,CAEE,OAAOR,KAAP,EAAc;AACZT,YAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;;AACD;;AACJ,aAAK,KAAL;AACI;AACA;;AACJ,aAAK,QAAL;AACI,cAAI;AACAtB,YAAAA,YAAY,CAACiB,OAAb,CAAqBa,SAArB,GAAiC,IAAjC;AACH,WAFD,CAEE,OAAOR,KAAP,EAAc;AACZT,YAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;;AACD;;AAEJ;AACI;AApBR;AAsBH,KAxBD;AA0BAzD,IAAAA,OAAO,CAACuD,EAAR,CAAW,aAAX,EAA2BW,QAAD,IAAc;AACpC,cAAQA,QAAQ,CAACJ,IAAjB;AACI,aAAK,QAAL;AAAe;AACX,kBAAMC,WAAW,GAAGG,QAAQ,CAACF,KAA7B;AACAlC,YAAAA,kBAAkB,CAAEqC,SAAD,KAAgB,EAC/B,GAAGA,SAD4B;AAE/BpC,cAAAA,KAAK,EAAE,CAAC,GAAGoC,SAAS,CAACpC,KAAd,EAAqBgC,WAArB;AAFwB,aAAhB,CAAD,CAAlB;AAKA;AACH;;AAED,aAAK,QAAL;AAAe;AACX,kBAAMK,YAAY,GAAGF,QAAQ,CAACF,KAA9B;AACAlC,YAAAA,kBAAkB,CAAEqC,SAAD,KAAgB,EAC/B,GAAGA,SAD4B;AAE/BlC,cAAAA,MAAM,EAAE,CAAC,GAAGkC,SAAS,CAAClC,MAAd,EAAsBmC,YAAtB;AAFuB,aAAhB,CAAD,CAAlB;AAIA;AACH;;AAED,aAAK,KAAL;AAAY;AACR,kBAAMC,WAAW,GAAGH,QAAQ,CAACF,KAA7B;AACAlC,YAAAA,kBAAkB,CAAEqC,SAAD,KAAgB,EAC/B,GAAGA,SAD4B;AAE/BnC,cAAAA,KAAK,EAAE,CAAC,GAAGmC,SAAS,CAACnC,KAAd,EAAqBqC,WAArB;AAFwB,aAAhB,CAAD,CAAlB;AAKA;AACH;;AAED;AACI;AA/BR;AAiCH,KAlCD;AAoCArE,IAAAA,OAAO,CAACuD,EAAR,CAAW,gBAAX,EAA8BW,QAAD,IAAc;AACvC,cAAQA,QAAQ,CAACJ,IAAjB;AACI,aAAK,QAAL;AACIhC,UAAAA,kBAAkB,CAAEqC,SAAD,IAAe;AAC9B,mBAAO,EACH,GAAGA,SADA;AAEHlC,cAAAA,MAAM,EAAEkC,SAAS,CAAClC,MAAV,CAAiBqC,MAAjB,CACHC,SAAD,IAAeA,SAAS,CAACC,EAAV,KAAiBN,QAAQ,CAACO,GADrC;AAFL,aAAP;AAMH,WAPiB,CAAlB;AAQA;;AACJ,aAAK,QAAL;AACI3C,UAAAA,kBAAkB,CAAEqC,SAAD,IAAe;AAC9B,mBAAO,EACH,GAAGA,SADA;AAEHpC,cAAAA,KAAK,EAAEoC,SAAS,CAACpC,KAAV,CAAgBuC,MAAhB,CACFC,SAAD,IAAeA,SAAS,CAACC,EAAV,KAAiBN,QAAQ,CAACO,GADtC;AAFJ,aAAP;AAMH,WAPiB,CAAlB;AAQA;;AACJ,aAAK,KAAL;AACI3C,UAAAA,kBAAkB,CAAEqC,SAAD,IAAe;AAC9B,mBAAO,EACH,GAAGA,SADA;AAEHnC,cAAAA,KAAK,EAAEmC,SAAS,CAACnC,KAAV,CAAgBsC,MAAhB,CACFC,SAAD,IAAeA,SAAS,CAACC,EAAV,KAAiBN,QAAQ,CAACO,GADtC;AAFJ,aAAP;AAMH,WAPiB,CAAlB;AAQA;;AAEJ;AACI;AAjCR;AAmCH,KApCD;AAqCH,GA/JD;;AAiKA,QAAMC,QAAQ,GAAG,YAAY;AAEzB,QAAI,CAAC5D,MAAL,EACG;;AACH,QAAI;AACAwC,MAAAA,mBAAmB;AACnB,YAAMxC,MAAM,CAAC6D,IAAP,EAAN;AACA3B,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBnC,MAAxB;AACH,KAJD,CAIE,OAAO2C,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GAXD;;AAaA,QAAMmB,SAAS,GAAG,YAAY;AAE1B,QAAI,CAAC9D,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAAC+D,KAAP,EAAN;AACA5D,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAHD,CAGE,OAAOwC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GATD,CA5OY,CAuPZ;;;AACA,QAAMqB,YAAY,GAAG,YAAY;AAC7B,QAAI,CAAChE,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAACgE,YAAP,EAAN;AACAzD,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAHD,CAGE,OAAOoC,KAAP,EAAc;AACZpC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAqC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GATD;;AAWA,QAAMsB,aAAa,GAAG,YAAY;AAC9B,QAAI,CAACjE,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAACiE,aAAP,EAAN;AACA1D,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH,KAHD,CAGE,OAAOoC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GARD;;AAUA,QAAMuB,gBAAgB,GAAG,YAAY;AACjC,QAAI,CAAClE,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAACmE,WAAP,EAAN;AACA1D,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,KAHD,CAGE,OAAOkC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACAlC,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH;AACJ,GATD;;AAWA,QAAM2D,eAAe,GAAG,YAAY;AAChC,QAAI,CAACpE,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAACqE,YAAP,EAAN;AACA5D,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH,KAHD,CAGE,OAAOkC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GARD,CAxRY,CAkSZ;;;AACA,QAAM2B,SAAS,GAAG,YAAY;AAC1B,QAAI,CAACtE,MAAL,EAAa;;AACb,QAAI;AACAA,MAAAA,MAAM,CAACsE,SAAP;AACAjE,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KAHD,CAGE,OAAOsC,KAAP,EAAc;AACZtC,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAuC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GATD;;AAWA,QAAM4B,UAAU,GAAG,YAAY;AAC3B,QAAI,CAACvE,MAAL,EAAa;;AACb,QAAI;AACAA,MAAAA,MAAM,CAACuE,UAAP;AACAlE,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH,KAHD,CAGE,OAAOsC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACAtC,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ,GATD;;AAWA,QAAMmE,cAAc,GAAG,YAAY;AAC/B,QAAI,CAACxE,MAAL,EAAa;;AACb,QAAI;AACA,YAAMyE,MAAM,GAAG,MAAMzE,MAAM,CAACwE,cAAP,EAArB;AACA,UAAIC,MAAJ,EAAYvC,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACf,KAHD,CAGE,OAAOQ,KAAP,EAAc;AACZT,MAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;AACJ,GARD;;AAUA,QAAM+B,YAAY,GAAG,YAAY;AAC7B,QAAI,CAAC1E,MAAL,EAAa;;AACb,QAAI;AACA,YAAMyE,MAAM,GAAG,MAAMzE,MAAM,CAAC2E,aAAP,EAArB;AACA,UAAIF,MAAJ,EAAYvC,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACf,KAHD,CAGE,OAAOQ,KAAP,EAAc;AACZT,MAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;AACJ,GARD;;AAUA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAO,QAAA,MAAM,EAAC,OAAd;AAAsB,QAAA,KAAK,EAAC,OAA5B;AAAoC,QAAA,QAAQ,MAA5C;AAA6C,QAAA,GAAG,EAAEvB;AAAlD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,MAAM,EAAC,OAAd;AAAsB,QAAA,KAAK,EAAC,OAA5B;AAAoC,QAAA,QAAQ,MAA5C;AAA6C,QAAA,GAAG,EAAEC;AAAlD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AACI,QAAA,GAAG,EAAEC,WADT;AAEI,QAAA,EAAE,EAAC,UAFP;AAGI,QAAA,OAAO,EAAEpB,SAAS,KAAK,WAAd,GAA4B4D,SAA5B,GAAwCF,QAHrD;AAAA,kBAKK1D,SAAS,KAAK,WAAd,GAA4B,YAA5B,GAA2C;AALhD;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAQ,QAAA,OAAO,EAAEI,WAAW,GAAG2D,aAAH,GAAmBD,YAA/C;AAA6D,QAAA,QAAQ,EAAE,CAACtD,MAAxE;AAAA,kBACKJ,WAAW,GAAG,gBAAH,GAAsB;AADtC;AAAA;AAAA;AAAA;AAAA,cATJ,eAYI;AAAQ,QAAA,OAAO,EAAEF,QAAQ,GAAGmE,UAAH,GAAgBD,SAAzC;AAAoD,QAAA,QAAQ,EAAE,CAAC5D,MAA/D;AAAA,kBACKN,QAAQ,GAAG,aAAH,GAAmB;AADhC;AAAA;AAAA;AAAA;AAAA,cAZJ,eAeI;AAAQ,QAAA,OAAO,EAAEI,gBAAgB,GAAG4D,eAAH,GAAqBF,gBAAtD;AAAwE,QAAA,QAAQ,EAAE,CAACxD,MAAnF;AAAA,kBACKF,gBAAgB,GAAG,qBAAH,GAA2B;AADhD;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eA0BI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,iBACKO,eAAe,CAACE,KAAhB,CAAsB2D,GAAtB,CAA0B,CAACC,MAAD,EAASC,GAAT,KAAiB;AACxC,4BAAO,QAAC,SAAD;AAAqB,UAAA,UAAU,EAAEvF,QAAQ,CAACsF,MAAD;AAAzC,WAAgBC,GAAhB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA,CADL,EAIK/D,eAAe,CAACI,MAAhB,CAAuByD,GAAvB,CAA2B,CAACC,MAAD,EAASC,GAAT,KAAiB;AACzC,4BAAO,QAAC,UAAD;AAAsB,UAAA,WAAW,EAAEvF,QAAQ,CAACsF,MAAD;AAA3C,WAAiBC,GAAjB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA,CAJL,EAOK/D,eAAe,CAACG,KAAhB,CAAsB0D,GAAtB,CAA0B,CAACC,MAAD,EAASC,GAAT,KAAiB;AACxC,4BAAO,QAAC,SAAD;AAAqB,UAAA,UAAU,EAAEvF,QAAQ,CAACsF,MAAD;AAAzC,WAAgBC,GAAhB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA,CAPL;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCH;;GArXQnF,I;UACWL,U;;;KADXK,I;AAuXT,eAAeA,IAAf","sourcesContent":["//client sdk import\nimport HuddleClient, { emitter } from \"huddle01-client\";\n\n//react imports\nimport { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n//helper imports\nimport { getTrack } from \"../lib/utils/helpers\";\nimport { PeerVideo, PeerAudio, PeerScreen } from \"../components/PeerViewPort\";\n\nfunction Room() {\n    const history = useHistory();\n    //to allow for recordings\n    const isBot = localStorage.getItem(\"bot_password\") === \"huddle01\";\n    //initialising states\n    const [huddle, setHuddle] = useState(null);\n    const [roomState, setRoomState] = useState(false);\n    const [micState, setMicState] = useState(false);\n    const [webcamState, setWebcamState] = useState(false);\n    const [screenshareState, setScreenshareState] = useState(false);\n    const [isHost, setIsHost] = useState(true);\n    //const [HostId, setHostId]=useState('');\n\n    let hostid = \"\";\n    const [peers, setPeers] = useState([]);\n    const [consumerStreams, setConsumerStreams] = useState({\n        video: [],\n        audio: [],\n        screen: [],\n    });\n\n    const meVideoElem = useRef(null);\n    const meScreenElem = useRef(null);\n    const joinRoomBtn = useRef(null);\n\n    const config = {\n        apiKey: \"i4pzqbpxza8vpijQMwZsP1H7nZZEH0TN3vR4NdNS\",\n        roomId: \"C131\",\n        peerId: \"Rick\" + Math.floor(Math.random() * 4000),\n        displayName: \"Rick Sanchez\",\n        window,\n        isBot, // true/false -- gets calculated on line 15\n    };\n\n    //initialize the app\n    useEffect(() => {\n        history.push(`?roomId=${config.roomId}`);\n\n        const myHuddleClient = new HuddleClient(config);\n        setHuddle(myHuddleClient);\n       \n    }, []);\n    useEffect(() => {\n        console.log(\"peers array \", peers);\n        if(huddle){\n            console.log(huddle);\n            if(huddle._hostId){\n                if(huddle._hostId!=huddle._peerId)\n                {\n                    setIsHost(false);\n                }\n            }\n        }\n        \n    }, [peers,huddle]);\n\n    //recording config\n    useEffect(() => {\n        //joinRoomBtn here can be whatever button/function used that calls `huddle.join()`\n        huddle && isBot && joinRoomBtn.current.click();\n    }, [huddle, isBot]);\n\n    const setupEventListeners = async () => {\n        emitter.on(\"roomState\", (state) => {\n            switch (state) {\n                case \"connected\":\n                    //do whatever\n                    break;\n                case \"failed\":\n                    //do whatever\n                    break;\n                case \"disconnected\":\n                    //do whatever\n                    break;\n                default:\n                    break;\n            }\n            setRoomState(state);\n        });\n\n        emitter.on(\"error\", (error) => {\n            alert(error);\n            //do whatever\n        });\n\n        emitter.on(\"addPeer\", (peer) => {\n            console.log(\"new peer =>\", peer);\n            setPeers((_peers) => [..._peers, peer]);\n        });\n\n        emitter.on(\"addProducer\", (producer) => {\n            console.log(\"new prod\", producer);\n            switch (producer.type) {\n                case \"webcam\":\n                    let videoStream = producer.track;\n                    if (typeof videoStream == \"object\") {\n                        try {\n                            meVideoElem.current.srcObject = getTrack(videoStream);\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    }\n                    break;\n                case \"mic\":\n                    //do whatever\n                    break;\n                case \"screen\":\n                    videoStream = producer.track;\n                    if (typeof videoStream == \"object\") {\n                        try {\n                            meScreenElem.current.srcObject = getTrack(videoStream);\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        emitter.on(\"removeProducer\", (producer) => {\n            console.log(\"remove \", producer);\n            switch (producer.type) {\n                case \"webcam\":\n                    try {\n                        meVideoElem.current.srcObject = null;\n                    } catch (error) {\n                        console.error(error);\n                    }\n                    break;\n                case \"mic\":\n                    //do whatever\n                    break;\n                case \"screen\":\n                    try {\n                        meScreenElem.current.srcObject = null;\n                    } catch (error) {\n                        console.error(error);\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        emitter.on(\"addConsumer\", (consumer) => {\n            switch (consumer.type) {\n                case \"webcam\": {\n                    const videoStream = consumer.track;\n                    setConsumerStreams((prevState) => ({\n                        ...prevState,\n                        video: [...prevState.video, videoStream],\n                    }));\n\n                    break;\n                }\n\n                case \"screen\": {\n                    const screenStream = consumer.track;\n                    setConsumerStreams((prevState) => ({\n                        ...prevState,\n                        screen: [...prevState.screen, screenStream],\n                    }));\n                    break;\n                }\n\n                case \"mic\": {\n                    const audioStream = consumer.track;\n                    setConsumerStreams((prevState) => ({\n                        ...prevState,\n                        audio: [...prevState.audio, audioStream],\n                    }));\n\n                    break;\n                }\n\n                default:\n                    break;\n            }\n        });\n\n        emitter.on(\"removeConsumer\", (consumer) => {\n            switch (consumer.type) {\n                case \"screen\":\n                    setConsumerStreams((prevState) => {\n                        return {\n                            ...prevState,\n                            screen: prevState.screen.filter(\n                                (_consumer) => _consumer.id !== consumer._id\n                            ),\n                        };\n                    });\n                    break;\n                case \"webcam\":\n                    setConsumerStreams((prevState) => {\n                        return {\n                            ...prevState,\n                            video: prevState.video.filter(\n                                (_consumer) => _consumer.id !== consumer._id\n                            ),\n                        };\n                    });\n                    break;\n                case \"mic\":\n                    setConsumerStreams((prevState) => {\n                        return {\n                            ...prevState,\n                            audio: prevState.audio.filter(\n                                (_consumer) => _consumer.id !== consumer._id\n                            ),\n                        };\n                    });\n                    break;\n\n                default:\n                    break;\n            }\n        });\n    };\n\n    const joinRoom = async () => {\n        \n        if (!huddle) \n           return;\n        try {\n            setupEventListeners();\n            await huddle.join();\n            console.log(\"post join\",huddle);\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    const leaveRoom = async () => {\n\n        if (!huddle) return;\n        try {\n            await huddle.close();\n            setRoomState(false);\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    //TODO: add pauseWebcam() and resumeWebcam()\n    const enableWebcam = async () => {\n        if (!huddle) return;\n        try {\n            await huddle.enableWebcam();\n            setWebcamState(true);\n        } catch (error) {\n            setWebcamState(false);\n            alert(error);\n        }\n    };\n\n    const disableWebcam = async () => {\n        if (!huddle) return;\n        try {\n            await huddle.disableWebcam();\n            setWebcamState(false);\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    const startScreenshare = async () => {\n        if (!huddle) return;\n        try {\n            await huddle.enableShare();\n            setScreenshareState(true);\n        } catch (error) {\n            alert(error);\n            setScreenshareState(false);\n        }\n    };\n\n    const stopScreenshare = async () => {\n        if (!huddle) return;\n        try {\n            await huddle.disableShare();\n            setScreenshareState(false);\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    //TODO: add muteMic() and unmuteMic()\n    const enableMic = async () => {\n        if (!huddle) return;\n        try {\n            huddle.enableMic();\n            setMicState(true);\n        } catch (error) {\n            setMicState(false);\n            alert(error);\n        }\n    };\n\n    const disableMic = async () => {\n        if (!huddle) return;\n        try {\n            huddle.disableMic();\n            setMicState(false);\n        } catch (error) {\n            alert(error);\n            setMicState(true);\n        }\n    };\n\n    const startRecording = async () => {\n        if (!huddle) return;\n        try {\n            const status = await huddle.startRecording();\n            if (status) console.log(\"recording successfully initiated\");\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const stopRecorder = async () => {\n        if (!huddle) return;\n        try {\n            const status = await huddle.stopRecording();\n            if (status) console.log(\"recording successfully stopped\");\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"me-ports\">\n                <video height=\"400px\" width=\"400px\" autoPlay ref={meVideoElem} />\n                <video height=\"400px\" width=\"400px\" autoPlay ref={meScreenElem} />\n            </div>\n            <div className=\"btn-grp\">\n                <button\n                    ref={joinRoomBtn}\n                    id=\"join-btn\"\n                    onClick={roomState === \"connected\" ? leaveRoom : joinRoom}\n                >\n                    {roomState === \"connected\" ? \"Leave Room\" : \"Join Room\"}\n                </button>\n                { }\n                <button onClick={webcamState ? disableWebcam : enableWebcam} disabled={!isHost}>\n                    {webcamState ? \"Disable Webcam\" : \"Enable Webcam\"}\n                </button>\n                <button onClick={micState ? disableMic : enableMic} disabled={!isHost}>\n                    {micState ? \"Disable Mic\" : \"Enable Mic\"}\n                </button>\n                <button onClick={screenshareState ? stopScreenshare : startScreenshare} disabled={!isHost}>\n                    {screenshareState ? \"Disable Screenshare\" : \"Enable Screenshare\"}\n                </button>\n                {/* <button onClick={toggleWebcam}>Toggle Webcam</button> */}\n            </div>\n\n            <div className=\"peer-ports\">\n                {consumerStreams.video.map((stream, idx) => {\n                    return <PeerVideo key={idx} videoTrack={getTrack(stream)} />;\n                })}\n                {consumerStreams.screen.map((stream, idx) => {\n                    return <PeerScreen key={idx} screenTrack={getTrack(stream)} />;\n                })}\n                {consumerStreams.audio.map((stream, idx) => {\n                    return <PeerAudio key={idx} audioTrack={getTrack(stream)} />;\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default Room;\n\n\n"]},"metadata":{},"sourceType":"module"}