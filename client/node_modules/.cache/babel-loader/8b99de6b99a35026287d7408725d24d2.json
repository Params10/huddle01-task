{"ast":null,"code":"// Consistent with Lattice's IV\nconst AES_IV = [0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64];\nconst ADDR_STR_LEN = 129; // 128-char strings (null terminated)\n// Decrypted response lengths will be fixed for any given message type.\n// These are defined in the Lattice spec.\n// Every decrypted response should have a 65-byte pubkey prefixing it (and a 4-byte request ID)\n// These are NOT counted in `decResLengths`, meaning these values are 69-bytes smaller than the\n// corresponding structs in firmware.\n\nconst decResLengths = {\n  finalizePair: 0,\n  // Only contains the pubkey\n  getAddresses: 10 * ADDR_STR_LEN,\n  // 10x 129 byte strings (128 bytes + null terminator)\n  sign: 1090,\n  // 1 DER signature for ETH, 10 for BTC + change pubkeyhash\n  getWallets: 142,\n  // 71 bytes per wallet record (response contains internal and external)\n  addAbiDefs: 8,\n  test: 1646 // Max size of test response payload\n\n}; // Every corresponding decrypted response struct in firmware has a pubkey\n// and checksum added. These are not included in `decResLengths`\n\nconst DES_RES_EXTRADATA_LEN = 69; // Encrypted responses also have metadata\n// Prefix:\n// * protocol version (1 byte)\n// * response type, reserved (1 byte) -- not used\n// * response id (4 bytes) -- not used\n// * payload length (2 bytes)\n// * response code (1 byte)\n// Suffix:\n// * checksum (4 bytes) -- NOT the same checksum as inside the decrypted msg\n\nconst ENC_MSG_METADATA_LEN = 13;\nconst ENC_MSG_EXTRA_LEN = DES_RES_EXTRADATA_LEN + ENC_MSG_METADATA_LEN; // Per Lattice spec, all encrypted messages must fit in a buffer of this size.\n// The length comes from the largest request/response data type size\n// We also add the prefix length\n\nlet ENC_MSG_LEN = 0;\nObject.keys(decResLengths).forEach(k => {\n  if (decResLengths[k] + ENC_MSG_EXTRA_LEN > ENC_MSG_LEN) ENC_MSG_LEN = decResLengths[k] + ENC_MSG_EXTRA_LEN;\n});\nconst deviceCodes = {\n  'CONNECT': 1,\n  'ENCRYPTED_REQUEST': 2\n};\nconst encReqCodes = {\n  'FINALIZE_PAIRING': 0x00,\n  'GET_ADDRESSES': 0x01,\n  'ADD_PERMISSION': 0x02,\n  'SIGN_TRANSACTION': 0x03,\n  'GET_WALLETS': 0x04,\n  'ADD_PERMISSION_V0': 0x05,\n  'ADD_ABI_DEFS': 0x06,\n  'TEST': 0x07\n};\nconst messageConstants = {\n  'NOT_PAIRED': 0x00,\n  'PAIRED': 0x01\n};\nconst addressSizes = {\n  'BTC': 20,\n  // 20 byte pubkeyhash\n  'ETH': 20 // 20 byte address not including 0x prefix\n\n};\nconst responseCodes = {\n  RESP_SUCCESS: 0x00,\n  RESP_ERR_INVALID_MSG: 0x80,\n  RESP_ERR_UNSUPPORTED_VER: 0x81,\n  RESP_ERR_DEV_BUSY: 0x82,\n  RESP_ERR_USER_TIMEOUT: 0x83,\n  RESP_ERR_USER_DECLINED: 0x84,\n  RESP_ERR_PAIR_FAIL: 0x85,\n  RESP_ERR_PAIR_DISABLED: 0x86,\n  RESP_ERR_PERMISSION_DISABLED: 0x87,\n  RESP_ERR_INTERNAL: 0x88,\n  RESP_ERR_GCE_TIMEOUT: 0x89,\n  RESP_ERR_WALLET_NOT_PRESENT: 0x8a,\n  RESP_ERR_DEV_LOCKED: 0x8b,\n  RESP_ERR_DISABLED: 0x8c,\n  RESP_ERR_ALREADY: 0x8d\n};\nconst responseMsgs = {\n  [responseCodes.RESP_SUCCESS]: 0x00,\n  [responseCodes.RESP_ERR_INVALID_MSG]: 'Invalid Request',\n  [responseCodes.RESP_ERR_UNSUPPORTED_VER]: 'Unsupported Version',\n  [responseCodes.RESP_ERR_DEV_BUSY]: 'Device Busy',\n  [responseCodes.RESP_ERR_USER_TIMEOUT]: 'Timeout Waiting for User',\n  [responseCodes.RESP_ERR_USER_DECLINED]: 'Request Declined by User',\n  [responseCodes.RESP_ERR_PAIR_FAIL]: 'Pairing Failed',\n  [responseCodes.RESP_ERR_PAIR_DISABLED]: 'Pairing is Currently Disabled',\n  [responseCodes.RESP_ERR_PERMISSION_DISABLED]: 'Automated Signing is Currently Disabled',\n  [responseCodes.RESP_ERR_INTERNAL]: 'Device Error',\n  [responseCodes.RESP_ERR_GCE_TIMEOUT]: 'Timeout',\n  [responseCodes.RESP_ERR_WALLET_NOT_PRESENT]: 'Incorrect Wallet UID Provided',\n  [responseCodes.RESP_ERR_DEV_LOCKED]: 'Device Locked',\n  [responseCodes.RESP_ERR_DISABLED]: 'Disabled',\n  [responseCodes.RESP_ERR_ALREADY]: 'Record already exists. You must first remove it on your device.'\n};\nconst signingSchema = {\n  BTC_TRANSFER: 0,\n  ETH_TRANSFER: 1,\n  ERC20_TRANSFER: 2,\n  ETH_MSG: 3,\n  EXTRA_DATA: 4\n};\nconst REQUEST_TYPE_BYTE = 0x02; // For all HSM-bound requests\n\nconst VERSION_BYTE = 1;\nconst HARDENED_OFFSET = 0x80000000; // Hardened offset\n\nconst HANDLE_LARGER_CHAIN_ID = 255; // ChainId value to signify larger chainID is in data buffer\n\nconst MAX_CHAIN_ID_BYTES = 8; // Max number of bytes to contain larger chainID in data buffer\n\nconst BASE_URL = 'https://signing.gridpl.us';\nconst EIP712_ABI_LATTICE_FW_TYPE_MAP = {\n  'address': 1,\n  'bool': 2,\n  'uint8': 3,\n  'uint16': 4,\n  'uint24': 5,\n  'uint32': 6,\n  'uint40': 7,\n  'uint48': 8,\n  'uint56': 9,\n  'uint64': 10,\n  'uint72': 11,\n  'uint80': 12,\n  'uint88': 13,\n  'uint96': 14,\n  'uint104': 15,\n  'uint112': 16,\n  'uint120': 17,\n  'uint128': 18,\n  'uint136': 19,\n  'uint144': 20,\n  'uint152': 21,\n  'uint160': 22,\n  'uint168': 23,\n  'uint176': 24,\n  'uint184': 25,\n  'uint192': 26,\n  'uint200': 27,\n  'uint208': 28,\n  'uint216': 29,\n  'uint224': 30,\n  'uint232': 31,\n  'uint240': 32,\n  'uint248': 33,\n  'uint256': 34,\n  'int8': 35,\n  'int16': 36,\n  'int24': 37,\n  'int32': 38,\n  'int40': 39,\n  'int48': 40,\n  'int56': 41,\n  'int64': 42,\n  'int72': 43,\n  'int80': 44,\n  'int88': 45,\n  'int96': 46,\n  'int104': 47,\n  'int112': 48,\n  'int120': 49,\n  'int128': 50,\n  'int136': 51,\n  'int144': 52,\n  'int152': 53,\n  'int160': 54,\n  'int168': 55,\n  'int176': 56,\n  'int184': 57,\n  'int192': 58,\n  'int200': 59,\n  'int208': 60,\n  'int216': 61,\n  'int224': 62,\n  'int232': 63,\n  'int240': 64,\n  'int248': 65,\n  'int256': 66,\n  'uint': 67,\n  'bytes1': 69,\n  'bytes2': 70,\n  'bytes3': 71,\n  'bytes4': 72,\n  'bytes5': 73,\n  'bytes6': 74,\n  'bytes7': 75,\n  'bytes8': 76,\n  'bytes9': 77,\n  'bytes10': 78,\n  'bytes11': 79,\n  'bytes12': 80,\n  'bytes13': 81,\n  'bytes14': 82,\n  'bytes15': 83,\n  'bytes16': 84,\n  'bytes17': 85,\n  'bytes18': 86,\n  'bytes19': 87,\n  'bytes20': 88,\n  'bytes21': 89,\n  'bytes22': 90,\n  'bytes23': 91,\n  'bytes24': 92,\n  'bytes25': 93,\n  'bytes26': 94,\n  'bytes27': 95,\n  'bytes28': 96,\n  'bytes29': 97,\n  'bytes30': 98,\n  'bytes31': 99,\n  'bytes32': 100,\n  'bytes': 101,\n  'string': 102\n};\nconst ETH_ABI_LATTICE_FW_TYPE_MAP = { ...EIP712_ABI_LATTICE_FW_TYPE_MAP,\n  'tuple1': 103,\n  'tuple2': 104,\n  'tuple3': 105,\n  'tuple4': 106,\n  'tuple5': 107,\n  'tuple6': 108,\n  'tuple7': 109,\n  'tuple8': 110,\n  'tuple9': 111,\n  'tuple10': 112,\n  'tuple11': 113,\n  'tuple12': 114,\n  'tuple13': 115,\n  'tuple14': 116,\n  'tuple15': 117,\n  'tuple16': 118,\n  'tuple17': 119 // Firmware currently cannot support tuples larger than this\n\n};\nconst ethMsgProtocol = {\n  SIGN_PERSONAL: {\n    str: 'signPersonal',\n    enumIdx: 0 // Enum index of this protocol in Lattice firmware\n\n  },\n  TYPED_DATA: {\n    str: 'typedData',\n    enumIdx: 1,\n    rawDataMaxLen: 1629,\n    // Max size of raw data payload in bytes\n    typeCodes: EIP712_ABI_LATTICE_FW_TYPE_MAP // Enum indices of data types in Lattice firmware\n\n  }\n};\n\nfunction getFwVersionConst(v) {\n  const c = {\n    extraDataFrameSz: 0,\n    extraDataMaxFrames: 0\n  };\n\n  function gte(v, exp) {\n    // Note that `v` fields come in as [fix|minor|major]\n    return v[2] > exp[0] || v[2] === exp[0] && v[1] > exp[1] || v[2] === exp[0] && v[1] === exp[1] && v[0] > exp[2] || v[2] === exp[0] && v[1] === exp[1] && v[0] === exp[2];\n  } // Very old legacy versions do not give a version number\n\n\n  const legacy = v.length === 0; // V0.10.10 allows a user to sign a prehashed ETH message if payload too big\n\n  if (!legacy && gte(v, [0, 10, 10])) {\n    c.ethMsgPreHashAllowed = true;\n  } // V0.10.8 allows a user to sign a prehashed transaction if the payload\n  // is too big\n\n\n  if (!legacy && gte(v, [0, 10, 8])) {\n    c.prehashAllowed = true;\n  } // V0.10.5 added the ability to use flexible address path sizes, which\n  // changes the `getAddress` API. It also added support for EIP712\n\n\n  if (!legacy && gte(v, [0, 10, 5])) {\n    c.varAddrPathSzAllowed = true;\n    c.eip712Supported = true;\n  } // V0.10.4 introduced the ability to send signing requests over multiple\n  // data frames (i.e. in multiple requests)\n\n\n  if (!legacy && gte(v, [0, 10, 4])) {\n    c.extraDataFrameSz = 1500; // 1500 bytes per frame of extraData allowed\n\n    c.extraDataMaxFrames = 1; // 1 frame of extraData allowed\n  } // Various size constants have changed on the firmware side over time and\n  // are captured here\n\n\n  if (!legacy && gte(v, [0, 10, 4])) {\n    // >=0.10.3\n    c.reqMaxDataSz = 1678;\n    c.ethMaxDataSz = c.reqMaxDataSz - 128;\n    c.ethMaxMsgSz = c.ethMaxDataSz;\n    c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n\n    c.addrFlagsAllowed = true;\n  } else if (!legacy && gte(v, [0, 10, 0])) {\n    // >=0.10.0\n    c.reqMaxDataSz = 1678;\n    c.ethMaxDataSz = c.reqMaxDataSz - 128;\n    c.ethMaxMsgSz = c.ethMaxDataSz;\n    c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n\n    c.addrFlagsAllowed = true;\n  } else {\n    // Legacy or <0.10.0\n    c.reqMaxDataSz = 1152;\n    c.ethMaxDataSz = c.reqMaxDataSz - 128;\n    c.ethMaxMsgSz = c.ethMaxDataSz;\n    c.ethMaxGasPrice = 500000000000; // 500 gwei\n\n    c.addrFlagsAllowed = false;\n  }\n\n  return c;\n}\n\nmodule.exports = {\n  getFwVersionConst,\n  ADDR_STR_LEN,\n  AES_IV,\n  BASE_URL,\n  ENC_MSG_LEN,\n  addressSizes,\n  decResLengths,\n  deviceCodes,\n  encReqCodes,\n  ethMsgProtocol,\n  messageConstants,\n  responseCodes,\n  responseMsgs,\n  signingSchema,\n  REQUEST_TYPE_BYTE,\n  VERSION_BYTE,\n  HARDENED_OFFSET,\n  HANDLE_LARGER_CHAIN_ID,\n  MAX_CHAIN_ID_BYTES,\n  ETH_ABI_LATTICE_FW_TYPE_MAP\n};","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/gridplus-sdk/src/constants.js"],"names":["AES_IV","ADDR_STR_LEN","decResLengths","finalizePair","getAddresses","sign","getWallets","addAbiDefs","test","DES_RES_EXTRADATA_LEN","ENC_MSG_METADATA_LEN","ENC_MSG_EXTRA_LEN","ENC_MSG_LEN","Object","keys","forEach","k","deviceCodes","encReqCodes","messageConstants","addressSizes","responseCodes","RESP_SUCCESS","RESP_ERR_INVALID_MSG","RESP_ERR_UNSUPPORTED_VER","RESP_ERR_DEV_BUSY","RESP_ERR_USER_TIMEOUT","RESP_ERR_USER_DECLINED","RESP_ERR_PAIR_FAIL","RESP_ERR_PAIR_DISABLED","RESP_ERR_PERMISSION_DISABLED","RESP_ERR_INTERNAL","RESP_ERR_GCE_TIMEOUT","RESP_ERR_WALLET_NOT_PRESENT","RESP_ERR_DEV_LOCKED","RESP_ERR_DISABLED","RESP_ERR_ALREADY","responseMsgs","signingSchema","BTC_TRANSFER","ETH_TRANSFER","ERC20_TRANSFER","ETH_MSG","EXTRA_DATA","REQUEST_TYPE_BYTE","VERSION_BYTE","HARDENED_OFFSET","HANDLE_LARGER_CHAIN_ID","MAX_CHAIN_ID_BYTES","BASE_URL","EIP712_ABI_LATTICE_FW_TYPE_MAP","ETH_ABI_LATTICE_FW_TYPE_MAP","ethMsgProtocol","SIGN_PERSONAL","str","enumIdx","TYPED_DATA","rawDataMaxLen","typeCodes","getFwVersionConst","v","c","extraDataFrameSz","extraDataMaxFrames","gte","exp","legacy","length","ethMsgPreHashAllowed","prehashAllowed","varAddrPathSzAllowed","eip712Supported","reqMaxDataSz","ethMaxDataSz","ethMaxMsgSz","ethMaxGasPrice","addrFlagsAllowed","module","exports"],"mappings":"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","sourcesContent":["// Consistent with Lattice's IV\nconst AES_IV = [0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64]\n\nconst ADDR_STR_LEN = 129; // 128-char strings (null terminated)\n\n// Decrypted response lengths will be fixed for any given message type.\n// These are defined in the Lattice spec.\n// Every decrypted response should have a 65-byte pubkey prefixing it (and a 4-byte request ID)\n// These are NOT counted in `decResLengths`, meaning these values are 69-bytes smaller than the\n// corresponding structs in firmware.\nconst decResLengths = {\n    finalizePair: 0,                    // Only contains the pubkey\n    getAddresses: 10 * ADDR_STR_LEN,    // 10x 129 byte strings (128 bytes + null terminator)\n    sign: 1090,                         // 1 DER signature for ETH, 10 for BTC + change pubkeyhash\n    getWallets: 142,                    // 71 bytes per wallet record (response contains internal and external)\n    addAbiDefs: 8,\n    test: 1646                          // Max size of test response payload\n}\n\n// Every corresponding decrypted response struct in firmware has a pubkey\n// and checksum added. These are not included in `decResLengths`\nconst DES_RES_EXTRADATA_LEN = 69; \n\n// Encrypted responses also have metadata\n// Prefix:\n// * protocol version (1 byte)\n// * response type, reserved (1 byte) -- not used\n// * response id (4 bytes) -- not used\n// * payload length (2 bytes)\n// * response code (1 byte)\n// Suffix:\n// * checksum (4 bytes) -- NOT the same checksum as inside the decrypted msg\nconst ENC_MSG_METADATA_LEN = 13;\n\nconst ENC_MSG_EXTRA_LEN = DES_RES_EXTRADATA_LEN + ENC_MSG_METADATA_LEN;\n// Per Lattice spec, all encrypted messages must fit in a buffer of this size.\n// The length comes from the largest request/response data type size\n// We also add the prefix length\nlet ENC_MSG_LEN = 0;\nObject.keys(decResLengths).forEach((k) => {\n    if (decResLengths[k] + ENC_MSG_EXTRA_LEN > ENC_MSG_LEN)\n        ENC_MSG_LEN = decResLengths[k] + ENC_MSG_EXTRA_LEN;\n})\n  \nconst deviceCodes = {\n    'CONNECT': 1,\n    'ENCRYPTED_REQUEST': 2,\n}\n\nconst encReqCodes = {\n    'FINALIZE_PAIRING': 0x00,\n    'GET_ADDRESSES': 0x01,\n    'ADD_PERMISSION': 0x02,\n    'SIGN_TRANSACTION': 0x03,\n    'GET_WALLETS': 0x04,\n    'ADD_PERMISSION_V0': 0x05,\n    'ADD_ABI_DEFS': 0x06,\n    'TEST': 0x07,\n}\n\nconst messageConstants = {\n    'NOT_PAIRED': 0x00,\n    'PAIRED': 0x01,\n}\n\nconst addressSizes = {\n    'BTC': 20,  // 20 byte pubkeyhash\n    'ETH': 20,  // 20 byte address not including 0x prefix\n}\n  \nconst responseCodes = {\n    RESP_SUCCESS: 0x00,\n    RESP_ERR_INVALID_MSG: 0x80,\n    RESP_ERR_UNSUPPORTED_VER: 0x81,\n    RESP_ERR_DEV_BUSY: 0x82,\n    RESP_ERR_USER_TIMEOUT: 0x83,\n    RESP_ERR_USER_DECLINED: 0x84,\n    RESP_ERR_PAIR_FAIL: 0x85,\n    RESP_ERR_PAIR_DISABLED: 0x86,\n    RESP_ERR_PERMISSION_DISABLED: 0x87,\n    RESP_ERR_INTERNAL: 0x88,\n    RESP_ERR_GCE_TIMEOUT: 0x89,\n    RESP_ERR_WALLET_NOT_PRESENT: 0x8a,\n    RESP_ERR_DEV_LOCKED: 0x8b,\n    RESP_ERR_DISABLED: 0x8c,\n    RESP_ERR_ALREADY: 0x8d,\n}\n\nconst responseMsgs = {\n    [responseCodes.RESP_SUCCESS]: 0x00,\n    [responseCodes.RESP_ERR_INVALID_MSG]: 'Invalid Request',\n    [responseCodes.RESP_ERR_UNSUPPORTED_VER]: 'Unsupported Version',\n    [responseCodes.RESP_ERR_DEV_BUSY]: 'Device Busy',\n    [responseCodes.RESP_ERR_USER_TIMEOUT]: 'Timeout Waiting for User',\n    [responseCodes.RESP_ERR_USER_DECLINED]: 'Request Declined by User',\n    [responseCodes.RESP_ERR_PAIR_FAIL]: 'Pairing Failed',\n    [responseCodes.RESP_ERR_PAIR_DISABLED]: 'Pairing is Currently Disabled',\n    [responseCodes.RESP_ERR_PERMISSION_DISABLED]: 'Automated Signing is Currently Disabled',\n    [responseCodes.RESP_ERR_INTERNAL]: 'Device Error',\n    [responseCodes.RESP_ERR_GCE_TIMEOUT]: 'Timeout',\n    [responseCodes.RESP_ERR_WALLET_NOT_PRESENT]: 'Incorrect Wallet UID Provided',\n    [responseCodes.RESP_ERR_DEV_LOCKED]: 'Device Locked',\n    [responseCodes.RESP_ERR_DISABLED]: 'Disabled',\n    [responseCodes.RESP_ERR_ALREADY]: 'Record already exists. You must first remove it on your device.'\n}\n \n\nconst signingSchema = {\n    BTC_TRANSFER: 0,\n    ETH_TRANSFER: 1,\n    ERC20_TRANSFER: 2,\n    ETH_MSG: 3,\n    EXTRA_DATA: 4,\n}\n\nconst REQUEST_TYPE_BYTE = 0x02; // For all HSM-bound requests\nconst VERSION_BYTE = 1;\nconst HARDENED_OFFSET = 0x80000000; // Hardened offset\nconst HANDLE_LARGER_CHAIN_ID = 255; // ChainId value to signify larger chainID is in data buffer\nconst MAX_CHAIN_ID_BYTES = 8; // Max number of bytes to contain larger chainID in data buffer\n\nconst BASE_URL = 'https://signing.gridpl.us';\n\nconst EIP712_ABI_LATTICE_FW_TYPE_MAP = {\n    'address': 1,\n    'bool': 2,\n    'uint8': 3,\n    'uint16': 4,\n    'uint24': 5,\n    'uint32': 6,\n    'uint40': 7,\n    'uint48': 8,\n    'uint56': 9,\n    'uint64': 10,\n    'uint72': 11,\n    'uint80': 12,\n    'uint88': 13,\n    'uint96': 14,\n    'uint104': 15,\n    'uint112': 16,\n    'uint120': 17,\n    'uint128': 18,\n    'uint136': 19,\n    'uint144': 20,\n    'uint152': 21,\n    'uint160': 22,\n    'uint168': 23,\n    'uint176': 24,\n    'uint184': 25,\n    'uint192': 26,\n    'uint200': 27,\n    'uint208': 28,\n    'uint216': 29,\n    'uint224': 30,\n    'uint232': 31,\n    'uint240': 32,\n    'uint248': 33,\n    'uint256': 34,\n    'int8': 35,\n    'int16': 36,\n    'int24': 37,\n    'int32': 38,\n    'int40': 39,\n    'int48': 40,\n    'int56': 41,\n    'int64': 42,\n    'int72': 43,\n    'int80': 44,\n    'int88': 45,\n    'int96': 46,\n    'int104': 47,\n    'int112': 48,\n    'int120': 49,\n    'int128': 50,\n    'int136': 51,\n    'int144': 52,\n    'int152': 53,\n    'int160': 54,\n    'int168': 55,\n    'int176': 56,\n    'int184': 57,\n    'int192': 58,\n    'int200': 59,\n    'int208': 60,\n    'int216': 61,\n    'int224': 62,\n    'int232': 63,\n    'int240': 64,\n    'int248': 65,\n    'int256': 66,\n    'uint': 67,\n    'bytes1': 69,\n    'bytes2': 70,\n    'bytes3': 71,\n    'bytes4': 72,\n    'bytes5': 73,\n    'bytes6': 74,\n    'bytes7': 75,\n    'bytes8': 76,\n    'bytes9': 77,\n    'bytes10': 78,\n    'bytes11': 79,\n    'bytes12': 80,\n    'bytes13': 81,\n    'bytes14': 82,\n    'bytes15': 83,\n    'bytes16': 84,\n    'bytes17': 85,\n    'bytes18': 86,\n    'bytes19': 87,\n    'bytes20': 88,\n    'bytes21': 89,\n    'bytes22': 90,\n    'bytes23': 91,\n    'bytes24': 92,\n    'bytes25': 93,\n    'bytes26': 94,\n    'bytes27': 95,\n    'bytes28': 96,\n    'bytes29': 97,\n    'bytes30': 98,\n    'bytes31': 99,\n    'bytes32': 100,\n    'bytes': 101,\n    'string': 102,\n}\n\nconst ETH_ABI_LATTICE_FW_TYPE_MAP = {\n    ...EIP712_ABI_LATTICE_FW_TYPE_MAP,\n    'tuple1': 103,\n    'tuple2': 104,\n    'tuple3': 105,\n    'tuple4': 106,\n    'tuple5': 107,\n    'tuple6': 108,\n    'tuple7': 109,\n    'tuple8': 110,\n    'tuple9': 111,\n    'tuple10': 112,\n    'tuple11': 113,\n    'tuple12': 114,\n    'tuple13': 115,\n    'tuple14': 116,\n    'tuple15': 117,\n    'tuple16': 118,\n    'tuple17': 119,  // Firmware currently cannot support tuples larger than this\n};\n\nconst ethMsgProtocol = {\n    SIGN_PERSONAL: {\n        str: 'signPersonal',\n        enumIdx: 0,             // Enum index of this protocol in Lattice firmware\n    },\n    TYPED_DATA: {\n        str: 'typedData',\n        enumIdx: 1,\n        rawDataMaxLen: 1629,    // Max size of raw data payload in bytes\n        typeCodes: EIP712_ABI_LATTICE_FW_TYPE_MAP // Enum indices of data types in Lattice firmware\n    },\n}\n\nfunction getFwVersionConst(v) {\n    const c = {\n        extraDataFrameSz: 0,\n        extraDataMaxFrames: 0,\n    };\n    function gte(v, exp) {\n        // Note that `v` fields come in as [fix|minor|major]\n        return  (v[2] > exp[0]) || \n                (v[2] === exp[0] && v[1] > exp[1]) || \n                (v[2] === exp[0] && v[1] === exp[1] && v[0] > exp[2]) ||\n                (v[2] === exp[0] && v[1] === exp[1] && v[0] === exp[2]);\n    }\n    // Very old legacy versions do not give a version number\n    const legacy = (v.length === 0);\n    // V0.10.10 allows a user to sign a prehashed ETH message if payload too big\n    if (!legacy && gte(v, [0, 10, 10])) {\n        c.ethMsgPreHashAllowed = true;\n    }\n\n    // V0.10.8 allows a user to sign a prehashed transaction if the payload\n    // is too big\n    if (!legacy && gte(v, [0, 10, 8])) {\n        c.prehashAllowed = true;\n    }\n    // V0.10.5 added the ability to use flexible address path sizes, which\n    // changes the `getAddress` API. It also added support for EIP712\n    if (!legacy && gte(v, [0, 10, 5])) {\n        c.varAddrPathSzAllowed = true;\n        c.eip712Supported = true;\n    }\n    // V0.10.4 introduced the ability to send signing requests over multiple\n    // data frames (i.e. in multiple requests)\n    if (!legacy && gte(v, [0, 10, 4])) {\n        c.extraDataFrameSz = 1500; // 1500 bytes per frame of extraData allowed\n        c.extraDataMaxFrames = 1;  // 1 frame of extraData allowed\n    }\n    // Various size constants have changed on the firmware side over time and\n    // are captured here\n    if (!legacy && gte(v, [0, 10, 4])) {\n        // >=0.10.3\n        c.reqMaxDataSz = 1678;\n        c.ethMaxDataSz = c.reqMaxDataSz - 128;\n        c.ethMaxMsgSz = c.ethMaxDataSz;\n        c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n        c.addrFlagsAllowed = true;\n    } else if (!legacy && gte(v, [0, 10, 0])) {\n        // >=0.10.0\n        c.reqMaxDataSz = 1678;\n        c.ethMaxDataSz = c.reqMaxDataSz - 128;\n        c.ethMaxMsgSz = c.ethMaxDataSz;\n        c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n        c.addrFlagsAllowed = true;\n    } else {\n        // Legacy or <0.10.0\n        c.reqMaxDataSz = 1152;\n        c.ethMaxDataSz = c.reqMaxDataSz - 128;\n        c.ethMaxMsgSz = c.ethMaxDataSz;\n        c.ethMaxGasPrice = 500000000000; // 500 gwei\n        c.addrFlagsAllowed = false;\n    }\n    return c;\n}\n\nmodule.exports = {\n    getFwVersionConst,\n    ADDR_STR_LEN,\n    AES_IV,\n    BASE_URL,\n    ENC_MSG_LEN,\n    addressSizes,\n    decResLengths,\n    deviceCodes,\n    encReqCodes,\n    ethMsgProtocol,\n    messageConstants,\n    responseCodes,\n    responseMsgs,\n    signingSchema,\n    REQUEST_TYPE_BYTE,\n    VERSION_BYTE,\n    HARDENED_OFFSET,\n    HANDLE_LARGER_CHAIN_ID,\n    MAX_CHAIN_ID_BYTES,\n    ETH_ABI_LATTICE_FW_TYPE_MAP,\n}"]},"metadata":{},"sourceType":"script"}