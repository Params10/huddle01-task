{"ast":null,"code":"var _jsxFileName = \"/home/param/Desktop/huddle01-task/client/src/containers/Room.js\",\n    _s = $RefreshSig$();\n\n//client sdk import\nimport HuddleClient, { emitter } from \"huddle01-client\"; //react imports\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\"; //helper imports\n\nimport { getTrack } from \"../lib/utils/helpers\";\nimport { PeerVideo, PeerAudio, PeerScreen } from \"../components/PeerViewPort\";\nimport Onboard from 'bnc-onboard';\nimport Web3 from 'web3';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Room() {\n  _s();\n\n  const history = useHistory(); //to allow for recordings\n\n  const isBot = localStorage.getItem(\"bot_password\") === \"huddle01\"; //initialising states\n\n  const [huddle, setHuddle] = useState(null);\n  const [roomState, setRoomState] = useState(false);\n  const [micState, setMicState] = useState(false);\n  const [webcamState, setWebcamState] = useState(false);\n  const [screenshareState, setScreenshareState] = useState(false);\n  const [isHost, setIsHost] = useState(true);\n  const [beginTime, setBeginTime] = useState(new Date());\n  const [recAddress, setrecAddress] = useState(\"\");\n  let hostid = \"\";\n  const [peers, setPeers] = useState([]);\n  const [consumerStreams, setConsumerStreams] = useState({\n    video: [],\n    audio: [],\n    screen: []\n  });\n  const meVideoElem = useRef(null);\n  const meScreenElem = useRef(null);\n  const joinRoomBtn = useRef(null);\n  const config = {\n    apiKey: \"i4pzqbpxza8vpijQMwZsP1H7nZZEH0TN3vR4NdNS\",\n    roomId: \"C131\",\n    peerId: \"Rick\" + Math.floor(Math.random() * 4000),\n    displayName: \"Rick Sanchez\",\n    window,\n    isBot // true/false -- gets calculated on line 15\n\n  }; //initialize the app\n\n  useEffect(() => {\n    history.push(`?roomId=${config.roomId}`);\n    const myHuddleClient = new HuddleClient(config);\n    setHuddle(myHuddleClient);\n  }, []);\n  useEffect(() => {\n    console.log(\"peers array \", peers);\n\n    if (huddle) {\n      console.log(huddle);\n\n      if (huddle._hostId) {\n        if (huddle._hostId != huddle._peerId) {\n          setIsHost(false);\n        }\n      }\n    }\n  }, [peers, huddle]); //recording config\n\n  useEffect(() => {\n    //joinRoomBtn here can be whatever button/function used that calls `huddle.join()`\n    huddle && isBot && joinRoomBtn.current.click();\n  }, [huddle, isBot]);\n\n  const setupEventListeners = async () => {\n    emitter.on(\"roomState\", state => {\n      switch (state) {\n        case \"connected\":\n          //do whatever\n          break;\n\n        case \"failed\":\n          //do whatever\n          break;\n\n        case \"disconnected\":\n          //do whatever\n          break;\n\n        default:\n          break;\n      }\n\n      setRoomState(state);\n    });\n    emitter.on(\"error\", error => {\n      alert(error); //do whatever\n    });\n    emitter.on(\"addPeer\", peer => {\n      console.log(\"new peer =>\", peer);\n      setPeers(_peers => [..._peers, peer]);\n    });\n    emitter.on(\"addProducer\", producer => {\n      console.log(\"new prod\", producer);\n\n      switch (producer.type) {\n        case \"webcam\":\n          let videoStream = producer.track;\n\n          if (typeof videoStream == \"object\") {\n            try {\n              meVideoElem.current.srcObject = getTrack(videoStream);\n            } catch (error) {\n              console.error(error);\n            }\n          }\n\n          break;\n\n        case \"mic\":\n          //do whatever\n          break;\n\n        case \"screen\":\n          videoStream = producer.track;\n\n          if (typeof videoStream == \"object\") {\n            try {\n              meScreenElem.current.srcObject = getTrack(videoStream);\n            } catch (error) {\n              console.error(error);\n            }\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    });\n    emitter.on(\"removeProducer\", producer => {\n      console.log(\"remove \", producer);\n\n      switch (producer.type) {\n        case \"webcam\":\n          try {\n            meVideoElem.current.srcObject = null;\n          } catch (error) {\n            console.error(error);\n          }\n\n          break;\n\n        case \"mic\":\n          //do whatever\n          break;\n\n        case \"screen\":\n          try {\n            meScreenElem.current.srcObject = null;\n          } catch (error) {\n            console.error(error);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    });\n    emitter.on(\"addConsumer\", consumer => {\n      switch (consumer.type) {\n        case \"webcam\":\n          {\n            const videoStream = consumer.track;\n            setConsumerStreams(prevState => ({ ...prevState,\n              video: [...prevState.video, videoStream]\n            }));\n            break;\n          }\n\n        case \"screen\":\n          {\n            const screenStream = consumer.track;\n            setConsumerStreams(prevState => ({ ...prevState,\n              screen: [...prevState.screen, screenStream]\n            }));\n            break;\n          }\n\n        case \"mic\":\n          {\n            const audioStream = consumer.track;\n            setConsumerStreams(prevState => ({ ...prevState,\n              audio: [...prevState.audio, audioStream]\n            }));\n            break;\n          }\n\n        default:\n          break;\n      }\n    });\n    emitter.on(\"removeConsumer\", consumer => {\n      switch (consumer.type) {\n        case \"screen\":\n          setConsumerStreams(prevState => {\n            return { ...prevState,\n              screen: prevState.screen.filter(_consumer => _consumer.id !== consumer._id)\n            };\n          });\n          break;\n\n        case \"webcam\":\n          setConsumerStreams(prevState => {\n            return { ...prevState,\n              video: prevState.video.filter(_consumer => _consumer.id !== consumer._id)\n            };\n          });\n          break;\n\n        case \"mic\":\n          setConsumerStreams(prevState => {\n            return { ...prevState,\n              audio: prevState.audio.filter(_consumer => _consumer.id !== consumer._id)\n            };\n          });\n          break;\n\n        default:\n          break;\n      }\n    });\n  };\n\n  const joinRoom = async () => {\n    if (!huddle) return;\n\n    try {\n      setupEventListeners();\n      await huddle.join();\n      console.log(\"post join\", huddle);\n      setBeginTime(new Date());\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const leaveRoom = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.close();\n      setRoomState(false);\n      var secondBetweenTwoDate = Math.abs((new Date().getTime() - beginTime.getTime()) / 1000);\n\n      if (recAddress) {\n        axios.post(`http://localhost:3001/transactions`, {\n          timediff: secondBetweenTwoDate,\n          receiverAddress: recAddress\n        }).then(res => {\n          console.log(res);\n          console.log(res.data);\n        });\n      }\n\n      console.log(secondBetweenTwoDate);\n    } catch (error) {\n      alert(error);\n    }\n  }; //TODO: add pauseWebcam() and resumeWebcam()\n\n\n  const enableWebcam = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.enableWebcam();\n      setWebcamState(true);\n    } catch (error) {\n      setWebcamState(false);\n      alert(error);\n    }\n  };\n\n  const disableWebcam = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.disableWebcam();\n      setWebcamState(false);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const startScreenshare = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.enableShare();\n      setScreenshareState(true);\n    } catch (error) {\n      alert(error);\n      setScreenshareState(false);\n    }\n  };\n\n  const stopScreenshare = async () => {\n    if (!huddle) return;\n\n    try {\n      await huddle.disableShare();\n      setScreenshareState(false);\n    } catch (error) {\n      alert(error);\n    }\n  }; //TODO: add muteMic() and unmuteMic()\n\n\n  const enableMic = async () => {\n    if (!huddle) return;\n\n    try {\n      huddle.enableMic();\n      setMicState(true);\n    } catch (error) {\n      setMicState(false);\n      alert(error);\n    }\n  };\n\n  const disableMic = async () => {\n    if (!huddle) return;\n\n    try {\n      huddle.disableMic();\n      setMicState(false);\n    } catch (error) {\n      alert(error);\n      setMicState(true);\n    }\n  };\n\n  const startRecording = async () => {\n    if (!huddle) return;\n\n    try {\n      const status = await huddle.startRecording();\n      if (status) console.log(\"recording successfully initiated\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const stopRecorder = async () => {\n    if (!huddle) return;\n\n    try {\n      const status = await huddle.stopRecording();\n      if (status) console.log(\"recording successfully stopped\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const networkIds = {\n    'mainnet': 1,\n    'matic': 137,\n    'ropsten': 3,\n    'rinkeby': 4,\n    'goerli': 5,\n    'kovan': 42,\n    'matictestnet': 80001,\n    'ganache': 5777\n  };\n  let web3;\n  const onboard = Onboard({\n    dappId: '68159813-dea2-4d6c-8e1d-3657f5bb3a15',\n    networkId: networkIds.ganache,\n    subscriptions: {\n      wallet: wallet => {\n        web3 = new Web3(wallet.provider);\n        console.log(wallet.name, \" is now connected!\");\n      },\n      address: address => {\n        setrecAddress(address);\n        console.log(address);\n      }\n    },\n    walletCheck: [{\n      checkName: 'connect'\n    }, {\n      checkName: 'accounts'\n    }, {\n      checkName: 'network'\n    }]\n  });\n\n  async function login() {\n    await onboard.walletSelect();\n    await onboard.walletCheck();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: login,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"me-ports\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        height: \"400px\",\n        width: \"400px\",\n        autoPlay: true,\n        ref: meVideoElem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        height: \"400px\",\n        width: \"400px\",\n        autoPlay: true,\n        ref: meScreenElem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-grp\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        ref: joinRoomBtn,\n        id: \"join-btn\",\n        onClick: roomState === \"connected\" ? leaveRoom : joinRoom,\n        children: roomState === \"connected\" ? \"Leave Room\" : \"Join Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: webcamState ? disableWebcam : enableWebcam,\n        disabled: !isHost,\n        children: webcamState ? \"Disable Webcam\" : \"Enable Webcam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: micState ? disableMic : enableMic,\n        disabled: !isHost,\n        children: micState ? \"Disable Mic\" : \"Enable Mic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: screenshareState ? stopScreenshare : startScreenshare,\n        disabled: !isHost,\n        children: screenshareState ? \"Disable Screenshare\" : \"Enable Screenshare\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"peer-ports\",\n      children: [consumerStreams.video.map((stream, idx) => {\n        return /*#__PURE__*/_jsxDEV(PeerVideo, {\n          videoTrack: getTrack(stream)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 28\n        }, this);\n      }), consumerStreams.screen.map((stream, idx) => {\n        return /*#__PURE__*/_jsxDEV(PeerScreen, {\n          screenTrack: getTrack(stream)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 28\n        }, this);\n      }), consumerStreams.audio.map((stream, idx) => {\n        return /*#__PURE__*/_jsxDEV(PeerAudio, {\n          audioTrack: getTrack(stream)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 28\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Room, \"+6mgQMUxbnbYbs6MUIUCBYmChn8=\", false, function () {\n  return [useHistory];\n});\n\n_c = Room;\nexport default Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/src/containers/Room.js"],"names":["HuddleClient","emitter","useEffect","useState","useRef","useHistory","getTrack","PeerVideo","PeerAudio","PeerScreen","Onboard","Web3","axios","Room","history","isBot","localStorage","getItem","huddle","setHuddle","roomState","setRoomState","micState","setMicState","webcamState","setWebcamState","screenshareState","setScreenshareState","isHost","setIsHost","beginTime","setBeginTime","Date","recAddress","setrecAddress","hostid","peers","setPeers","consumerStreams","setConsumerStreams","video","audio","screen","meVideoElem","meScreenElem","joinRoomBtn","config","apiKey","roomId","peerId","Math","floor","random","displayName","window","push","myHuddleClient","console","log","_hostId","_peerId","current","click","setupEventListeners","on","state","error","alert","peer","_peers","producer","type","videoStream","track","srcObject","consumer","prevState","screenStream","audioStream","filter","_consumer","id","_id","joinRoom","join","leaveRoom","close","secondBetweenTwoDate","abs","getTime","post","timediff","receiverAddress","then","res","data","enableWebcam","disableWebcam","startScreenshare","enableShare","stopScreenshare","disableShare","enableMic","disableMic","startRecording","status","stopRecorder","stopRecording","networkIds","web3","onboard","dappId","networkId","ganache","subscriptions","wallet","provider","name","address","walletCheck","checkName","login","walletSelect","map","stream","idx"],"mappings":";;;AAAA;AACA,OAAOA,YAAP,IAAuBC,OAAvB,QAAsC,iBAAtC,C,CAEA;;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CAEA;;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,4BAAjD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACZ,QAAMC,OAAO,GAAGT,UAAU,EAA1B,CADY,CAEZ;;AACA,QAAMU,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,MAAyC,UAAvD,CAHY,CAIZ;;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACuB,gBAAD,EAAmBC,mBAAnB,IAA0CxB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAC2B,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,CAAC,IAAI6B,IAAJ,EAAD,CAA1C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,CAAC,EAAD,CAA5C;AAGA,MAAIgC,MAAM,GAAG,EAAb;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACmC,eAAD,EAAkBC,kBAAlB,IAAwCpC,QAAQ,CAAC;AACnDqC,IAAAA,KAAK,EAAE,EAD4C;AAEnDC,IAAAA,KAAK,EAAE,EAF4C;AAGnDC,IAAAA,MAAM,EAAE;AAH2C,GAAD,CAAtD;AAMA,QAAMC,WAAW,GAAGvC,MAAM,CAAC,IAAD,CAA1B;AACA,QAAMwC,YAAY,GAAGxC,MAAM,CAAC,IAAD,CAA3B;AACA,QAAMyC,WAAW,GAAGzC,MAAM,CAAC,IAAD,CAA1B;AAEA,QAAM0C,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,0CADG;AAEXC,IAAAA,MAAM,EAAE,MAFG;AAGXC,IAAAA,MAAM,EAAE,SAASC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAHN;AAIXC,IAAAA,WAAW,EAAE,cAJF;AAKXC,IAAAA,MALW;AAMXvC,IAAAA,KANW,CAMJ;;AANI,GAAf,CA3BY,CAoCZ;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,OAAO,CAACyC,IAAR,CAAc,WAAUT,MAAM,CAACE,MAAO,EAAtC;AAEA,UAAMQ,cAAc,GAAG,IAAIxD,YAAJ,CAAiB8C,MAAjB,CAAvB;AACA3B,IAAAA,SAAS,CAACqC,cAAD,CAAT;AAEH,GANQ,EAMN,EANM,CAAT;AAOAtD,EAAAA,SAAS,CAAC,MAAM;AACZuD,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BtB,KAA5B;;AACA,QAAIlB,MAAJ,EAAY;AACRuC,MAAAA,OAAO,CAACC,GAAR,CAAYxC,MAAZ;;AACA,UAAIA,MAAM,CAACyC,OAAX,EAAoB;AAChB,YAAIzC,MAAM,CAACyC,OAAP,IAAkBzC,MAAM,CAAC0C,OAA7B,EAAsC;AAClC/B,UAAAA,SAAS,CAAC,KAAD,CAAT;AACH;AACJ;AACJ;AAEJ,GAXQ,EAWN,CAACO,KAAD,EAAQlB,MAAR,CAXM,CAAT,CA5CY,CAyDZ;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAgB,IAAAA,MAAM,IAAIH,KAAV,IAAmB8B,WAAW,CAACgB,OAAZ,CAAoBC,KAApB,EAAnB;AACH,GAHQ,EAGN,CAAC5C,MAAD,EAASH,KAAT,CAHM,CAAT;;AAKA,QAAMgD,mBAAmB,GAAG,YAAY;AACpC9D,IAAAA,OAAO,CAAC+D,EAAR,CAAW,WAAX,EAAyBC,KAAD,IAAW;AAC/B,cAAQA,KAAR;AACI,aAAK,WAAL;AACI;AACA;;AACJ,aAAK,QAAL;AACI;AACA;;AACJ,aAAK,cAAL;AACI;AACA;;AACJ;AACI;AAXR;;AAaA5C,MAAAA,YAAY,CAAC4C,KAAD,CAAZ;AACH,KAfD;AAiBAhE,IAAAA,OAAO,CAAC+D,EAAR,CAAW,OAAX,EAAqBE,KAAD,IAAW;AAC3BC,MAAAA,KAAK,CAACD,KAAD,CAAL,CAD2B,CAE3B;AACH,KAHD;AAKAjE,IAAAA,OAAO,CAAC+D,EAAR,CAAW,SAAX,EAAuBI,IAAD,IAAU;AAC5BX,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BU,IAA3B;AACA/B,MAAAA,QAAQ,CAAEgC,MAAD,IAAY,CAAC,GAAGA,MAAJ,EAAYD,IAAZ,CAAb,CAAR;AACH,KAHD;AAKAnE,IAAAA,OAAO,CAAC+D,EAAR,CAAW,aAAX,EAA2BM,QAAD,IAAc;AACpCb,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBY,QAAxB;;AACA,cAAQA,QAAQ,CAACC,IAAjB;AACI,aAAK,QAAL;AACI,cAAIC,WAAW,GAAGF,QAAQ,CAACG,KAA3B;;AACA,cAAI,OAAOD,WAAP,IAAsB,QAA1B,EAAoC;AAChC,gBAAI;AACA7B,cAAAA,WAAW,CAACkB,OAAZ,CAAoBa,SAApB,GAAgCpE,QAAQ,CAACkE,WAAD,CAAxC;AACH,aAFD,CAEE,OAAON,KAAP,EAAc;AACZT,cAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;AACJ;;AACD;;AACJ,aAAK,KAAL;AACI;AACA;;AACJ,aAAK,QAAL;AACIM,UAAAA,WAAW,GAAGF,QAAQ,CAACG,KAAvB;;AACA,cAAI,OAAOD,WAAP,IAAsB,QAA1B,EAAoC;AAChC,gBAAI;AACA5B,cAAAA,YAAY,CAACiB,OAAb,CAAqBa,SAArB,GAAiCpE,QAAQ,CAACkE,WAAD,CAAzC;AACH,aAFD,CAEE,OAAON,KAAP,EAAc;AACZT,cAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;AACJ;;AACD;;AAEJ;AACI;AA1BR;AA4BH,KA9BD;AAgCAjE,IAAAA,OAAO,CAAC+D,EAAR,CAAW,gBAAX,EAA8BM,QAAD,IAAc;AACvCb,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBY,QAAvB;;AACA,cAAQA,QAAQ,CAACC,IAAjB;AACI,aAAK,QAAL;AACI,cAAI;AACA5B,YAAAA,WAAW,CAACkB,OAAZ,CAAoBa,SAApB,GAAgC,IAAhC;AACH,WAFD,CAEE,OAAOR,KAAP,EAAc;AACZT,YAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;;AACD;;AACJ,aAAK,KAAL;AACI;AACA;;AACJ,aAAK,QAAL;AACI,cAAI;AACAtB,YAAAA,YAAY,CAACiB,OAAb,CAAqBa,SAArB,GAAiC,IAAjC;AACH,WAFD,CAEE,OAAOR,KAAP,EAAc;AACZT,YAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;;AACD;;AAEJ;AACI;AApBR;AAsBH,KAxBD;AA0BAjE,IAAAA,OAAO,CAAC+D,EAAR,CAAW,aAAX,EAA2BW,QAAD,IAAc;AACpC,cAAQA,QAAQ,CAACJ,IAAjB;AACI,aAAK,QAAL;AAAe;AACX,kBAAMC,WAAW,GAAGG,QAAQ,CAACF,KAA7B;AACAlC,YAAAA,kBAAkB,CAAEqC,SAAD,KAAgB,EAC/B,GAAGA,SAD4B;AAE/BpC,cAAAA,KAAK,EAAE,CAAC,GAAGoC,SAAS,CAACpC,KAAd,EAAqBgC,WAArB;AAFwB,aAAhB,CAAD,CAAlB;AAKA;AACH;;AAED,aAAK,QAAL;AAAe;AACX,kBAAMK,YAAY,GAAGF,QAAQ,CAACF,KAA9B;AACAlC,YAAAA,kBAAkB,CAAEqC,SAAD,KAAgB,EAC/B,GAAGA,SAD4B;AAE/BlC,cAAAA,MAAM,EAAE,CAAC,GAAGkC,SAAS,CAAClC,MAAd,EAAsBmC,YAAtB;AAFuB,aAAhB,CAAD,CAAlB;AAIA;AACH;;AAED,aAAK,KAAL;AAAY;AACR,kBAAMC,WAAW,GAAGH,QAAQ,CAACF,KAA7B;AACAlC,YAAAA,kBAAkB,CAAEqC,SAAD,KAAgB,EAC/B,GAAGA,SAD4B;AAE/BnC,cAAAA,KAAK,EAAE,CAAC,GAAGmC,SAAS,CAACnC,KAAd,EAAqBqC,WAArB;AAFwB,aAAhB,CAAD,CAAlB;AAKA;AACH;;AAED;AACI;AA/BR;AAiCH,KAlCD;AAoCA7E,IAAAA,OAAO,CAAC+D,EAAR,CAAW,gBAAX,EAA8BW,QAAD,IAAc;AACvC,cAAQA,QAAQ,CAACJ,IAAjB;AACI,aAAK,QAAL;AACIhC,UAAAA,kBAAkB,CAAEqC,SAAD,IAAe;AAC9B,mBAAO,EACH,GAAGA,SADA;AAEHlC,cAAAA,MAAM,EAAEkC,SAAS,CAAClC,MAAV,CAAiBqC,MAAjB,CACHC,SAAD,IAAeA,SAAS,CAACC,EAAV,KAAiBN,QAAQ,CAACO,GADrC;AAFL,aAAP;AAMH,WAPiB,CAAlB;AAQA;;AACJ,aAAK,QAAL;AACI3C,UAAAA,kBAAkB,CAAEqC,SAAD,IAAe;AAC9B,mBAAO,EACH,GAAGA,SADA;AAEHpC,cAAAA,KAAK,EAAEoC,SAAS,CAACpC,KAAV,CAAgBuC,MAAhB,CACFC,SAAD,IAAeA,SAAS,CAACC,EAAV,KAAiBN,QAAQ,CAACO,GADtC;AAFJ,aAAP;AAMH,WAPiB,CAAlB;AAQA;;AACJ,aAAK,KAAL;AACI3C,UAAAA,kBAAkB,CAAEqC,SAAD,IAAe;AAC9B,mBAAO,EACH,GAAGA,SADA;AAEHnC,cAAAA,KAAK,EAAEmC,SAAS,CAACnC,KAAV,CAAgBsC,MAAhB,CACFC,SAAD,IAAeA,SAAS,CAACC,EAAV,KAAiBN,QAAQ,CAACO,GADtC;AAFJ,aAAP;AAMH,WAPiB,CAAlB;AAQA;;AAEJ;AACI;AAjCR;AAmCH,KApCD;AAqCH,GA/JD;;AAiKA,QAAMC,QAAQ,GAAG,YAAY;AAEzB,QAAI,CAACjE,MAAL,EACI;;AACJ,QAAI;AACA6C,MAAAA,mBAAmB;AACnB,YAAM7C,MAAM,CAACkE,IAAP,EAAN;AACA3B,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBxC,MAAzB;AACAa,MAAAA,YAAY,CAAC,IAAIC,IAAJ,EAAD,CAAZ;AACH,KALD,CAKE,OAAOkC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GAZD;;AAcA,QAAMmB,SAAS,GAAG,YAAY;AAE1B,QAAI,CAACnE,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAACoE,KAAP,EAAN;AACAjE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,UAAIkE,oBAAoB,GAAGrC,IAAI,CAACsC,GAAL,CAAS,CAAC,IAAIxD,IAAJ,GAAWyD,OAAX,KAAuB3D,SAAS,CAAC2D,OAAV,EAAxB,IAA+C,IAAxD,CAA3B;;AACA,UAAIxD,UAAJ,EAAe;AACXrB,QAAAA,KAAK,CAAC8E,IAAN,CAAY,oCAAZ,EAAiD;AAAEC,UAAAA,QAAQ,EAAEJ,oBAAZ;AAAkCK,UAAAA,eAAe,EAAE3D;AAAnD,SAAjD,EACK4D,IADL,CACUC,GAAG,IAAI;AACTrC,UAAAA,OAAO,CAACC,GAAR,CAAYoC,GAAZ;AACArC,UAAAA,OAAO,CAACC,GAAR,CAAYoC,GAAG,CAACC,IAAhB;AACH,SAJL;AAKH;;AACDtC,MAAAA,OAAO,CAACC,GAAR,CAAY6B,oBAAZ;AACH,KAZD,CAYE,OAAOrB,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GAlBD,CA9OY,CAkQZ;;;AACA,QAAM8B,YAAY,GAAG,YAAY;AAC7B,QAAI,CAAC9E,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAAC8E,YAAP,EAAN;AACAvE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAHD,CAGE,OAAOyC,KAAP,EAAc;AACZzC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACA0C,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GATD;;AAWA,QAAM+B,aAAa,GAAG,YAAY;AAC9B,QAAI,CAAC/E,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAAC+E,aAAP,EAAN;AACAxE,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH,KAHD,CAGE,OAAOyC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GARD;;AAUA,QAAMgC,gBAAgB,GAAG,YAAY;AACjC,QAAI,CAAChF,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAACiF,WAAP,EAAN;AACAxE,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,KAHD,CAGE,OAAOuC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACAvC,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH;AACJ,GATD;;AAWA,QAAMyE,eAAe,GAAG,YAAY;AAChC,QAAI,CAAClF,MAAL,EAAa;;AACb,QAAI;AACA,YAAMA,MAAM,CAACmF,YAAP,EAAN;AACA1E,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH,KAHD,CAGE,OAAOuC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GARD,CAnSY,CA6SZ;;;AACA,QAAMoC,SAAS,GAAG,YAAY;AAC1B,QAAI,CAACpF,MAAL,EAAa;;AACb,QAAI;AACAA,MAAAA,MAAM,CAACoF,SAAP;AACA/E,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KAHD,CAGE,OAAO2C,KAAP,EAAc;AACZ3C,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA4C,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GATD;;AAWA,QAAMqC,UAAU,GAAG,YAAY;AAC3B,QAAI,CAACrF,MAAL,EAAa;;AACb,QAAI;AACAA,MAAAA,MAAM,CAACqF,UAAP;AACAhF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH,KAHD,CAGE,OAAO2C,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACA3C,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ,GATD;;AAWA,QAAMiF,cAAc,GAAG,YAAY;AAC/B,QAAI,CAACtF,MAAL,EAAa;;AACb,QAAI;AACA,YAAMuF,MAAM,GAAG,MAAMvF,MAAM,CAACsF,cAAP,EAArB;AACA,UAAIC,MAAJ,EAAYhD,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACf,KAHD,CAGE,OAAOQ,KAAP,EAAc;AACZT,MAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;AACJ,GARD;;AAUA,QAAMwC,YAAY,GAAG,YAAY;AAC7B,QAAI,CAACxF,MAAL,EAAa;;AACb,QAAI;AACA,YAAMuF,MAAM,GAAG,MAAMvF,MAAM,CAACyF,aAAP,EAArB;AACA,UAAIF,MAAJ,EAAYhD,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACf,KAHD,CAGE,OAAOQ,KAAP,EAAc;AACZT,MAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;AACJ,GARD;;AASA,QAAM0C,UAAU,GAAG;AACf,eAAW,CADI;AAEf,aAAS,GAFM;AAGf,eAAW,CAHI;AAIf,eAAW,CAJI;AAKf,cAAU,CALK;AAMf,aAAS,EANM;AAOf,oBAAgB,KAPD;AAQf,eAAW;AARI,GAAnB;AAWA,MAAIC,IAAJ;AAIA,QAAMC,OAAO,GAAGpG,OAAO,CAAC;AACpBqG,IAAAA,MAAM,EAAE,sCADY;AAEpBC,IAAAA,SAAS,EAAEJ,UAAU,CAACK,OAFF;AAGpBC,IAAAA,aAAa,EAAE;AACXC,MAAAA,MAAM,EAAEA,MAAM,IAAI;AACdN,QAAAA,IAAI,GAAG,IAAIlG,IAAJ,CAASwG,MAAM,CAACC,QAAhB,CAAP;AACA3D,QAAAA,OAAO,CAACC,GAAR,CAAYyD,MAAM,CAACE,IAAnB,EAAyB,oBAAzB;AAEH,OALU;AAMXC,MAAAA,OAAO,EAAEA,OAAO,IAAI;AAChBpF,QAAAA,aAAa,CAACoF,OAAD,CAAb;AACA7D,QAAAA,OAAO,CAACC,GAAR,CAAY4D,OAAZ;AACH;AATU,KAHK;AAepBC,IAAAA,WAAW,EAAE,CACT;AAAEC,MAAAA,SAAS,EAAE;AAAb,KADS,EAET;AAAEA,MAAAA,SAAS,EAAE;AAAb,KAFS,EAGT;AAAEA,MAAAA,SAAS,EAAE;AAAb,KAHS;AAfO,GAAD,CAAvB;;AAqBA,iBAAeC,KAAf,GAAuB;AACnB,UAAMX,OAAO,CAACY,YAAR,EAAN;AACA,UAAMZ,OAAO,CAACS,WAAR,EAAN;AACH;;AAID,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAEE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAO,QAAA,MAAM,EAAC,OAAd;AAAsB,QAAA,KAAK,EAAC,OAA5B;AAAoC,QAAA,QAAQ,MAA5C;AAA6C,QAAA,GAAG,EAAE9E;AAAlD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,MAAM,EAAC,OAAd;AAAsB,QAAA,KAAK,EAAC,OAA5B;AAAoC,QAAA,QAAQ,MAA5C;AAA6C,QAAA,GAAG,EAAEC;AAAlD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAQI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AACI,QAAA,GAAG,EAAEC,WADT;AAEI,QAAA,EAAE,EAAC,UAFP;AAGI,QAAA,OAAO,EAAEzB,SAAS,KAAK,WAAd,GAA4BiE,SAA5B,GAAwCF,QAHrD;AAAA,kBAKK/D,SAAS,KAAK,WAAd,GAA4B,YAA5B,GAA2C;AALhD;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAQ,QAAA,OAAO,EAAEI,WAAW,GAAGyE,aAAH,GAAmBD,YAA/C;AAA6D,QAAA,QAAQ,EAAE,CAACpE,MAAxE;AAAA,kBACKJ,WAAW,GAAG,gBAAH,GAAsB;AADtC;AAAA;AAAA;AAAA;AAAA,cATJ,eAYI;AAAQ,QAAA,OAAO,EAAEF,QAAQ,GAAGiF,UAAH,GAAgBD,SAAzC;AAAoD,QAAA,QAAQ,EAAE,CAAC1E,MAA/D;AAAA,kBACKN,QAAQ,GAAG,aAAH,GAAmB;AADhC;AAAA;AAAA;AAAA;AAAA,cAZJ,eAeI;AAAQ,QAAA,OAAO,EAAEI,gBAAgB,GAAG0E,eAAH,GAAqBF,gBAAtD;AAAwE,QAAA,QAAQ,EAAE,CAACtE,MAAnF;AAAA,kBACKF,gBAAgB,GAAG,qBAAH,GAA2B;AADhD;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eA6BI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,iBACKY,eAAe,CAACE,KAAhB,CAAsBmF,GAAtB,CAA0B,CAACC,MAAD,EAASC,GAAT,KAAiB;AACxC,4BAAO,QAAC,SAAD;AAAqB,UAAA,UAAU,EAAEvH,QAAQ,CAACsH,MAAD;AAAzC,WAAgBC,GAAhB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA,CADL,EAIKvF,eAAe,CAACI,MAAhB,CAAuBiF,GAAvB,CAA2B,CAACC,MAAD,EAASC,GAAT,KAAiB;AACzC,4BAAO,QAAC,UAAD;AAAsB,UAAA,WAAW,EAAEvH,QAAQ,CAACsH,MAAD;AAA3C,WAAiBC,GAAjB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA,CAJL,EAOKvF,eAAe,CAACG,KAAhB,CAAsBkF,GAAtB,CAA0B,CAACC,MAAD,EAASC,GAAT,KAAiB;AACxC,4BAAO,QAAC,SAAD;AAAqB,UAAA,UAAU,EAAEvH,QAAQ,CAACsH,MAAD;AAAzC,WAAgBC,GAAhB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA,CAPL;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2CH;;GA7aQhH,I;UACWR,U;;;KADXQ,I;AA+aT,eAAeA,IAAf","sourcesContent":["//client sdk import\nimport HuddleClient, { emitter } from \"huddle01-client\";\n\n//react imports\nimport { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n//helper imports\nimport { getTrack } from \"../lib/utils/helpers\";\nimport { PeerVideo, PeerAudio, PeerScreen } from \"../components/PeerViewPort\";\nimport Onboard from 'bnc-onboard'\nimport Web3 from 'web3';\nimport axios from 'axios';\n\nfunction Room() {\n    const history = useHistory();\n    //to allow for recordings\n    const isBot = localStorage.getItem(\"bot_password\") === \"huddle01\";\n    //initialising states\n    const [huddle, setHuddle] = useState(null);\n    const [roomState, setRoomState] = useState(false);\n    const [micState, setMicState] = useState(false);\n    const [webcamState, setWebcamState] = useState(false);\n    const [screenshareState, setScreenshareState] = useState(false);\n    const [isHost, setIsHost] = useState(true);\n    const [beginTime, setBeginTime] = useState(new Date());\n    const [recAddress, setrecAddress] = useState(\"\");\n\n\n    let hostid = \"\";\n    const [peers, setPeers] = useState([]);\n    const [consumerStreams, setConsumerStreams] = useState({\n        video: [],\n        audio: [],\n        screen: [],\n    });\n\n    const meVideoElem = useRef(null);\n    const meScreenElem = useRef(null);\n    const joinRoomBtn = useRef(null);\n\n    const config = {\n        apiKey: \"i4pzqbpxza8vpijQMwZsP1H7nZZEH0TN3vR4NdNS\",\n        roomId: \"C131\",\n        peerId: \"Rick\" + Math.floor(Math.random() * 4000),\n        displayName: \"Rick Sanchez\",\n        window,\n        isBot, // true/false -- gets calculated on line 15\n    };\n\n    //initialize the app\n    useEffect(() => {\n        history.push(`?roomId=${config.roomId}`);\n\n        const myHuddleClient = new HuddleClient(config);\n        setHuddle(myHuddleClient);\n\n    }, []);\n    useEffect(() => {\n        console.log(\"peers array \", peers);\n        if (huddle) {\n            console.log(huddle);\n            if (huddle._hostId) {\n                if (huddle._hostId != huddle._peerId) {\n                    setIsHost(false);\n                }\n            }\n        }\n\n    }, [peers, huddle]);\n\n    //recording config\n    useEffect(() => {\n        //joinRoomBtn here can be whatever button/function used that calls `huddle.join()`\n        huddle && isBot && joinRoomBtn.current.click();\n    }, [huddle, isBot]);\n\n    const setupEventListeners = async () => {\n        emitter.on(\"roomState\", (state) => {\n            switch (state) {\n                case \"connected\":\n                    //do whatever\n                    break;\n                case \"failed\":\n                    //do whatever\n                    break;\n                case \"disconnected\":\n                    //do whatever\n                    break;\n                default:\n                    break;\n            }\n            setRoomState(state);\n        });\n\n        emitter.on(\"error\", (error) => {\n            alert(error);\n            //do whatever\n        });\n\n        emitter.on(\"addPeer\", (peer) => {\n            console.log(\"new peer =>\", peer);\n            setPeers((_peers) => [..._peers, peer]);\n        });\n\n        emitter.on(\"addProducer\", (producer) => {\n            console.log(\"new prod\", producer);\n            switch (producer.type) {\n                case \"webcam\":\n                    let videoStream = producer.track;\n                    if (typeof videoStream == \"object\") {\n                        try {\n                            meVideoElem.current.srcObject = getTrack(videoStream);\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    }\n                    break;\n                case \"mic\":\n                    //do whatever\n                    break;\n                case \"screen\":\n                    videoStream = producer.track;\n                    if (typeof videoStream == \"object\") {\n                        try {\n                            meScreenElem.current.srcObject = getTrack(videoStream);\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        emitter.on(\"removeProducer\", (producer) => {\n            console.log(\"remove \", producer);\n            switch (producer.type) {\n                case \"webcam\":\n                    try {\n                        meVideoElem.current.srcObject = null;\n                    } catch (error) {\n                        console.error(error);\n                    }\n                    break;\n                case \"mic\":\n                    //do whatever\n                    break;\n                case \"screen\":\n                    try {\n                        meScreenElem.current.srcObject = null;\n                    } catch (error) {\n                        console.error(error);\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        emitter.on(\"addConsumer\", (consumer) => {\n            switch (consumer.type) {\n                case \"webcam\": {\n                    const videoStream = consumer.track;\n                    setConsumerStreams((prevState) => ({\n                        ...prevState,\n                        video: [...prevState.video, videoStream],\n                    }));\n\n                    break;\n                }\n\n                case \"screen\": {\n                    const screenStream = consumer.track;\n                    setConsumerStreams((prevState) => ({\n                        ...prevState,\n                        screen: [...prevState.screen, screenStream],\n                    }));\n                    break;\n                }\n\n                case \"mic\": {\n                    const audioStream = consumer.track;\n                    setConsumerStreams((prevState) => ({\n                        ...prevState,\n                        audio: [...prevState.audio, audioStream],\n                    }));\n\n                    break;\n                }\n\n                default:\n                    break;\n            }\n        });\n\n        emitter.on(\"removeConsumer\", (consumer) => {\n            switch (consumer.type) {\n                case \"screen\":\n                    setConsumerStreams((prevState) => {\n                        return {\n                            ...prevState,\n                            screen: prevState.screen.filter(\n                                (_consumer) => _consumer.id !== consumer._id\n                            ),\n                        };\n                    });\n                    break;\n                case \"webcam\":\n                    setConsumerStreams((prevState) => {\n                        return {\n                            ...prevState,\n                            video: prevState.video.filter(\n                                (_consumer) => _consumer.id !== consumer._id\n                            ),\n                        };\n                    });\n                    break;\n                case \"mic\":\n                    setConsumerStreams((prevState) => {\n                        return {\n                            ...prevState,\n                            audio: prevState.audio.filter(\n                                (_consumer) => _consumer.id !== consumer._id\n                            ),\n                        };\n                    });\n                    break;\n\n                default:\n                    break;\n            }\n        });\n    };\n\n    const joinRoom = async () => {\n\n        if (!huddle)\n            return;\n        try {\n            setupEventListeners();\n            await huddle.join();\n            console.log(\"post join\", huddle);\n            setBeginTime(new Date());\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    const leaveRoom = async () => {\n\n        if (!huddle) return;\n        try {\n            await huddle.close();\n            setRoomState(false);\n            var secondBetweenTwoDate = Math.abs((new Date().getTime() - beginTime.getTime()) / 1000)\n            if (recAddress){\n                axios.post(`http://localhost:3001/transactions`, { timediff: secondBetweenTwoDate, receiverAddress: recAddress })\n                    .then(res => {\n                        console.log(res);\n                        console.log(res.data);\n                    })\n            }\n            console.log(secondBetweenTwoDate);\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    //TODO: add pauseWebcam() and resumeWebcam()\n    const enableWebcam = async () => {\n        if (!huddle) return;\n        try {\n            await huddle.enableWebcam();\n            setWebcamState(true);\n        } catch (error) {\n            setWebcamState(false);\n            alert(error);\n        }\n    };\n\n    const disableWebcam = async () => {\n        if (!huddle) return;\n        try {\n            await huddle.disableWebcam();\n            setWebcamState(false);\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    const startScreenshare = async () => {\n        if (!huddle) return;\n        try {\n            await huddle.enableShare();\n            setScreenshareState(true);\n        } catch (error) {\n            alert(error);\n            setScreenshareState(false);\n        }\n    };\n\n    const stopScreenshare = async () => {\n        if (!huddle) return;\n        try {\n            await huddle.disableShare();\n            setScreenshareState(false);\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    //TODO: add muteMic() and unmuteMic()\n    const enableMic = async () => {\n        if (!huddle) return;\n        try {\n            huddle.enableMic();\n            setMicState(true);\n        } catch (error) {\n            setMicState(false);\n            alert(error);\n        }\n    };\n\n    const disableMic = async () => {\n        if (!huddle) return;\n        try {\n            huddle.disableMic();\n            setMicState(false);\n        } catch (error) {\n            alert(error);\n            setMicState(true);\n        }\n    };\n\n    const startRecording = async () => {\n        if (!huddle) return;\n        try {\n            const status = await huddle.startRecording();\n            if (status) console.log(\"recording successfully initiated\");\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const stopRecorder = async () => {\n        if (!huddle) return;\n        try {\n            const status = await huddle.stopRecording();\n            if (status) console.log(\"recording successfully stopped\");\n        } catch (error) {\n            console.error(error);\n        }\n    };\n    const networkIds = {\n        'mainnet': 1,\n        'matic': 137,\n        'ropsten': 3,\n        'rinkeby': 4,\n        'goerli': 5,\n        'kovan': 42,\n        'matictestnet': 80001,\n        'ganache': 5777\n    }\n\n    let web3;\n\n\n\n    const onboard = Onboard({\n        dappId: '68159813-dea2-4d6c-8e1d-3657f5bb3a15',\n        networkId: networkIds.ganache,\n        subscriptions: {\n            wallet: wallet => {\n                web3 = new Web3(wallet.provider);\n                console.log(wallet.name, \" is now connected!\");\n\n            },\n            address: address => {\n                setrecAddress(address);\n                console.log(address);\n            }\n\n        },\n        walletCheck: [\n            { checkName: 'connect' },\n            { checkName: 'accounts' },\n            { checkName: 'network' },\n        ]\n    });\n    async function login() {\n        await onboard.walletSelect();\n        await onboard.walletCheck();\n    }\n\n\n\n    return (\n        <div className=\"App\">\n            <div>\n                <button onClick={login}>Login</button>\n            </div>\n            <div className=\"me-ports\">\n                <video height=\"400px\" width=\"400px\" autoPlay ref={meVideoElem} />\n                <video height=\"400px\" width=\"400px\" autoPlay ref={meScreenElem} />\n            </div>\n            <div className=\"btn-grp\">\n                <button\n                    ref={joinRoomBtn}\n                    id=\"join-btn\"\n                    onClick={roomState === \"connected\" ? leaveRoom : joinRoom}\n                >\n                    {roomState === \"connected\" ? \"Leave Room\" : \"Join Room\"}\n                </button>\n                { }\n                <button onClick={webcamState ? disableWebcam : enableWebcam} disabled={!isHost}>\n                    {webcamState ? \"Disable Webcam\" : \"Enable Webcam\"}\n                </button>\n                <button onClick={micState ? disableMic : enableMic} disabled={!isHost}>\n                    {micState ? \"Disable Mic\" : \"Enable Mic\"}\n                </button>\n                <button onClick={screenshareState ? stopScreenshare : startScreenshare} disabled={!isHost}>\n                    {screenshareState ? \"Disable Screenshare\" : \"Enable Screenshare\"}\n                </button>\n                {/* <button onClick={toggleWebcam}>Toggle Webcam</button> */}\n            </div>\n\n            <div className=\"peer-ports\">\n                {consumerStreams.video.map((stream, idx) => {\n                    return <PeerVideo key={idx} videoTrack={getTrack(stream)} />;\n                })}\n                {consumerStreams.screen.map((stream, idx) => {\n                    return <PeerScreen key={idx} screenTrack={getTrack(stream)} />;\n                })}\n                {consumerStreams.audio.map((stream, idx) => {\n                    return <PeerAudio key={idx} audioTrack={getTrack(stream)} />;\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}