{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegistryItem = void 0;\n\nconst bc_ur_1 = require(\"@ngraveio/bc-ur\");\n\nconst lib_1 = require(\"./lib\");\n\nclass RegistryItem {\n  constructor() {\n    this.toCBOR = () => {\n      if (this.toDataItem() === undefined) {\n        throw new Error(`#[ur-registry][RegistryItem][fn.toCBOR]: registry ${this.getRegistryType()}'s method toDataItem returns undefined`);\n      }\n\n      return lib_1.encodeDataItem(this.toDataItem());\n    };\n\n    this.toUR = () => {\n      return new bc_ur_1.UR(this.toCBOR(), this.getRegistryType().getType());\n    };\n\n    this.toUREncoder = (maxFragmentLength, firstSeqNum, minFragmentLength) => {\n      const ur = this.toUR();\n      const urEncoder = new bc_ur_1.UREncoder(ur, maxFragmentLength, firstSeqNum, minFragmentLength);\n      return urEncoder;\n    };\n  }\n\n}\n\nexports.RegistryItem = RegistryItem;","map":{"version":3,"sources":["../src/RegistryItem.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAGA,MAAsB,YAAtB,CAAkC;AAAlC,EAAA,WAAA,GAAA;AAGS,SAAA,MAAA,GAAS,MAAK;AACnB,UAAI,KAAK,UAAL,OAAsB,SAA1B,EAAqC;AACnC,cAAM,IAAI,KAAJ,CACJ,qDAAqD,KAAK,eAAL,EAAsB,wCADvE,CAAN;AAGD;;AACD,aAAO,KAAA,CAAA,cAAA,CAAe,KAAK,UAAL,EAAf,CAAP;AACD,KAPM;;AASA,SAAA,IAAA,GAAO,MAAK;AACjB,aAAO,IAAI,OAAA,CAAA,EAAJ,CAAO,KAAK,MAAL,EAAP,EAAsB,KAAK,eAAL,GAAuB,OAAvB,EAAtB,CAAP;AACD,KAFM;;AAIA,SAAA,WAAA,GAAc,CACnB,iBADmB,EAEnB,WAFmB,EAGnB,iBAHmB,KAIjB;AACF,YAAM,EAAE,GAAG,KAAK,IAAL,EAAX;AACA,YAAM,SAAS,GAAG,IAAI,OAAA,CAAA,SAAJ,CAChB,EADgB,EAEhB,iBAFgB,EAGhB,WAHgB,EAIhB,iBAJgB,CAAlB;AAMA,aAAO,SAAP;AACD,KAbM;AAcR;;AA9BiC;;AAAlC,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RegistryItem = void 0;\nconst bc_ur_1 = require(\"@ngraveio/bc-ur\");\nconst lib_1 = require(\"./lib\");\nclass RegistryItem {\n    constructor() {\n        this.toCBOR = () => {\n            if (this.toDataItem() === undefined) {\n                throw new Error(`#[ur-registry][RegistryItem][fn.toCBOR]: registry ${this.getRegistryType()}'s method toDataItem returns undefined`);\n            }\n            return lib_1.encodeDataItem(this.toDataItem());\n        };\n        this.toUR = () => {\n            return new bc_ur_1.UR(this.toCBOR(), this.getRegistryType().getType());\n        };\n        this.toUREncoder = (maxFragmentLength, firstSeqNum, minFragmentLength) => {\n            const ur = this.toUR();\n            const urEncoder = new bc_ur_1.UREncoder(ur, maxFragmentLength, firstSeqNum, minFragmentLength);\n            return urEncoder;\n        };\n    }\n}\nexports.RegistryItem = RegistryItem;\n//# sourceMappingURL=RegistryItem.js.map"]},"metadata":{},"sourceType":"script"}