{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteSdp = void 0;\n\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\n\nconst Logger_1 = require(\"../../Logger\");\n\nconst MediaSection_1 = require(\"./MediaSection\");\n\nconst logger = new Logger_1.Logger('RemoteSdp');\n\nclass RemoteSdp {\n  constructor({\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    plainRtpParameters,\n    planB = false\n  }) {\n    // MediaSection instances with same order as in the SDP.\n    this._mediaSections = []; // MediaSection indices indexed by MID.\n\n    this._midToIndex = new Map();\n    this._iceParameters = iceParameters;\n    this._iceCandidates = iceCandidates;\n    this._dtlsParameters = dtlsParameters;\n    this._sctpParameters = sctpParameters;\n    this._plainRtpParameters = plainRtpParameters;\n    this._planB = planB;\n    this._sdpObject = {\n      version: 0,\n      origin: {\n        address: '0.0.0.0',\n        ipVer: 4,\n        netType: 'IN',\n        sessionId: 10000,\n        sessionVersion: 0,\n        username: 'mediasoup-client'\n      },\n      name: '-',\n      timing: {\n        start: 0,\n        stop: 0\n      },\n      media: []\n    }; // If ICE parameters are given, add ICE-Lite indicator.\n\n    if (iceParameters && iceParameters.iceLite) {\n      this._sdpObject.icelite = 'ice-lite';\n    } // If DTLS parameters are given, assume WebRTC and BUNDLE.\n\n\n    if (dtlsParameters) {\n      this._sdpObject.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n      }; // NOTE: We take the latest fingerprint.\n\n      const numFingerprints = this._dtlsParameters.fingerprints.length;\n      this._sdpObject.fingerprint = {\n        type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n        hash: dtlsParameters.fingerprints[numFingerprints - 1].value\n      };\n      this._sdpObject.groups = [{\n        type: 'BUNDLE',\n        mids: ''\n      }];\n    } // If there are plain RPT parameters, override SDP origin.\n\n\n    if (plainRtpParameters) {\n      this._sdpObject.origin.address = plainRtpParameters.ip;\n      this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n    }\n  }\n\n  updateIceParameters(iceParameters) {\n    logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);\n    this._iceParameters = iceParameters;\n    this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n\n    for (const mediaSection of this._mediaSections) {\n      mediaSection.setIceParameters(iceParameters);\n    }\n  }\n\n  updateDtlsRole(role) {\n    logger.debug('updateDtlsRole() [role:%s]', role);\n    this._dtlsParameters.role = role;\n\n    for (const mediaSection of this._mediaSections) {\n      mediaSection.setDtlsRole(role);\n    }\n  }\n\n  getNextMediaSectionIdx() {\n    // If a closed media section is found, return its index.\n    for (let idx = 0; idx < this._mediaSections.length; ++idx) {\n      const mediaSection = this._mediaSections[idx];\n      if (mediaSection.closed) return {\n        idx,\n        reuseMid: mediaSection.mid\n      };\n    } // If no closed media section is found, return next one.\n\n\n    return {\n      idx: this._mediaSections.length\n    };\n  }\n\n  send({\n    offerMediaObject,\n    reuseMid,\n    offerRtpParameters,\n    answerRtpParameters,\n    codecOptions,\n    extmapAllowMixed = false\n  }) {\n    const mediaSection = new MediaSection_1.AnswerMediaSection({\n      iceParameters: this._iceParameters,\n      iceCandidates: this._iceCandidates,\n      dtlsParameters: this._dtlsParameters,\n      plainRtpParameters: this._plainRtpParameters,\n      planB: this._planB,\n      offerMediaObject,\n      offerRtpParameters,\n      answerRtpParameters,\n      codecOptions,\n      extmapAllowMixed\n    }); // Unified-Plan with closed media section replacement.\n\n    if (reuseMid) {\n      this._replaceMediaSection(mediaSection, reuseMid);\n    } // Unified-Plan or Plan-B with different media kind.\n    else if (!this._midToIndex.has(mediaSection.mid)) {\n      this._addMediaSection(mediaSection);\n    } // Plan-B with same media kind.\n    else {\n      this._replaceMediaSection(mediaSection);\n    }\n  }\n\n  receive({\n    mid,\n    kind,\n    offerRtpParameters,\n    streamId,\n    trackId\n  }) {\n    const idx = this._midToIndex.get(mid);\n\n    let mediaSection;\n    if (idx !== undefined) mediaSection = this._mediaSections[idx]; // Unified-Plan or different media kind.\n\n    if (!mediaSection) {\n      mediaSection = new MediaSection_1.OfferMediaSection({\n        iceParameters: this._iceParameters,\n        iceCandidates: this._iceCandidates,\n        dtlsParameters: this._dtlsParameters,\n        plainRtpParameters: this._plainRtpParameters,\n        planB: this._planB,\n        mid,\n        kind,\n        offerRtpParameters,\n        streamId,\n        trackId\n      }); // Let's try to recycle a closed media section (if any).\n      // NOTE: Yes, we can recycle a closed m=audio section with a new m=video.\n\n      const oldMediaSection = this._mediaSections.find(m => m.closed);\n\n      if (oldMediaSection) {\n        this._replaceMediaSection(mediaSection, oldMediaSection.mid);\n      } else {\n        this._addMediaSection(mediaSection);\n      }\n    } // Plan-B.\n    else {\n      mediaSection.planBReceive({\n        offerRtpParameters,\n        streamId,\n        trackId\n      });\n\n      this._replaceMediaSection(mediaSection);\n    }\n  }\n\n  disableMediaSection(mid) {\n    const idx = this._midToIndex.get(mid);\n\n    if (idx === undefined) {\n      throw new Error(`no media section found with mid '${mid}'`);\n    }\n\n    const mediaSection = this._mediaSections[idx];\n    mediaSection.disable();\n  }\n\n  closeMediaSection(mid) {\n    const idx = this._midToIndex.get(mid);\n\n    if (idx === undefined) {\n      throw new Error(`no media section found with mid '${mid}'`);\n    }\n\n    const mediaSection = this._mediaSections[idx]; // NOTE: Closing the first m section is a pain since it invalidates the\n    // bundled transport, so let's avoid it.\n\n    if (mid === this._firstMid) {\n      logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);\n      this.disableMediaSection(mid);\n      return;\n    }\n\n    mediaSection.close(); // Regenerate BUNDLE mids.\n\n    this._regenerateBundleMids();\n  }\n\n  planBStopReceiving({\n    mid,\n    offerRtpParameters\n  }) {\n    const idx = this._midToIndex.get(mid);\n\n    if (idx === undefined) {\n      throw new Error(`no media section found with mid '${mid}'`);\n    }\n\n    const mediaSection = this._mediaSections[idx];\n    mediaSection.planBStopReceiving({\n      offerRtpParameters\n    });\n\n    this._replaceMediaSection(mediaSection);\n  }\n\n  sendSctpAssociation({\n    offerMediaObject\n  }) {\n    const mediaSection = new MediaSection_1.AnswerMediaSection({\n      iceParameters: this._iceParameters,\n      iceCandidates: this._iceCandidates,\n      dtlsParameters: this._dtlsParameters,\n      sctpParameters: this._sctpParameters,\n      plainRtpParameters: this._plainRtpParameters,\n      offerMediaObject\n    });\n\n    this._addMediaSection(mediaSection);\n  }\n\n  receiveSctpAssociation({\n    oldDataChannelSpec = false\n  } = {}) {\n    const mediaSection = new MediaSection_1.OfferMediaSection({\n      iceParameters: this._iceParameters,\n      iceCandidates: this._iceCandidates,\n      dtlsParameters: this._dtlsParameters,\n      sctpParameters: this._sctpParameters,\n      plainRtpParameters: this._plainRtpParameters,\n      mid: 'datachannel',\n      kind: 'application',\n      oldDataChannelSpec\n    });\n\n    this._addMediaSection(mediaSection);\n  }\n\n  getSdp() {\n    // Increase SDP version.\n    this._sdpObject.origin.sessionVersion++;\n    return sdpTransform.write(this._sdpObject);\n  }\n\n  _addMediaSection(newMediaSection) {\n    if (!this._firstMid) this._firstMid = newMediaSection.mid; // Add to the vector.\n\n    this._mediaSections.push(newMediaSection); // Add to the map.\n\n\n    this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1); // Add to the SDP object.\n\n\n    this._sdpObject.media.push(newMediaSection.getObject()); // Regenerate BUNDLE mids.\n\n\n    this._regenerateBundleMids();\n  }\n\n  _replaceMediaSection(newMediaSection, reuseMid) {\n    // Store it in the map.\n    if (typeof reuseMid === 'string') {\n      const idx = this._midToIndex.get(reuseMid);\n\n      if (idx === undefined) {\n        throw new Error(`no media section found for reuseMid '${reuseMid}'`);\n      }\n\n      const oldMediaSection = this._mediaSections[idx]; // Replace the index in the vector with the new media section.\n\n      this._mediaSections[idx] = newMediaSection; // Update the map.\n\n      this._midToIndex.delete(oldMediaSection.mid);\n\n      this._midToIndex.set(newMediaSection.mid, idx); // Update the SDP object.\n\n\n      this._sdpObject.media[idx] = newMediaSection.getObject(); // Regenerate BUNDLE mids.\n\n      this._regenerateBundleMids();\n    } else {\n      const idx = this._midToIndex.get(newMediaSection.mid);\n\n      if (idx === undefined) {\n        throw new Error(`no media section found with mid '${newMediaSection.mid}'`);\n      } // Replace the index in the vector with the new media section.\n\n\n      this._mediaSections[idx] = newMediaSection; // Update the SDP object.\n\n      this._sdpObject.media[idx] = newMediaSection.getObject();\n    }\n  }\n\n  _regenerateBundleMids() {\n    if (!this._dtlsParameters) return;\n    this._sdpObject.groups[0].mids = this._mediaSections.filter(mediaSection => !mediaSection.closed).map(mediaSection => mediaSection.mid).join(' ');\n  }\n\n}\n\nexports.RemoteSdp = RemoteSdp;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","hasOwnProperty","call","exports","RemoteSdp","sdpTransform","require","Logger_1","MediaSection_1","logger","Logger","constructor","iceParameters","iceCandidates","dtlsParameters","sctpParameters","plainRtpParameters","planB","_mediaSections","_midToIndex","Map","_iceParameters","_iceCandidates","_dtlsParameters","_sctpParameters","_plainRtpParameters","_planB","_sdpObject","version","origin","address","ipVer","netType","sessionId","sessionVersion","username","name","timing","start","stop","media","iceLite","icelite","msidSemantic","semantic","token","numFingerprints","fingerprints","length","fingerprint","type","algorithm","hash","groups","mids","ip","ipVersion","updateIceParameters","debug","mediaSection","setIceParameters","updateDtlsRole","role","setDtlsRole","getNextMediaSectionIdx","idx","closed","reuseMid","mid","send","offerMediaObject","offerRtpParameters","answerRtpParameters","codecOptions","extmapAllowMixed","AnswerMediaSection","_replaceMediaSection","has","_addMediaSection","receive","kind","streamId","trackId","OfferMediaSection","oldMediaSection","find","planBReceive","disableMediaSection","Error","disable","closeMediaSection","_firstMid","close","_regenerateBundleMids","planBStopReceiving","sendSctpAssociation","receiveSctpAssociation","oldDataChannelSpec","getSdp","write","newMediaSection","push","set","getObject","delete","filter","map","join"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteSdp = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../../Logger\");\nconst MediaSection_1 = require(\"./MediaSection\");\nconst logger = new Logger_1.Logger('RemoteSdp');\nclass RemoteSdp {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false }) {\n        // MediaSection instances with same order as in the SDP.\n        this._mediaSections = [];\n        // MediaSection indices indexed by MID.\n        this._midToIndex = new Map();\n        this._iceParameters = iceParameters;\n        this._iceCandidates = iceCandidates;\n        this._dtlsParameters = dtlsParameters;\n        this._sctpParameters = sctpParameters;\n        this._plainRtpParameters = plainRtpParameters;\n        this._planB = planB;\n        this._sdpObject =\n            {\n                version: 0,\n                origin: {\n                    address: '0.0.0.0',\n                    ipVer: 4,\n                    netType: 'IN',\n                    sessionId: 10000,\n                    sessionVersion: 0,\n                    username: 'mediasoup-client'\n                },\n                name: '-',\n                timing: { start: 0, stop: 0 },\n                media: []\n            };\n        // If ICE parameters are given, add ICE-Lite indicator.\n        if (iceParameters && iceParameters.iceLite) {\n            this._sdpObject.icelite = 'ice-lite';\n        }\n        // If DTLS parameters are given, assume WebRTC and BUNDLE.\n        if (dtlsParameters) {\n            this._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };\n            // NOTE: We take the latest fingerprint.\n            const numFingerprints = this._dtlsParameters.fingerprints.length;\n            this._sdpObject.fingerprint =\n                {\n                    type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n                    hash: dtlsParameters.fingerprints[numFingerprints - 1].value\n                };\n            this._sdpObject.groups = [{ type: 'BUNDLE', mids: '' }];\n        }\n        // If there are plain RPT parameters, override SDP origin.\n        if (plainRtpParameters) {\n            this._sdpObject.origin.address = plainRtpParameters.ip;\n            this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n        }\n    }\n    updateIceParameters(iceParameters) {\n        logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);\n        this._iceParameters = iceParameters;\n        this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n        for (const mediaSection of this._mediaSections) {\n            mediaSection.setIceParameters(iceParameters);\n        }\n    }\n    updateDtlsRole(role) {\n        logger.debug('updateDtlsRole() [role:%s]', role);\n        this._dtlsParameters.role = role;\n        for (const mediaSection of this._mediaSections) {\n            mediaSection.setDtlsRole(role);\n        }\n    }\n    getNextMediaSectionIdx() {\n        // If a closed media section is found, return its index.\n        for (let idx = 0; idx < this._mediaSections.length; ++idx) {\n            const mediaSection = this._mediaSections[idx];\n            if (mediaSection.closed)\n                return { idx, reuseMid: mediaSection.mid };\n        }\n        // If no closed media section is found, return next one.\n        return { idx: this._mediaSections.length };\n    }\n    send({ offerMediaObject, reuseMid, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            planB: this._planB,\n            offerMediaObject,\n            offerRtpParameters,\n            answerRtpParameters,\n            codecOptions,\n            extmapAllowMixed\n        });\n        // Unified-Plan with closed media section replacement.\n        if (reuseMid) {\n            this._replaceMediaSection(mediaSection, reuseMid);\n        }\n        // Unified-Plan or Plan-B with different media kind.\n        else if (!this._midToIndex.has(mediaSection.mid)) {\n            this._addMediaSection(mediaSection);\n        }\n        // Plan-B with same media kind.\n        else {\n            this._replaceMediaSection(mediaSection);\n        }\n    }\n    receive({ mid, kind, offerRtpParameters, streamId, trackId }) {\n        const idx = this._midToIndex.get(mid);\n        let mediaSection;\n        if (idx !== undefined)\n            mediaSection = this._mediaSections[idx];\n        // Unified-Plan or different media kind.\n        if (!mediaSection) {\n            mediaSection = new MediaSection_1.OfferMediaSection({\n                iceParameters: this._iceParameters,\n                iceCandidates: this._iceCandidates,\n                dtlsParameters: this._dtlsParameters,\n                plainRtpParameters: this._plainRtpParameters,\n                planB: this._planB,\n                mid,\n                kind,\n                offerRtpParameters,\n                streamId,\n                trackId\n            });\n            // Let's try to recycle a closed media section (if any).\n            // NOTE: Yes, we can recycle a closed m=audio section with a new m=video.\n            const oldMediaSection = this._mediaSections.find((m) => (m.closed));\n            if (oldMediaSection) {\n                this._replaceMediaSection(mediaSection, oldMediaSection.mid);\n            }\n            else {\n                this._addMediaSection(mediaSection);\n            }\n        }\n        // Plan-B.\n        else {\n            mediaSection.planBReceive({ offerRtpParameters, streamId, trackId });\n            this._replaceMediaSection(mediaSection);\n        }\n    }\n    disableMediaSection(mid) {\n        const idx = this._midToIndex.get(mid);\n        if (idx === undefined) {\n            throw new Error(`no media section found with mid '${mid}'`);\n        }\n        const mediaSection = this._mediaSections[idx];\n        mediaSection.disable();\n    }\n    closeMediaSection(mid) {\n        const idx = this._midToIndex.get(mid);\n        if (idx === undefined) {\n            throw new Error(`no media section found with mid '${mid}'`);\n        }\n        const mediaSection = this._mediaSections[idx];\n        // NOTE: Closing the first m section is a pain since it invalidates the\n        // bundled transport, so let's avoid it.\n        if (mid === this._firstMid) {\n            logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);\n            this.disableMediaSection(mid);\n            return;\n        }\n        mediaSection.close();\n        // Regenerate BUNDLE mids.\n        this._regenerateBundleMids();\n    }\n    planBStopReceiving({ mid, offerRtpParameters }) {\n        const idx = this._midToIndex.get(mid);\n        if (idx === undefined) {\n            throw new Error(`no media section found with mid '${mid}'`);\n        }\n        const mediaSection = this._mediaSections[idx];\n        mediaSection.planBStopReceiving({ offerRtpParameters });\n        this._replaceMediaSection(mediaSection);\n    }\n    sendSctpAssociation({ offerMediaObject }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            sctpParameters: this._sctpParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            offerMediaObject\n        });\n        this._addMediaSection(mediaSection);\n    }\n    receiveSctpAssociation({ oldDataChannelSpec = false } = {}) {\n        const mediaSection = new MediaSection_1.OfferMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            sctpParameters: this._sctpParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            mid: 'datachannel',\n            kind: 'application',\n            oldDataChannelSpec\n        });\n        this._addMediaSection(mediaSection);\n    }\n    getSdp() {\n        // Increase SDP version.\n        this._sdpObject.origin.sessionVersion++;\n        return sdpTransform.write(this._sdpObject);\n    }\n    _addMediaSection(newMediaSection) {\n        if (!this._firstMid)\n            this._firstMid = newMediaSection.mid;\n        // Add to the vector.\n        this._mediaSections.push(newMediaSection);\n        // Add to the map.\n        this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);\n        // Add to the SDP object.\n        this._sdpObject.media.push(newMediaSection.getObject());\n        // Regenerate BUNDLE mids.\n        this._regenerateBundleMids();\n    }\n    _replaceMediaSection(newMediaSection, reuseMid) {\n        // Store it in the map.\n        if (typeof reuseMid === 'string') {\n            const idx = this._midToIndex.get(reuseMid);\n            if (idx === undefined) {\n                throw new Error(`no media section found for reuseMid '${reuseMid}'`);\n            }\n            const oldMediaSection = this._mediaSections[idx];\n            // Replace the index in the vector with the new media section.\n            this._mediaSections[idx] = newMediaSection;\n            // Update the map.\n            this._midToIndex.delete(oldMediaSection.mid);\n            this._midToIndex.set(newMediaSection.mid, idx);\n            // Update the SDP object.\n            this._sdpObject.media[idx] = newMediaSection.getObject();\n            // Regenerate BUNDLE mids.\n            this._regenerateBundleMids();\n        }\n        else {\n            const idx = this._midToIndex.get(newMediaSection.mid);\n            if (idx === undefined) {\n                throw new Error(`no media section found with mid '${newMediaSection.mid}'`);\n            }\n            // Replace the index in the vector with the new media section.\n            this._mediaSections[idx] = newMediaSection;\n            // Update the SDP object.\n            this._sdpObject.media[idx] = newMediaSection.getObject();\n        }\n    }\n    _regenerateBundleMids() {\n        if (!this._dtlsParameters)\n            return;\n        this._sdpObject.groups[0].mids = this._mediaSections\n            .filter((mediaSection) => !mediaSection.closed)\n            .map((mediaSection) => mediaSection.mid)\n            .join(' ');\n    }\n}\nexports.RemoteSdp = RemoteSdp;\n"]},"metadata":{},"sourceType":"script"}