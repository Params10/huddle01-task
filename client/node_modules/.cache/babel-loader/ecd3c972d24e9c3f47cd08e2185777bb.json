{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\n\nfunction getRtpEncodings({\n  offerMediaObject\n}) {\n  const ssrcs = new Set();\n\n  for (const line of offerMediaObject.ssrcs || []) {\n    const ssrc = line.id;\n    ssrcs.add(ssrc);\n  }\n\n  if (ssrcs.size === 0) throw new Error('no a=ssrc lines found');\n  const ssrcToRtxSsrc = new Map(); // First assume RTX is used.\n\n  for (const line of offerMediaObject.ssrcGroups || []) {\n    if (line.semantics !== 'FID') continue;\n    let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n    ssrc = Number(ssrc);\n    rtxSsrc = Number(rtxSsrc);\n\n    if (ssrcs.has(ssrc)) {\n      // Remove both the SSRC and RTX SSRC from the set so later we know that they\n      // are already handled.\n      ssrcs.delete(ssrc);\n      ssrcs.delete(rtxSsrc); // Add to the map.\n\n      ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n    }\n  } // If the set of SSRCs is not empty it means that RTX is not being used, so take\n  // media SSRCs from there.\n\n\n  for (const ssrc of ssrcs) {\n    // Add to the map.\n    ssrcToRtxSsrc.set(ssrc, null);\n  }\n\n  const encodings = [];\n\n  for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n    const encoding = {\n      ssrc\n    };\n    if (rtxSsrc) encoding.rtx = {\n      ssrc: rtxSsrc\n    };\n    encodings.push(encoding);\n  }\n\n  return encodings;\n}\n\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\n\nfunction addLegacySimulcast({\n  offerMediaObject,\n  numStreams\n}) {\n  if (numStreams <= 1) throw new TypeError('numStreams must be greater than 1'); // Get the SSRC.\n\n  const ssrcMsidLine = (offerMediaObject.ssrcs || []).find(line => line.attribute === 'msid');\n  if (!ssrcMsidLine) throw new Error('a=ssrc line with msid information not found');\n  const [streamId, trackId] = ssrcMsidLine.value.split(' ');\n  const firstSsrc = ssrcMsidLine.id;\n  let firstRtxSsrc; // Get the SSRC for RTX.\n\n  (offerMediaObject.ssrcGroups || []).some(line => {\n    if (line.semantics !== 'FID') return false;\n    const ssrcs = line.ssrcs.split(/\\s+/);\n\n    if (Number(ssrcs[0]) === firstSsrc) {\n      firstRtxSsrc = Number(ssrcs[1]);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  const ssrcCnameLine = offerMediaObject.ssrcs.find(line => line.attribute === 'cname');\n  if (!ssrcCnameLine) throw new Error('a=ssrc line with cname information not found');\n  const cname = ssrcCnameLine.value;\n  const ssrcs = [];\n  const rtxSsrcs = [];\n\n  for (let i = 0; i < numStreams; ++i) {\n    ssrcs.push(firstSsrc + i);\n    if (firstRtxSsrc) rtxSsrcs.push(firstRtxSsrc + i);\n  }\n\n  offerMediaObject.ssrcGroups = [];\n  offerMediaObject.ssrcs = [];\n  offerMediaObject.ssrcGroups.push({\n    semantics: 'SIM',\n    ssrcs: ssrcs.join(' ')\n  });\n\n  for (let i = 0; i < ssrcs.length; ++i) {\n    const ssrc = ssrcs[i];\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: `${streamId} ${trackId}`\n    });\n  }\n\n  for (let i = 0; i < rtxSsrcs.length; ++i) {\n    const ssrc = ssrcs[i];\n    const rtxSsrc = rtxSsrcs[i];\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'msid',\n      value: `${streamId} ${trackId}`\n    });\n    offerMediaObject.ssrcGroups.push({\n      semantics: 'FID',\n      ssrcs: `${ssrc} ${rtxSsrc}`\n    });\n  }\n}\n\nexports.addLegacySimulcast = addLegacySimulcast;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js"],"names":["Object","defineProperty","exports","value","addLegacySimulcast","getRtpEncodings","offerMediaObject","ssrcs","Set","line","ssrc","id","add","size","Error","ssrcToRtxSsrc","Map","ssrcGroups","semantics","rtxSsrc","split","Number","has","delete","set","encodings","encoding","rtx","push","numStreams","TypeError","ssrcMsidLine","find","attribute","streamId","trackId","firstSsrc","firstRtxSsrc","some","ssrcCnameLine","cname","rtxSsrcs","i","join","length"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\nfunction getRtpEncodings({ offerMediaObject }) {\n    const ssrcs = new Set();\n    for (const line of offerMediaObject.ssrcs || []) {\n        const ssrc = line.id;\n        ssrcs.add(ssrc);\n    }\n    if (ssrcs.size === 0)\n        throw new Error('no a=ssrc lines found');\n    const ssrcToRtxSsrc = new Map();\n    // First assume RTX is used.\n    for (const line of offerMediaObject.ssrcGroups || []) {\n        if (line.semantics !== 'FID')\n            continue;\n        let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n        ssrc = Number(ssrc);\n        rtxSsrc = Number(rtxSsrc);\n        if (ssrcs.has(ssrc)) {\n            // Remove both the SSRC and RTX SSRC from the set so later we know that they\n            // are already handled.\n            ssrcs.delete(ssrc);\n            ssrcs.delete(rtxSsrc);\n            // Add to the map.\n            ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n        }\n    }\n    // If the set of SSRCs is not empty it means that RTX is not being used, so take\n    // media SSRCs from there.\n    for (const ssrc of ssrcs) {\n        // Add to the map.\n        ssrcToRtxSsrc.set(ssrc, null);\n    }\n    const encodings = [];\n    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n        const encoding = { ssrc };\n        if (rtxSsrc)\n            encoding.rtx = { ssrc: rtxSsrc };\n        encodings.push(encoding);\n    }\n    return encodings;\n}\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast({ offerMediaObject, numStreams }) {\n    if (numStreams <= 1)\n        throw new TypeError('numStreams must be greater than 1');\n    // Get the SSRC.\n    const ssrcMsidLine = (offerMediaObject.ssrcs || [])\n        .find((line) => line.attribute === 'msid');\n    if (!ssrcMsidLine)\n        throw new Error('a=ssrc line with msid information not found');\n    const [streamId, trackId] = ssrcMsidLine.value.split(' ');\n    const firstSsrc = ssrcMsidLine.id;\n    let firstRtxSsrc;\n    // Get the SSRC for RTX.\n    (offerMediaObject.ssrcGroups || [])\n        .some((line) => {\n        if (line.semantics !== 'FID')\n            return false;\n        const ssrcs = line.ssrcs.split(/\\s+/);\n        if (Number(ssrcs[0]) === firstSsrc) {\n            firstRtxSsrc = Number(ssrcs[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    const ssrcCnameLine = offerMediaObject.ssrcs\n        .find((line) => line.attribute === 'cname');\n    if (!ssrcCnameLine)\n        throw new Error('a=ssrc line with cname information not found');\n    const cname = ssrcCnameLine.value;\n    const ssrcs = [];\n    const rtxSsrcs = [];\n    for (let i = 0; i < numStreams; ++i) {\n        ssrcs.push(firstSsrc + i);\n        if (firstRtxSsrc)\n            rtxSsrcs.push(firstRtxSsrc + i);\n    }\n    offerMediaObject.ssrcGroups = [];\n    offerMediaObject.ssrcs = [];\n    offerMediaObject.ssrcGroups.push({\n        semantics: 'SIM',\n        ssrcs: ssrcs.join(' ')\n    });\n    for (let i = 0; i < ssrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId} ${trackId}`\n        });\n    }\n    for (let i = 0; i < rtxSsrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        const rtxSsrc = rtxSsrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'msid',\n            value: `${streamId} ${trackId}`\n        });\n        offerMediaObject.ssrcGroups.push({\n            semantics: 'FID',\n            ssrcs: `${ssrc} ${rtxSsrc}`\n        });\n    }\n}\nexports.addLegacySimulcast = addLegacySimulcast;\n"]},"metadata":{},"sourceType":"script"}