{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataProducer = void 0;\n\nconst Logger_1 = require(\"./Logger\");\n\nconst EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\n\nconst errors_1 = require(\"./errors\");\n\nconst logger = new Logger_1.Logger('DataProducer');\n\nclass DataProducer extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n  /**\n   * @emits transportclose\n   * @emits open\n   * @emits error - (error: Error)\n   * @emits close\n   * @emits bufferedamountlow\n   * @emits @close\n   */\n  constructor({\n    id,\n    dataChannel,\n    sctpStreamParameters,\n    appData\n  }) {\n    super(); // Closed flag.\n\n    this._closed = false; // Observer instance.\n\n    this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n    logger.debug('constructor()');\n    this._id = id;\n    this._dataChannel = dataChannel;\n    this._sctpStreamParameters = sctpStreamParameters;\n    this._appData = appData;\n\n    this._handleDataChannel();\n  }\n  /**\n   * DataProducer id.\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * Whether the DataProducer is closed.\n   */\n\n\n  get closed() {\n    return this._closed;\n  }\n  /**\n   * SCTP stream parameters.\n   */\n\n\n  get sctpStreamParameters() {\n    return this._sctpStreamParameters;\n  }\n  /**\n   * DataChannel readyState.\n   */\n\n\n  get readyState() {\n    return this._dataChannel.readyState;\n  }\n  /**\n   * DataChannel label.\n   */\n\n\n  get label() {\n    return this._dataChannel.label;\n  }\n  /**\n   * DataChannel protocol.\n   */\n\n\n  get protocol() {\n    return this._dataChannel.protocol;\n  }\n  /**\n   * DataChannel bufferedAmount.\n   */\n\n\n  get bufferedAmount() {\n    return this._dataChannel.bufferedAmount;\n  }\n  /**\n   * DataChannel bufferedAmountLowThreshold.\n   */\n\n\n  get bufferedAmountLowThreshold() {\n    return this._dataChannel.bufferedAmountLowThreshold;\n  }\n  /**\n   * Set DataChannel bufferedAmountLowThreshold.\n   */\n\n\n  set bufferedAmountLowThreshold(bufferedAmountLowThreshold) {\n    this._dataChannel.bufferedAmountLowThreshold = bufferedAmountLowThreshold;\n  }\n  /**\n   * App custom data.\n   */\n\n\n  get appData() {\n    return this._appData;\n  }\n  /**\n   * Invalid setter.\n   */\n\n\n  set appData(appData) {\n    throw new Error('cannot override appData object');\n  }\n  /**\n   * Observer.\n   *\n   * @emits close\n   */\n\n\n  get observer() {\n    return this._observer;\n  }\n  /**\n   * Closes the DataProducer.\n   */\n\n\n  close() {\n    if (this._closed) return;\n    logger.debug('close()');\n    this._closed = true;\n\n    this._dataChannel.close();\n\n    this.emit('@close'); // Emit observer event.\n\n    this._observer.safeEmit('close');\n  }\n  /**\n   * Transport was closed.\n   */\n\n\n  transportClosed() {\n    if (this._closed) return;\n    logger.debug('transportClosed()');\n    this._closed = true;\n\n    this._dataChannel.close();\n\n    this.safeEmit('transportclose'); // Emit observer event.\n\n    this._observer.safeEmit('close');\n  }\n  /**\n   * Send a message.\n   *\n   * @param {String|Blob|ArrayBuffer|ArrayBufferView} data.\n   */\n\n\n  send(data) {\n    logger.debug('send()');\n    if (this._closed) throw new errors_1.InvalidStateError('closed');\n\n    this._dataChannel.send(data);\n  }\n\n  _handleDataChannel() {\n    this._dataChannel.addEventListener('open', () => {\n      if (this._closed) return;\n      logger.debug('DataChannel \"open\" event');\n      this.safeEmit('open');\n    });\n\n    this._dataChannel.addEventListener('error', event => {\n      if (this._closed) return;\n      let {\n        error\n      } = event;\n      if (!error) error = new Error('unknown DataChannel error');\n\n      if (error.errorDetail === 'sctp-failure') {\n        logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);\n      } else {\n        logger.error('DataChannel \"error\" event: %o', error);\n      }\n\n      this.safeEmit('error', error);\n    });\n\n    this._dataChannel.addEventListener('close', () => {\n      if (this._closed) return;\n      logger.warn('DataChannel \"close\" event');\n      this._closed = true;\n      this.emit('@close');\n      this.safeEmit('close');\n    });\n\n    this._dataChannel.addEventListener('message', () => {\n      if (this._closed) return;\n      logger.warn('DataChannel \"message\" event in a DataProducer, message discarded');\n    });\n\n    this._dataChannel.addEventListener('bufferedamountlow', () => {\n      if (this._closed) return;\n      this.safeEmit('bufferedamountlow');\n    });\n  }\n\n}\n\nexports.DataProducer = DataProducer;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/mediasoup-client/lib/DataProducer.js"],"names":["Object","defineProperty","exports","value","DataProducer","Logger_1","require","EnhancedEventEmitter_1","errors_1","logger","Logger","EnhancedEventEmitter","constructor","id","dataChannel","sctpStreamParameters","appData","_closed","_observer","debug","_id","_dataChannel","_sctpStreamParameters","_appData","_handleDataChannel","closed","readyState","label","protocol","bufferedAmount","bufferedAmountLowThreshold","Error","observer","close","emit","safeEmit","transportClosed","send","data","InvalidStateError","addEventListener","event","error","errorDetail","sctpCauseCode","message","warn"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,wBAAD,CAAtC;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMG,MAAM,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CAAoB,cAApB,CAAf;;AACA,MAAMN,YAAN,SAA2BG,sBAAsB,CAACI,oBAAlD,CAAuE;AACnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,WAAN;AAAmBC,IAAAA,oBAAnB;AAAyCC,IAAAA;AAAzC,GAAD,EAAqD;AAC5D,YAD4D,CAE5D;;AACA,SAAKC,OAAL,GAAe,KAAf,CAH4D,CAI5D;;AACA,SAAKC,SAAL,GAAiB,IAAIX,sBAAsB,CAACI,oBAA3B,EAAjB;AACAF,IAAAA,MAAM,CAACU,KAAP,CAAa,eAAb;AACA,SAAKC,GAAL,GAAWP,EAAX;AACA,SAAKQ,YAAL,GAAoBP,WAApB;AACA,SAAKQ,qBAAL,GAA6BP,oBAA7B;AACA,SAAKQ,QAAL,GAAgBP,OAAhB;;AACA,SAAKQ,kBAAL;AACH;AACD;AACJ;AACA;;;AACU,MAAFX,EAAE,GAAG;AACL,WAAO,KAAKO,GAAZ;AACH;AACD;AACJ;AACA;;;AACc,MAANK,MAAM,GAAG;AACT,WAAO,KAAKR,OAAZ;AACH;AACD;AACJ;AACA;;;AAC4B,MAApBF,oBAAoB,GAAG;AACvB,WAAO,KAAKO,qBAAZ;AACH;AACD;AACJ;AACA;;;AACkB,MAAVI,UAAU,GAAG;AACb,WAAO,KAAKL,YAAL,CAAkBK,UAAzB;AACH;AACD;AACJ;AACA;;;AACa,MAALC,KAAK,GAAG;AACR,WAAO,KAAKN,YAAL,CAAkBM,KAAzB;AACH;AACD;AACJ;AACA;;;AACgB,MAARC,QAAQ,GAAG;AACX,WAAO,KAAKP,YAAL,CAAkBO,QAAzB;AACH;AACD;AACJ;AACA;;;AACsB,MAAdC,cAAc,GAAG;AACjB,WAAO,KAAKR,YAAL,CAAkBQ,cAAzB;AACH;AACD;AACJ;AACA;;;AACkC,MAA1BC,0BAA0B,GAAG;AAC7B,WAAO,KAAKT,YAAL,CAAkBS,0BAAzB;AACH;AACD;AACJ;AACA;;;AACkC,MAA1BA,0BAA0B,CAACA,0BAAD,EAA6B;AACvD,SAAKT,YAAL,CAAkBS,0BAAlB,GAA+CA,0BAA/C;AACH;AACD;AACJ;AACA;;;AACe,MAAPd,OAAO,GAAG;AACV,WAAO,KAAKO,QAAZ;AACH;AACD;AACJ;AACA;;;AACe,MAAPP,OAAO,CAACA,OAAD,EAAU;AACjB,UAAM,IAAIe,KAAJ,CAAU,gCAAV,CAAN;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACgB,MAARC,QAAQ,GAAG;AACX,WAAO,KAAKd,SAAZ;AACH;AACD;AACJ;AACA;;;AACIe,EAAAA,KAAK,GAAG;AACJ,QAAI,KAAKhB,OAAT,EACI;AACJR,IAAAA,MAAM,CAACU,KAAP,CAAa,SAAb;AACA,SAAKF,OAAL,GAAe,IAAf;;AACA,SAAKI,YAAL,CAAkBY,KAAlB;;AACA,SAAKC,IAAL,CAAU,QAAV,EANI,CAOJ;;AACA,SAAKhB,SAAL,CAAeiB,QAAf,CAAwB,OAAxB;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKnB,OAAT,EACI;AACJR,IAAAA,MAAM,CAACU,KAAP,CAAa,mBAAb;AACA,SAAKF,OAAL,GAAe,IAAf;;AACA,SAAKI,YAAL,CAAkBY,KAAlB;;AACA,SAAKE,QAAL,CAAc,gBAAd,EANc,CAOd;;AACA,SAAKjB,SAAL,CAAeiB,QAAf,CAAwB,OAAxB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,IAAI,CAACC,IAAD,EAAO;AACP7B,IAAAA,MAAM,CAACU,KAAP,CAAa,QAAb;AACA,QAAI,KAAKF,OAAT,EACI,MAAM,IAAIT,QAAQ,CAAC+B,iBAAb,CAA+B,QAA/B,CAAN;;AACJ,SAAKlB,YAAL,CAAkBgB,IAAlB,CAAuBC,IAAvB;AACH;;AACDd,EAAAA,kBAAkB,GAAG;AACjB,SAAKH,YAAL,CAAkBmB,gBAAlB,CAAmC,MAAnC,EAA2C,MAAM;AAC7C,UAAI,KAAKvB,OAAT,EACI;AACJR,MAAAA,MAAM,CAACU,KAAP,CAAa,0BAAb;AACA,WAAKgB,QAAL,CAAc,MAAd;AACH,KALD;;AAMA,SAAKd,YAAL,CAAkBmB,gBAAlB,CAAmC,OAAnC,EAA6CC,KAAD,IAAW;AACnD,UAAI,KAAKxB,OAAT,EACI;AACJ,UAAI;AAAEyB,QAAAA;AAAF,UAAYD,KAAhB;AACA,UAAI,CAACC,KAAL,EACIA,KAAK,GAAG,IAAIX,KAAJ,CAAU,2BAAV,CAAR;;AACJ,UAAIW,KAAK,CAACC,WAAN,KAAsB,cAA1B,EAA0C;AACtClC,QAAAA,MAAM,CAACiC,KAAP,CAAa,+CAAb,EAA8DA,KAAK,CAACE,aAApE,EAAmFF,KAAK,CAACG,OAAzF;AACH,OAFD,MAGK;AACDpC,QAAAA,MAAM,CAACiC,KAAP,CAAa,+BAAb,EAA8CA,KAA9C;AACH;;AACD,WAAKP,QAAL,CAAc,OAAd,EAAuBO,KAAvB;AACH,KAbD;;AAcA,SAAKrB,YAAL,CAAkBmB,gBAAlB,CAAmC,OAAnC,EAA4C,MAAM;AAC9C,UAAI,KAAKvB,OAAT,EACI;AACJR,MAAAA,MAAM,CAACqC,IAAP,CAAY,2BAAZ;AACA,WAAK7B,OAAL,GAAe,IAAf;AACA,WAAKiB,IAAL,CAAU,QAAV;AACA,WAAKC,QAAL,CAAc,OAAd;AACH,KAPD;;AAQA,SAAKd,YAAL,CAAkBmB,gBAAlB,CAAmC,SAAnC,EAA8C,MAAM;AAChD,UAAI,KAAKvB,OAAT,EACI;AACJR,MAAAA,MAAM,CAACqC,IAAP,CAAY,kEAAZ;AACH,KAJD;;AAKA,SAAKzB,YAAL,CAAkBmB,gBAAlB,CAAmC,mBAAnC,EAAwD,MAAM;AAC1D,UAAI,KAAKvB,OAAT,EACI;AACJ,WAAKkB,QAAL,CAAc,mBAAd;AACH,KAJD;AAKH;;AA5KkE;;AA8KvEjC,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataProducer = void 0;\nconst Logger_1 = require(\"./Logger\");\nconst EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\nconst errors_1 = require(\"./errors\");\nconst logger = new Logger_1.Logger('DataProducer');\nclass DataProducer extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n    /**\n     * @emits transportclose\n     * @emits open\n     * @emits error - (error: Error)\n     * @emits close\n     * @emits bufferedamountlow\n     * @emits @close\n     */\n    constructor({ id, dataChannel, sctpStreamParameters, appData }) {\n        super();\n        // Closed flag.\n        this._closed = false;\n        // Observer instance.\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger.debug('constructor()');\n        this._id = id;\n        this._dataChannel = dataChannel;\n        this._sctpStreamParameters = sctpStreamParameters;\n        this._appData = appData;\n        this._handleDataChannel();\n    }\n    /**\n     * DataProducer id.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Whether the DataProducer is closed.\n     */\n    get closed() {\n        return this._closed;\n    }\n    /**\n     * SCTP stream parameters.\n     */\n    get sctpStreamParameters() {\n        return this._sctpStreamParameters;\n    }\n    /**\n     * DataChannel readyState.\n     */\n    get readyState() {\n        return this._dataChannel.readyState;\n    }\n    /**\n     * DataChannel label.\n     */\n    get label() {\n        return this._dataChannel.label;\n    }\n    /**\n     * DataChannel protocol.\n     */\n    get protocol() {\n        return this._dataChannel.protocol;\n    }\n    /**\n     * DataChannel bufferedAmount.\n     */\n    get bufferedAmount() {\n        return this._dataChannel.bufferedAmount;\n    }\n    /**\n     * DataChannel bufferedAmountLowThreshold.\n     */\n    get bufferedAmountLowThreshold() {\n        return this._dataChannel.bufferedAmountLowThreshold;\n    }\n    /**\n     * Set DataChannel bufferedAmountLowThreshold.\n     */\n    set bufferedAmountLowThreshold(bufferedAmountLowThreshold) {\n        this._dataChannel.bufferedAmountLowThreshold = bufferedAmountLowThreshold;\n    }\n    /**\n     * App custom data.\n     */\n    get appData() {\n        return this._appData;\n    }\n    /**\n     * Invalid setter.\n     */\n    set appData(appData) {\n        throw new Error('cannot override appData object');\n    }\n    /**\n     * Observer.\n     *\n     * @emits close\n     */\n    get observer() {\n        return this._observer;\n    }\n    /**\n     * Closes the DataProducer.\n     */\n    close() {\n        if (this._closed)\n            return;\n        logger.debug('close()');\n        this._closed = true;\n        this._dataChannel.close();\n        this.emit('@close');\n        // Emit observer event.\n        this._observer.safeEmit('close');\n    }\n    /**\n     * Transport was closed.\n     */\n    transportClosed() {\n        if (this._closed)\n            return;\n        logger.debug('transportClosed()');\n        this._closed = true;\n        this._dataChannel.close();\n        this.safeEmit('transportclose');\n        // Emit observer event.\n        this._observer.safeEmit('close');\n    }\n    /**\n     * Send a message.\n     *\n     * @param {String|Blob|ArrayBuffer|ArrayBufferView} data.\n     */\n    send(data) {\n        logger.debug('send()');\n        if (this._closed)\n            throw new errors_1.InvalidStateError('closed');\n        this._dataChannel.send(data);\n    }\n    _handleDataChannel() {\n        this._dataChannel.addEventListener('open', () => {\n            if (this._closed)\n                return;\n            logger.debug('DataChannel \"open\" event');\n            this.safeEmit('open');\n        });\n        this._dataChannel.addEventListener('error', (event) => {\n            if (this._closed)\n                return;\n            let { error } = event;\n            if (!error)\n                error = new Error('unknown DataChannel error');\n            if (error.errorDetail === 'sctp-failure') {\n                logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);\n            }\n            else {\n                logger.error('DataChannel \"error\" event: %o', error);\n            }\n            this.safeEmit('error', error);\n        });\n        this._dataChannel.addEventListener('close', () => {\n            if (this._closed)\n                return;\n            logger.warn('DataChannel \"close\" event');\n            this._closed = true;\n            this.emit('@close');\n            this.safeEmit('close');\n        });\n        this._dataChannel.addEventListener('message', () => {\n            if (this._closed)\n                return;\n            logger.warn('DataChannel \"message\" event in a DataProducer, message discarded');\n        });\n        this._dataChannel.addEventListener('bufferedamountlow', () => {\n            if (this._closed)\n                return;\n            this.safeEmit('bufferedamountlow');\n        });\n    }\n}\nexports.DataProducer = DataProducer;\n"]},"metadata":{},"sourceType":"script"}