{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Consumer = void 0;\n\nconst Logger_1 = require(\"./Logger\");\n\nconst EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\n\nconst errors_1 = require(\"./errors\");\n\nconst logger = new Logger_1.Logger('Consumer');\n\nclass Consumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n  /**\n   * @emits transportclose\n   * @emits trackended\n   * @emits @getstats\n   * @emits @close\n   */\n  constructor({\n    id,\n    localId,\n    producerId,\n    rtpReceiver,\n    track,\n    rtpParameters,\n    appData\n  }) {\n    super(); // Closed flag.\n\n    this._closed = false; // Observer instance.\n\n    this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n    logger.debug('constructor()');\n    this._id = id;\n    this._localId = localId;\n    this._producerId = producerId;\n    this._rtpReceiver = rtpReceiver;\n    this._track = track;\n    this._rtpParameters = rtpParameters;\n    this._paused = !track.enabled;\n    this._appData = appData;\n    this._onTrackEnded = this._onTrackEnded.bind(this);\n\n    this._handleTrack();\n  }\n  /**\n   * Consumer id.\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * Local id.\n   */\n\n\n  get localId() {\n    return this._localId;\n  }\n  /**\n   * Associated Producer id.\n   */\n\n\n  get producerId() {\n    return this._producerId;\n  }\n  /**\n   * Whether the Consumer is closed.\n   */\n\n\n  get closed() {\n    return this._closed;\n  }\n  /**\n   * Media kind.\n   */\n\n\n  get kind() {\n    return this._track.kind;\n  }\n  /**\n   * Associated RTCRtpReceiver.\n   */\n\n\n  get rtpReceiver() {\n    return this._rtpReceiver;\n  }\n  /**\n   * The associated track.\n   */\n\n\n  get track() {\n    return this._track;\n  }\n  /**\n   * RTP parameters.\n   */\n\n\n  get rtpParameters() {\n    return this._rtpParameters;\n  }\n  /**\n   * Whether the Consumer is paused.\n   */\n\n\n  get paused() {\n    return this._paused;\n  }\n  /**\n   * App custom data.\n   */\n\n\n  get appData() {\n    return this._appData;\n  }\n  /**\n   * Invalid setter.\n   */\n\n\n  set appData(appData) {\n    throw new Error('cannot override appData object');\n  }\n  /**\n   * Observer.\n   *\n   * @emits close\n   * @emits pause\n   * @emits resume\n   * @emits trackended\n   */\n\n\n  get observer() {\n    return this._observer;\n  }\n  /**\n   * Closes the Consumer.\n   */\n\n\n  close() {\n    if (this._closed) return;\n    logger.debug('close()');\n    this._closed = true;\n\n    this._destroyTrack();\n\n    this.emit('@close'); // Emit observer event.\n\n    this._observer.safeEmit('close');\n  }\n  /**\n   * Transport was closed.\n   */\n\n\n  transportClosed() {\n    if (this._closed) return;\n    logger.debug('transportClosed()');\n    this._closed = true;\n\n    this._destroyTrack();\n\n    this.safeEmit('transportclose'); // Emit observer event.\n\n    this._observer.safeEmit('close');\n  }\n  /**\n   * Get associated RTCRtpReceiver stats.\n   */\n\n\n  async getStats() {\n    if (this._closed) throw new errors_1.InvalidStateError('closed');\n    return this.safeEmitAsPromise('@getstats');\n  }\n  /**\n   * Pauses receiving media.\n   */\n\n\n  pause() {\n    logger.debug('pause()');\n\n    if (this._closed) {\n      logger.error('pause() | Consumer closed');\n      return;\n    }\n\n    this._paused = true;\n    this._track.enabled = false; // Emit observer event.\n\n    this._observer.safeEmit('pause');\n  }\n  /**\n   * Resumes receiving media.\n   */\n\n\n  resume() {\n    logger.debug('resume()');\n\n    if (this._closed) {\n      logger.error('resume() | Consumer closed');\n      return;\n    }\n\n    this._paused = false;\n    this._track.enabled = true; // Emit observer event.\n\n    this._observer.safeEmit('resume');\n  }\n\n  _onTrackEnded() {\n    logger.debug('track \"ended\" event');\n    this.safeEmit('trackended'); // Emit observer event.\n\n    this._observer.safeEmit('trackended');\n  }\n\n  _handleTrack() {\n    this._track.addEventListener('ended', this._onTrackEnded);\n  }\n\n  _destroyTrack() {\n    try {\n      this._track.removeEventListener('ended', this._onTrackEnded);\n\n      this._track.stop();\n    } catch (error) {}\n  }\n\n}\n\nexports.Consumer = Consumer;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/mediasoup-client/lib/Consumer.js"],"names":["Object","defineProperty","exports","value","Consumer","Logger_1","require","EnhancedEventEmitter_1","errors_1","logger","Logger","EnhancedEventEmitter","constructor","id","localId","producerId","rtpReceiver","track","rtpParameters","appData","_closed","_observer","debug","_id","_localId","_producerId","_rtpReceiver","_track","_rtpParameters","_paused","enabled","_appData","_onTrackEnded","bind","_handleTrack","closed","kind","paused","Error","observer","close","_destroyTrack","emit","safeEmit","transportClosed","getStats","InvalidStateError","safeEmitAsPromise","pause","error","resume","addEventListener","removeEventListener","stop"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Consumer = void 0;\nconst Logger_1 = require(\"./Logger\");\nconst EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\nconst errors_1 = require(\"./errors\");\nconst logger = new Logger_1.Logger('Consumer');\nclass Consumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n    /**\n     * @emits transportclose\n     * @emits trackended\n     * @emits @getstats\n     * @emits @close\n     */\n    constructor({ id, localId, producerId, rtpReceiver, track, rtpParameters, appData }) {\n        super();\n        // Closed flag.\n        this._closed = false;\n        // Observer instance.\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger.debug('constructor()');\n        this._id = id;\n        this._localId = localId;\n        this._producerId = producerId;\n        this._rtpReceiver = rtpReceiver;\n        this._track = track;\n        this._rtpParameters = rtpParameters;\n        this._paused = !track.enabled;\n        this._appData = appData;\n        this._onTrackEnded = this._onTrackEnded.bind(this);\n        this._handleTrack();\n    }\n    /**\n     * Consumer id.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Local id.\n     */\n    get localId() {\n        return this._localId;\n    }\n    /**\n     * Associated Producer id.\n     */\n    get producerId() {\n        return this._producerId;\n    }\n    /**\n     * Whether the Consumer is closed.\n     */\n    get closed() {\n        return this._closed;\n    }\n    /**\n     * Media kind.\n     */\n    get kind() {\n        return this._track.kind;\n    }\n    /**\n     * Associated RTCRtpReceiver.\n     */\n    get rtpReceiver() {\n        return this._rtpReceiver;\n    }\n    /**\n     * The associated track.\n     */\n    get track() {\n        return this._track;\n    }\n    /**\n     * RTP parameters.\n     */\n    get rtpParameters() {\n        return this._rtpParameters;\n    }\n    /**\n     * Whether the Consumer is paused.\n     */\n    get paused() {\n        return this._paused;\n    }\n    /**\n     * App custom data.\n     */\n    get appData() {\n        return this._appData;\n    }\n    /**\n     * Invalid setter.\n     */\n    set appData(appData) {\n        throw new Error('cannot override appData object');\n    }\n    /**\n     * Observer.\n     *\n     * @emits close\n     * @emits pause\n     * @emits resume\n     * @emits trackended\n     */\n    get observer() {\n        return this._observer;\n    }\n    /**\n     * Closes the Consumer.\n     */\n    close() {\n        if (this._closed)\n            return;\n        logger.debug('close()');\n        this._closed = true;\n        this._destroyTrack();\n        this.emit('@close');\n        // Emit observer event.\n        this._observer.safeEmit('close');\n    }\n    /**\n     * Transport was closed.\n     */\n    transportClosed() {\n        if (this._closed)\n            return;\n        logger.debug('transportClosed()');\n        this._closed = true;\n        this._destroyTrack();\n        this.safeEmit('transportclose');\n        // Emit observer event.\n        this._observer.safeEmit('close');\n    }\n    /**\n     * Get associated RTCRtpReceiver stats.\n     */\n    async getStats() {\n        if (this._closed)\n            throw new errors_1.InvalidStateError('closed');\n        return this.safeEmitAsPromise('@getstats');\n    }\n    /**\n     * Pauses receiving media.\n     */\n    pause() {\n        logger.debug('pause()');\n        if (this._closed) {\n            logger.error('pause() | Consumer closed');\n            return;\n        }\n        this._paused = true;\n        this._track.enabled = false;\n        // Emit observer event.\n        this._observer.safeEmit('pause');\n    }\n    /**\n     * Resumes receiving media.\n     */\n    resume() {\n        logger.debug('resume()');\n        if (this._closed) {\n            logger.error('resume() | Consumer closed');\n            return;\n        }\n        this._paused = false;\n        this._track.enabled = true;\n        // Emit observer event.\n        this._observer.safeEmit('resume');\n    }\n    _onTrackEnded() {\n        logger.debug('track \"ended\" event');\n        this.safeEmit('trackended');\n        // Emit observer event.\n        this._observer.safeEmit('trackended');\n    }\n    _handleTrack() {\n        this._track.addEventListener('ended', this._onTrackEnded);\n    }\n    _destroyTrack() {\n        try {\n            this._track.removeEventListener('ended', this._onTrackEnded);\n            this._track.stop();\n        }\n        catch (error) { }\n    }\n}\nexports.Consumer = Consumer;\n"]},"metadata":{},"sourceType":"script"}