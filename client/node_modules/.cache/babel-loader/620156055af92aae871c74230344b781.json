{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoOutput = void 0;\n\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\n\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\n\nconst lib_1 = require(\"./lib\");\n\nconst MultiKey_1 = require(\"./MultiKey\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nconst ScriptExpression_1 = require(\"./ScriptExpression\");\n\nclass CryptoOutput extends RegistryItem_1.RegistryItem {\n  constructor(scriptExpressions, cryptoKey) {\n    super();\n    this.scriptExpressions = scriptExpressions;\n    this.cryptoKey = cryptoKey;\n\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_OUTPUT;\n    };\n\n    this.getCryptoKey = () => this.cryptoKey;\n\n    this.getHDKey = () => {\n      if (this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n\n    this.getECKey = () => {\n      if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n\n    this.getMultiKey = () => {\n      if (this.cryptoKey instanceof MultiKey_1.MultiKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n\n    this.getScriptExpressions = () => this.scriptExpressions;\n\n    this.toDataItem = () => {\n      let dataItem = this.cryptoKey.toDataItem();\n\n      if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey || this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n        dataItem.setTag(this.cryptoKey.getRegistryType().getTag());\n      }\n\n      const clonedSe = [...this.scriptExpressions];\n      clonedSe.reverse().forEach(se => {\n        const tagValue = se.getTag();\n\n        if (dataItem.getTag() === undefined) {\n          dataItem.setTag(tagValue);\n        } else {\n          dataItem = new lib_1.DataItem(dataItem, tagValue);\n        }\n      });\n      return dataItem;\n    };\n  }\n\n}\n\nexports.CryptoOutput = CryptoOutput;\n\nCryptoOutput.fromDataItem = dataItem => {\n  const scriptExpressions = [];\n  let _dataItem = dataItem;\n\n  while (true) {\n    let _tag = _dataItem.getTag() || undefined;\n\n    const se = ScriptExpression_1.ScriptExpression.fromTag(_tag);\n\n    if (se) {\n      scriptExpressions.push(se);\n\n      if (_dataItem.getData() instanceof lib_1.DataItem) {\n        _dataItem = _dataItem.getData();\n        _tag = _dataItem.getTag();\n      } else {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n\n  const seLength = scriptExpressions.length;\n  const isMultiKey = seLength > 0 && (scriptExpressions[seLength - 1].getExpression() === ScriptExpression_1.ScriptExpressions.MULTISIG.getExpression() || scriptExpressions[seLength - 1].getExpression() === ScriptExpression_1.ScriptExpressions.SORTED_MULTISIG.getExpression());\n\n  if (isMultiKey) {\n    const multiKey = MultiKey_1.MultiKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, multiKey);\n  }\n\n  if (_dataItem.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n    const cryptoHDKey = CryptoHDKey_1.CryptoHDKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, cryptoHDKey);\n  } else {\n    const cryptoECKey = CryptoECKey_1.CryptoECKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, cryptoECKey);\n  }\n};\n\nCryptoOutput.fromCBOR = _cborPayload => {\n  const dataItem = lib_1.decodeToDataItem(_cborPayload);\n  return CryptoOutput.fromDataItem(dataItem);\n};","map":{"version":3,"sources":["../src/CryptoOutput.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoOutput = void 0;\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\nconst lib_1 = require(\"./lib\");\nconst MultiKey_1 = require(\"./MultiKey\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nconst ScriptExpression_1 = require(\"./ScriptExpression\");\nclass CryptoOutput extends RegistryItem_1.RegistryItem {\n    constructor(scriptExpressions, cryptoKey) {\n        super();\n        this.scriptExpressions = scriptExpressions;\n        this.cryptoKey = cryptoKey;\n        this.getRegistryType = () => {\n            return RegistryType_1.RegistryTypes.CRYPTO_OUTPUT;\n        };\n        this.getCryptoKey = () => this.cryptoKey;\n        this.getHDKey = () => {\n            if (this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n                return this.cryptoKey;\n            }\n            else {\n                return undefined;\n            }\n        };\n        this.getECKey = () => {\n            if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey) {\n                return this.cryptoKey;\n            }\n            else {\n                return undefined;\n            }\n        };\n        this.getMultiKey = () => {\n            if (this.cryptoKey instanceof MultiKey_1.MultiKey) {\n                return this.cryptoKey;\n            }\n            else {\n                return undefined;\n            }\n        };\n        this.getScriptExpressions = () => this.scriptExpressions;\n        this.toDataItem = () => {\n            let dataItem = this.cryptoKey.toDataItem();\n            if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey ||\n                this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n                dataItem.setTag(this.cryptoKey.getRegistryType().getTag());\n            }\n            const clonedSe = [...this.scriptExpressions];\n            clonedSe.reverse().forEach((se) => {\n                const tagValue = se.getTag();\n                if (dataItem.getTag() === undefined) {\n                    dataItem.setTag(tagValue);\n                }\n                else {\n                    dataItem = new lib_1.DataItem(dataItem, tagValue);\n                }\n            });\n            return dataItem;\n        };\n    }\n}\nexports.CryptoOutput = CryptoOutput;\nCryptoOutput.fromDataItem = (dataItem) => {\n    const scriptExpressions = [];\n    let _dataItem = dataItem;\n    while (true) {\n        let _tag = _dataItem.getTag() || undefined;\n        const se = ScriptExpression_1.ScriptExpression.fromTag(_tag);\n        if (se) {\n            scriptExpressions.push(se);\n            if (_dataItem.getData() instanceof lib_1.DataItem) {\n                _dataItem = _dataItem.getData();\n                _tag = _dataItem.getTag();\n            }\n            else {\n                break;\n            }\n        }\n        else {\n            break;\n        }\n    }\n    const seLength = scriptExpressions.length;\n    const isMultiKey = seLength > 0 &&\n        (scriptExpressions[seLength - 1].getExpression() ===\n            ScriptExpression_1.ScriptExpressions.MULTISIG.getExpression() ||\n            scriptExpressions[seLength - 1].getExpression() ===\n                ScriptExpression_1.ScriptExpressions.SORTED_MULTISIG.getExpression());\n    if (isMultiKey) {\n        const multiKey = MultiKey_1.MultiKey.fromDataItem(_dataItem);\n        return new CryptoOutput(scriptExpressions, multiKey);\n    }\n    if (_dataItem.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n        const cryptoHDKey = CryptoHDKey_1.CryptoHDKey.fromDataItem(_dataItem);\n        return new CryptoOutput(scriptExpressions, cryptoHDKey);\n    }\n    else {\n        const cryptoECKey = CryptoECKey_1.CryptoECKey.fromDataItem(_dataItem);\n        return new CryptoOutput(scriptExpressions, cryptoECKey);\n    }\n};\nCryptoOutput.fromCBOR = (_cborPayload) => {\n    const dataItem = lib_1.decodeToDataItem(_cborPayload);\n    return CryptoOutput.fromDataItem(dataItem);\n};\n//# sourceMappingURL=CryptoOutput.js.map"]},"metadata":{},"sourceType":"script"}