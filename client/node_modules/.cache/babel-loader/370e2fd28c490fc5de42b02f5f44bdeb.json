{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Edge11 = void 0;\n\nconst Logger_1 = require(\"../Logger\");\n\nconst errors_1 = require(\"../errors\");\n\nconst utils = __importStar(require(\"../utils\"));\n\nconst ortc = __importStar(require(\"../ortc\"));\n\nconst edgeUtils = __importStar(require(\"./ortc/edgeUtils\"));\n\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\n\nconst logger = new Logger_1.Logger('Edge11');\n\nclass Edge11 extends HandlerInterface_1.HandlerInterface {\n  constructor() {\n    super(); // Map of RTCRtpSenders indexed by id.\n\n    this._rtpSenders = new Map(); // Map of RTCRtpReceivers indexed by id.\n\n    this._rtpReceivers = new Map(); // Next localId for sending tracks.\n\n    this._nextSendLocalId = 0; // Got transport local and remote parameters.\n\n    this._transportReady = false;\n  }\n  /**\n   * Creates a factory function.\n   */\n\n\n  static createFactory() {\n    return () => new Edge11();\n  }\n\n  get name() {\n    return 'Edge11';\n  }\n\n  close() {\n    logger.debug('close()'); // Close the ICE gatherer.\n    // NOTE: Not yet implemented by Edge.\n\n    try {\n      this._iceGatherer.close();\n    } catch (error) {} // Close the ICE transport.\n\n\n    try {\n      this._iceTransport.stop();\n    } catch (error) {} // Close the DTLS transport.\n\n\n    try {\n      this._dtlsTransport.stop();\n    } catch (error) {} // Close RTCRtpSenders.\n\n\n    for (const rtpSender of this._rtpSenders.values()) {\n      try {\n        rtpSender.stop();\n      } catch (error) {}\n    } // Close RTCRtpReceivers.\n\n\n    for (const rtpReceiver of this._rtpReceivers.values()) {\n      try {\n        rtpReceiver.stop();\n      } catch (error) {}\n    }\n  }\n\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    return edgeUtils.getCapabilities();\n  }\n\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: {\n        OS: 0,\n        MIS: 0\n      }\n    };\n  }\n\n  run({\n    direction,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceServers,\n    iceTransportPolicy,\n    additionalSettings,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    proprietaryConstraints,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    extendedRtpCapabilities\n  }) {\n    logger.debug('run()');\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._remoteIceParameters = iceParameters;\n    this._remoteIceCandidates = iceCandidates;\n    this._remoteDtlsParameters = dtlsParameters;\n    this._cname = `CNAME-${utils.generateRandomNumber()}`;\n\n    this._setIceGatherer({\n      iceServers,\n      iceTransportPolicy\n    });\n\n    this._setIceTransport();\n\n    this._setDtlsTransport();\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  async updateIceServers(iceServers) {\n    // NOTE: Edge 11 does not implement iceGatherer.gater().\n    throw new errors_1.UnsupportedError('not supported');\n  }\n\n  async restartIce(iceParameters) {\n    logger.debug('restartIce()');\n    this._remoteIceParameters = iceParameters;\n    if (!this._transportReady) return;\n    logger.debug('restartIce() | calling iceTransport.start()');\n\n    this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');\n\n    for (const candidate of this._remoteIceCandidates) {\n      this._iceTransport.addRemoteCandidate(candidate);\n    }\n\n    this._iceTransport.addRemoteCandidate({});\n  }\n\n  async getTransportStats() {\n    return this._iceTransport.getStats();\n  }\n\n  async send( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  {\n    track,\n    encodings,\n    codecOptions,\n    codec\n  }) {\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    if (!this._transportReady) await this._setupTransport({\n      localDtlsRole: 'server'\n    });\n    logger.debug('send() | calling new RTCRtpSender()');\n    const rtpSender = new RTCRtpSender(track, this._dtlsTransport);\n    const rtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n    rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);\n    const useRtx = rtpParameters.codecs.some(_codec => /.+\\/rtx$/i.test(_codec.mimeType));\n    if (!encodings) encodings = [{}];\n\n    for (const encoding of encodings) {\n      encoding.ssrc = utils.generateRandomNumber();\n      if (useRtx) encoding.rtx = {\n        ssrc: utils.generateRandomNumber()\n      };\n    }\n\n    rtpParameters.encodings = encodings; // Fill RTCRtpParameters.rtcp.\n\n    rtpParameters.rtcp = {\n      cname: this._cname,\n      reducedSize: true,\n      mux: true\n    }; // NOTE: Convert our standard RTCRtpParameters into those that Edge\n    // expects.\n\n    const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n    logger.debug('send() | calling rtpSender.send() [params:%o]', edgeRtpParameters);\n    await rtpSender.send(edgeRtpParameters);\n    const localId = String(this._nextSendLocalId);\n    this._nextSendLocalId++; // Store it.\n\n    this._rtpSenders.set(localId, rtpSender);\n\n    return {\n      localId,\n      rtpParameters,\n      rtpSender\n    };\n  }\n\n  async stopSending(localId) {\n    logger.debug('stopSending() [localId:%s]', localId);\n\n    const rtpSender = this._rtpSenders.get(localId);\n\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n\n    this._rtpSenders.delete(localId);\n\n    try {\n      logger.debug('stopSending() | calling rtpSender.stop()');\n      rtpSender.stop();\n    } catch (error) {\n      logger.warn('stopSending() | rtpSender.stop() failed:%o', error);\n      throw error;\n    }\n  }\n\n  async replaceTrack(localId, track) {\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n\n    const rtpSender = this._rtpSenders.get(localId);\n\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n    rtpSender.setTrack(track);\n  }\n\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n\n    const rtpSender = this._rtpSenders.get(localId);\n\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n    const parameters = rtpSender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) encoding.active = true;else encoding.active = false;\n    });\n    await rtpSender.setParameters(parameters);\n  }\n\n  async setRtpEncodingParameters(localId, params) {\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n\n    const rtpSender = this._rtpSenders.get(localId);\n\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n    const parameters = rtpSender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = Object.assign(Object.assign({}, encoding), params);\n    });\n    await rtpSender.setParameters(parameters);\n  }\n\n  async getSenderStats(localId) {\n    const rtpSender = this._rtpSenders.get(localId);\n\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n    return rtpSender.getStats();\n  }\n\n  async sendDataChannel( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  options) {\n    throw new errors_1.UnsupportedError('not implemented');\n  }\n\n  async receive({\n    trackId,\n    kind,\n    rtpParameters\n  }) {\n    logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n    if (!this._transportReady) await this._setupTransport({\n      localDtlsRole: 'server'\n    });\n    logger.debug('receive() | calling new RTCRtpReceiver()');\n    const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);\n    rtpReceiver.addEventListener('error', event => {\n      logger.error('rtpReceiver \"error\" event [event:%o]', event);\n    }); // NOTE: Convert our standard RTCRtpParameters into those that Edge\n    // expects.\n\n    const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n    logger.debug('receive() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);\n    await rtpReceiver.receive(edgeRtpParameters);\n    const localId = trackId; // Store it.\n\n    this._rtpReceivers.set(localId, rtpReceiver);\n\n    return {\n      localId,\n      track: rtpReceiver.track,\n      rtpReceiver\n    };\n  }\n\n  async stopReceiving(localId) {\n    logger.debug('stopReceiving() [localId:%s]', localId);\n\n    const rtpReceiver = this._rtpReceivers.get(localId);\n\n    if (!rtpReceiver) throw new Error('RTCRtpReceiver not found');\n\n    this._rtpReceivers.delete(localId);\n\n    try {\n      logger.debug('stopReceiving() | calling rtpReceiver.stop()');\n      rtpReceiver.stop();\n    } catch (error) {\n      logger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);\n    }\n  }\n\n  async getReceiverStats(localId) {\n    const rtpReceiver = this._rtpReceivers.get(localId);\n\n    if (!rtpReceiver) throw new Error('RTCRtpReceiver not found');\n    return rtpReceiver.getStats();\n  }\n\n  async receiveDataChannel( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  options) {\n    throw new errors_1.UnsupportedError('not implemented');\n  }\n\n  _setIceGatherer({\n    iceServers,\n    iceTransportPolicy\n  }) {\n    const iceGatherer = new RTCIceGatherer({\n      iceServers: iceServers || [],\n      gatherPolicy: iceTransportPolicy || 'all'\n    });\n    iceGatherer.addEventListener('error', event => {\n      logger.error('iceGatherer \"error\" event [event:%o]', event);\n    }); // NOTE: Not yet implemented by Edge, which starts gathering automatically.\n\n    try {\n      iceGatherer.gather();\n    } catch (error) {\n      logger.debug('_setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());\n    }\n\n    this._iceGatherer = iceGatherer;\n  }\n\n  _setIceTransport() {\n    const iceTransport = new RTCIceTransport(this._iceGatherer); // NOTE: Not yet implemented by Edge.\n\n    iceTransport.addEventListener('statechange', () => {\n      switch (iceTransport.state) {\n        case 'checking':\n          this.emit('@connectionstatechange', 'connecting');\n          break;\n\n        case 'connected':\n        case 'completed':\n          this.emit('@connectionstatechange', 'connected');\n          break;\n\n        case 'failed':\n          this.emit('@connectionstatechange', 'failed');\n          break;\n\n        case 'disconnected':\n          this.emit('@connectionstatechange', 'disconnected');\n          break;\n\n        case 'closed':\n          this.emit('@connectionstatechange', 'closed');\n          break;\n      }\n    }); // NOTE: Not standard, but implemented by Edge.\n\n    iceTransport.addEventListener('icestatechange', () => {\n      switch (iceTransport.state) {\n        case 'checking':\n          this.emit('@connectionstatechange', 'connecting');\n          break;\n\n        case 'connected':\n        case 'completed':\n          this.emit('@connectionstatechange', 'connected');\n          break;\n\n        case 'failed':\n          this.emit('@connectionstatechange', 'failed');\n          break;\n\n        case 'disconnected':\n          this.emit('@connectionstatechange', 'disconnected');\n          break;\n\n        case 'closed':\n          this.emit('@connectionstatechange', 'closed');\n          break;\n      }\n    });\n    iceTransport.addEventListener('candidatepairchange', event => {\n      logger.debug('iceTransport \"candidatepairchange\" event [pair:%o]', event.pair);\n    });\n    this._iceTransport = iceTransport;\n  }\n\n  _setDtlsTransport() {\n    const dtlsTransport = new RTCDtlsTransport(this._iceTransport); // NOTE: Not yet implemented by Edge.\n\n    dtlsTransport.addEventListener('statechange', () => {\n      logger.debug('dtlsTransport \"statechange\" event [state:%s]', dtlsTransport.state);\n    }); // NOTE: Not standard, but implemented by Edge.\n\n    dtlsTransport.addEventListener('dtlsstatechange', () => {\n      logger.debug('dtlsTransport \"dtlsstatechange\" event [state:%s]', dtlsTransport.state);\n      if (dtlsTransport.state === 'closed') this.emit('@connectionstatechange', 'closed');\n    });\n    dtlsTransport.addEventListener('error', event => {\n      logger.error('dtlsTransport \"error\" event [event:%o]', event);\n    });\n    this._dtlsTransport = dtlsTransport;\n  }\n\n  async _setupTransport({\n    localDtlsRole\n  }) {\n    logger.debug('_setupTransport()'); // Get our local DTLS parameters.\n\n    const dtlsParameters = this._dtlsTransport.getLocalParameters();\n\n    dtlsParameters.role = localDtlsRole; // Need to tell the remote transport about our parameters.\n\n    await this.safeEmitAsPromise('@connect', {\n      dtlsParameters\n    }); // Start the RTCIceTransport.\n\n    this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, 'controlling'); // Add remote ICE candidates.\n\n\n    for (const candidate of this._remoteIceCandidates) {\n      this._iceTransport.addRemoteCandidate(candidate);\n    } // Also signal a 'complete' candidate as per spec.\n    // NOTE: It should be {complete: true} but Edge prefers {}.\n    // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport\n    // won't enter the 'completed' state.\n\n\n    this._iceTransport.addRemoteCandidate({}); // NOTE: Edge does not like SHA less than 256.\n\n\n    this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints.filter(fingerprint => {\n      return fingerprint.algorithm === 'sha-256' || fingerprint.algorithm === 'sha-384' || fingerprint.algorithm === 'sha-512';\n    }); // Start the RTCDtlsTransport.\n\n    this._dtlsTransport.start(this._remoteDtlsParameters);\n\n    this._transportReady = true;\n  }\n\n}\n\nexports.Edge11 = Edge11;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/mediasoup-client/lib/handlers/Edge11.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","hasOwnProperty","call","exports","Edge11","Logger_1","require","errors_1","utils","ortc","edgeUtils","HandlerInterface_1","logger","Logger","HandlerInterface","constructor","_rtpSenders","Map","_rtpReceivers","_nextSendLocalId","_transportReady","createFactory","name","close","debug","_iceGatherer","error","_iceTransport","stop","_dtlsTransport","rtpSender","values","rtpReceiver","getNativeRtpCapabilities","getCapabilities","getNativeSctpCapabilities","numStreams","OS","MIS","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","iceServers","iceTransportPolicy","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","_sendingRtpParametersByKind","audio","getSendingRtpParameters","video","_remoteIceParameters","_remoteIceCandidates","_remoteDtlsParameters","_cname","generateRandomNumber","_setIceGatherer","_setIceTransport","_setDtlsTransport","updateIceServers","UnsupportedError","restartIce","start","candidate","addRemoteCandidate","getTransportStats","getStats","send","track","encodings","codecOptions","codec","kind","id","_setupTransport","localDtlsRole","RTCRtpSender","rtpParameters","clone","codecs","reduceCodecs","useRtx","some","_codec","test","mimeType","encoding","ssrc","rtx","rtcp","cname","reducedSize","mux","edgeRtpParameters","mangleRtpParameters","localId","String","set","stopSending","Error","delete","warn","replaceTrack","setTrack","setMaxSpatialLayer","spatialLayer","parameters","getParameters","forEach","idx","active","setParameters","setRtpEncodingParameters","params","assign","getSenderStats","sendDataChannel","options","receive","trackId","RTCRtpReceiver","addEventListener","event","stopReceiving","getReceiverStats","receiveDataChannel","iceGatherer","RTCIceGatherer","gatherPolicy","gather","toString","iceTransport","RTCIceTransport","state","emit","pair","dtlsTransport","RTCDtlsTransport","getLocalParameters","role","safeEmitAsPromise","fingerprints","filter","fingerprint","algorithm"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Edge11 = void 0;\nconst Logger_1 = require(\"../Logger\");\nconst errors_1 = require(\"../errors\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst edgeUtils = __importStar(require(\"./ortc/edgeUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst logger = new Logger_1.Logger('Edge11');\nclass Edge11 extends HandlerInterface_1.HandlerInterface {\n    constructor() {\n        super();\n        // Map of RTCRtpSenders indexed by id.\n        this._rtpSenders = new Map();\n        // Map of RTCRtpReceivers indexed by id.\n        this._rtpReceivers = new Map();\n        // Next localId for sending tracks.\n        this._nextSendLocalId = 0;\n        // Got transport local and remote parameters.\n        this._transportReady = false;\n    }\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Edge11();\n    }\n    get name() {\n        return 'Edge11';\n    }\n    close() {\n        logger.debug('close()');\n        // Close the ICE gatherer.\n        // NOTE: Not yet implemented by Edge.\n        try {\n            this._iceGatherer.close();\n        }\n        catch (error) { }\n        // Close the ICE transport.\n        try {\n            this._iceTransport.stop();\n        }\n        catch (error) { }\n        // Close the DTLS transport.\n        try {\n            this._dtlsTransport.stop();\n        }\n        catch (error) { }\n        // Close RTCRtpSenders.\n        for (const rtpSender of this._rtpSenders.values()) {\n            try {\n                rtpSender.stop();\n            }\n            catch (error) { }\n        }\n        // Close RTCRtpReceivers.\n        for (const rtpReceiver of this._rtpReceivers.values()) {\n            try {\n                rtpReceiver.stop();\n            }\n            catch (error) { }\n        }\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        return edgeUtils.getCapabilities();\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: { OS: 0, MIS: 0 }\n        };\n    }\n    run({ direction, // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceParameters, iceCandidates, dtlsParameters, sctpParameters, // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceServers, iceTransportPolicy, additionalSettings, // eslint-disable-line @typescript-eslint/no-unused-vars\n    proprietaryConstraints, // eslint-disable-line @typescript-eslint/no-unused-vars\n    extendedRtpCapabilities }) {\n        logger.debug('run()');\n        this._sendingRtpParametersByKind =\n            {\n                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._remoteIceParameters = iceParameters;\n        this._remoteIceCandidates = iceCandidates;\n        this._remoteDtlsParameters = dtlsParameters;\n        this._cname = `CNAME-${utils.generateRandomNumber()}`;\n        this._setIceGatherer({ iceServers, iceTransportPolicy });\n        this._setIceTransport();\n        this._setDtlsTransport();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async updateIceServers(iceServers) {\n        // NOTE: Edge 11 does not implement iceGatherer.gater().\n        throw new errors_1.UnsupportedError('not supported');\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        this._remoteIceParameters = iceParameters;\n        if (!this._transportReady)\n            return;\n        logger.debug('restartIce() | calling iceTransport.start()');\n        this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');\n        for (const candidate of this._remoteIceCandidates) {\n            this._iceTransport.addRemoteCandidate(candidate);\n        }\n        this._iceTransport.addRemoteCandidate({});\n    }\n    async getTransportStats() {\n        return this._iceTransport.getStats();\n    }\n    async send(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { track, encodings, codecOptions, codec }) {\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (!this._transportReady)\n            await this._setupTransport({ localDtlsRole: 'server' });\n        logger.debug('send() | calling new RTCRtpSender()');\n        const rtpSender = new RTCRtpSender(track, this._dtlsTransport);\n        const rtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n        rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);\n        const useRtx = rtpParameters.codecs\n            .some((_codec) => /.+\\/rtx$/i.test(_codec.mimeType));\n        if (!encodings)\n            encodings = [{}];\n        for (const encoding of encodings) {\n            encoding.ssrc = utils.generateRandomNumber();\n            if (useRtx)\n                encoding.rtx = { ssrc: utils.generateRandomNumber() };\n        }\n        rtpParameters.encodings = encodings;\n        // Fill RTCRtpParameters.rtcp.\n        rtpParameters.rtcp =\n            {\n                cname: this._cname,\n                reducedSize: true,\n                mux: true\n            };\n        // NOTE: Convert our standard RTCRtpParameters into those that Edge\n        // expects.\n        const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n        logger.debug('send() | calling rtpSender.send() [params:%o]', edgeRtpParameters);\n        await rtpSender.send(edgeRtpParameters);\n        const localId = String(this._nextSendLocalId);\n        this._nextSendLocalId++;\n        // Store it.\n        this._rtpSenders.set(localId, rtpSender);\n        return { localId, rtpParameters, rtpSender };\n    }\n    async stopSending(localId) {\n        logger.debug('stopSending() [localId:%s]', localId);\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        this._rtpSenders.delete(localId);\n        try {\n            logger.debug('stopSending() | calling rtpSender.stop()');\n            rtpSender.stop();\n        }\n        catch (error) {\n            logger.warn('stopSending() | rtpSender.stop() failed:%o', error);\n            throw error;\n        }\n    }\n    async replaceTrack(localId, track) {\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        rtpSender.setTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        const parameters = rtpSender.getParameters();\n        parameters.encodings\n            .forEach((encoding, idx) => {\n            if (idx <= spatialLayer)\n                encoding.active = true;\n            else\n                encoding.active = false;\n        });\n        await rtpSender.setParameters(parameters);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        const parameters = rtpSender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = Object.assign(Object.assign({}, encoding), params);\n        });\n        await rtpSender.setParameters(parameters);\n    }\n    async getSenderStats(localId) {\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        return rtpSender.getStats();\n    }\n    async sendDataChannel(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    options) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    async receive({ trackId, kind, rtpParameters }) {\n        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n        if (!this._transportReady)\n            await this._setupTransport({ localDtlsRole: 'server' });\n        logger.debug('receive() | calling new RTCRtpReceiver()');\n        const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);\n        rtpReceiver.addEventListener('error', (event) => {\n            logger.error('rtpReceiver \"error\" event [event:%o]', event);\n        });\n        // NOTE: Convert our standard RTCRtpParameters into those that Edge\n        // expects.\n        const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n        logger.debug('receive() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);\n        await rtpReceiver.receive(edgeRtpParameters);\n        const localId = trackId;\n        // Store it.\n        this._rtpReceivers.set(localId, rtpReceiver);\n        return {\n            localId,\n            track: rtpReceiver.track,\n            rtpReceiver\n        };\n    }\n    async stopReceiving(localId) {\n        logger.debug('stopReceiving() [localId:%s]', localId);\n        const rtpReceiver = this._rtpReceivers.get(localId);\n        if (!rtpReceiver)\n            throw new Error('RTCRtpReceiver not found');\n        this._rtpReceivers.delete(localId);\n        try {\n            logger.debug('stopReceiving() | calling rtpReceiver.stop()');\n            rtpReceiver.stop();\n        }\n        catch (error) {\n            logger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);\n        }\n    }\n    async getReceiverStats(localId) {\n        const rtpReceiver = this._rtpReceivers.get(localId);\n        if (!rtpReceiver)\n            throw new Error('RTCRtpReceiver not found');\n        return rtpReceiver.getStats();\n    }\n    async receiveDataChannel(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    options) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    _setIceGatherer({ iceServers, iceTransportPolicy }) {\n        const iceGatherer = new RTCIceGatherer({\n            iceServers: iceServers || [],\n            gatherPolicy: iceTransportPolicy || 'all'\n        });\n        iceGatherer.addEventListener('error', (event) => {\n            logger.error('iceGatherer \"error\" event [event:%o]', event);\n        });\n        // NOTE: Not yet implemented by Edge, which starts gathering automatically.\n        try {\n            iceGatherer.gather();\n        }\n        catch (error) {\n            logger.debug('_setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());\n        }\n        this._iceGatherer = iceGatherer;\n    }\n    _setIceTransport() {\n        const iceTransport = new RTCIceTransport(this._iceGatherer);\n        // NOTE: Not yet implemented by Edge.\n        iceTransport.addEventListener('statechange', () => {\n            switch (iceTransport.state) {\n                case 'checking':\n                    this.emit('@connectionstatechange', 'connecting');\n                    break;\n                case 'connected':\n                case 'completed':\n                    this.emit('@connectionstatechange', 'connected');\n                    break;\n                case 'failed':\n                    this.emit('@connectionstatechange', 'failed');\n                    break;\n                case 'disconnected':\n                    this.emit('@connectionstatechange', 'disconnected');\n                    break;\n                case 'closed':\n                    this.emit('@connectionstatechange', 'closed');\n                    break;\n            }\n        });\n        // NOTE: Not standard, but implemented by Edge.\n        iceTransport.addEventListener('icestatechange', () => {\n            switch (iceTransport.state) {\n                case 'checking':\n                    this.emit('@connectionstatechange', 'connecting');\n                    break;\n                case 'connected':\n                case 'completed':\n                    this.emit('@connectionstatechange', 'connected');\n                    break;\n                case 'failed':\n                    this.emit('@connectionstatechange', 'failed');\n                    break;\n                case 'disconnected':\n                    this.emit('@connectionstatechange', 'disconnected');\n                    break;\n                case 'closed':\n                    this.emit('@connectionstatechange', 'closed');\n                    break;\n            }\n        });\n        iceTransport.addEventListener('candidatepairchange', (event) => {\n            logger.debug('iceTransport \"candidatepairchange\" event [pair:%o]', event.pair);\n        });\n        this._iceTransport = iceTransport;\n    }\n    _setDtlsTransport() {\n        const dtlsTransport = new RTCDtlsTransport(this._iceTransport);\n        // NOTE: Not yet implemented by Edge.\n        dtlsTransport.addEventListener('statechange', () => {\n            logger.debug('dtlsTransport \"statechange\" event [state:%s]', dtlsTransport.state);\n        });\n        // NOTE: Not standard, but implemented by Edge.\n        dtlsTransport.addEventListener('dtlsstatechange', () => {\n            logger.debug('dtlsTransport \"dtlsstatechange\" event [state:%s]', dtlsTransport.state);\n            if (dtlsTransport.state === 'closed')\n                this.emit('@connectionstatechange', 'closed');\n        });\n        dtlsTransport.addEventListener('error', (event) => {\n            logger.error('dtlsTransport \"error\" event [event:%o]', event);\n        });\n        this._dtlsTransport = dtlsTransport;\n    }\n    async _setupTransport({ localDtlsRole }) {\n        logger.debug('_setupTransport()');\n        // Get our local DTLS parameters.\n        const dtlsParameters = this._dtlsTransport.getLocalParameters();\n        dtlsParameters.role = localDtlsRole;\n        // Need to tell the remote transport about our parameters.\n        await this.safeEmitAsPromise('@connect', { dtlsParameters });\n        // Start the RTCIceTransport.\n        this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, 'controlling');\n        // Add remote ICE candidates.\n        for (const candidate of this._remoteIceCandidates) {\n            this._iceTransport.addRemoteCandidate(candidate);\n        }\n        // Also signal a 'complete' candidate as per spec.\n        // NOTE: It should be {complete: true} but Edge prefers {}.\n        // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport\n        // won't enter the 'completed' state.\n        this._iceTransport.addRemoteCandidate({});\n        // NOTE: Edge does not like SHA less than 256.\n        this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints\n            .filter((fingerprint) => {\n            return (fingerprint.algorithm === 'sha-256' ||\n                fingerprint.algorithm === 'sha-384' ||\n                fingerprint.algorithm === 'sha-512');\n        });\n        // Start the RTCDtlsTransport.\n        this._dtlsTransport.start(this._remoteDtlsParameters);\n        this._transportReady = true;\n    }\n}\nexports.Edge11 = Edge11;\n"]},"metadata":{},"sourceType":"script"}