{"ast":null,"code":"import data from \"@ledgerhq/cryptoassets/data/dapps/ethereum\";\n/**\n * Retrieve the metadatas a given contract address and a method selector\n */\n\nexport const getInfosForContractMethod = (contractAddress, selector) => {\n  const lcSelector = selector.toLowerCase();\n  const lcContractAddress = contractAddress.toLowerCase();\n\n  if (lcContractAddress in data) {\n    const contractSelectors = data[lcContractAddress];\n\n    if (lcSelector in contractSelectors) {\n      return {\n        payload: contractSelectors[lcSelector][\"serialized_data\"],\n        signature: contractSelectors[lcSelector][\"signature\"],\n        plugin: contractSelectors[lcSelector][\"plugin\"],\n        erc20OfInterest: contractSelectors[lcSelector][\"erc20OfInterest\"],\n        abi: contractSelectors[\"abi\"]\n      };\n    }\n  }\n};","map":{"version":3,"sources":["../src/contracts.js"],"names":["getInfosForContractMethod","lcSelector","selector","lcContractAddress","contractAddress","contractSelectors","data","payload","signature","plugin","erc20OfInterest","abi"],"mappings":"AAAA,OAAA,IAAA,MAAA,4CAAA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMA,yBAAyB,GAAG,CAAA,eAAA,EAAA,QAAA,KAA+B;AACtE,QAAMC,UAAU,GAAGC,QAAQ,CAA3B,WAAmBA,EAAnB;AACA,QAAMC,iBAAiB,GAAGC,eAAe,CAAzC,WAA0BA,EAA1B;;AAEA,MAAID,iBAAiB,IAArB,IAAA,EAA+B;AAC7B,UAAME,iBAAiB,GAAGC,IAAI,CAA9B,iBAA8B,CAA9B;;AAEA,QAAIL,UAAU,IAAd,iBAAA,EAAqC;AACnC,aAAO;AACLM,QAAAA,OAAO,EAAEF,iBAAiB,CAAjBA,UAAiB,CAAjBA,CADJ,iBACIA,CADJ;AAELG,QAAAA,SAAS,EAAEH,iBAAiB,CAAjBA,UAAiB,CAAjBA,CAFN,WAEMA,CAFN;AAGLI,QAAAA,MAAM,EAAEJ,iBAAiB,CAAjBA,UAAiB,CAAjBA,CAHH,QAGGA,CAHH;AAILK,QAAAA,eAAe,EAAEL,iBAAiB,CAAjBA,UAAiB,CAAjBA,CAJZ,iBAIYA,CAJZ;AAKLM,QAAAA,GAAG,EAAEN,iBAAiB,CAAA,KAAA;AALjB,OAAP;AAOD;AACF;AAhBI,CAAA","sourcesContent":["import data from \"@ledgerhq/cryptoassets/data/dapps/ethereum\";\n\n/**\n * Retrieve the metadatas a given contract address and a method selector\n */\n\nexport const getInfosForContractMethod = (contractAddress, selector) => {\n  const lcSelector = selector.toLowerCase();\n  const lcContractAddress = contractAddress.toLowerCase();\n\n  if (lcContractAddress in data) {\n    const contractSelectors = data[lcContractAddress];\n\n    if (lcSelector in contractSelectors) {\n      return {\n        payload: contractSelectors[lcSelector][\"serialized_data\"],\n        signature: contractSelectors[lcSelector][\"signature\"],\n        plugin: contractSelectors[lcSelector][\"plugin\"],\n        erc20OfInterest: contractSelectors[lcSelector][\"erc20OfInterest\"],\n        abi: contractSelectors[\"abi\"],\n      };\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}