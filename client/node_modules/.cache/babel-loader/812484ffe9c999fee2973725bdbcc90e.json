{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-dupe-class-members */\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar buffer_1 = require(\"buffer\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar common_1 = __importDefault(require(\"@ethereumjs/common\")); // secp256k1n/2\n\n\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * An Ethereum transaction.\n */\n\nvar Transaction = function () {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   * Use the static factory methods to assist in creating a Transaction object from varying data types.\n   * @note Transaction objects implement EIP155 by default. To disable it, pass in an `@ethereumjs/common` object set before EIP155 activation (i.e. before Spurious Dragon).\n   */\n  function Transaction(txData, opts) {\n    var e_1, _a;\n\n    var _b;\n\n    var nonce = txData.nonce,\n        gasPrice = txData.gasPrice,\n        gasLimit = txData.gasLimit,\n        to = txData.to,\n        value = txData.value,\n        data = txData.data,\n        v = txData.v,\n        r = txData.r,\n        s = txData.s;\n    this.nonce = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(nonce));\n    this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasPrice));\n    this.gasLimit = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasLimit));\n    this.to = to ? new ethereumjs_util_1.Address(ethereumjs_util_1.toBuffer(to)) : undefined;\n    this.value = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(value));\n    this.data = ethereumjs_util_1.toBuffer(data);\n    this.v = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(v));\n    this.r = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(r));\n    this.s = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(s));\n    var validateCannotExceedMaxInteger = {\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      value: this.value,\n      r: this.r,\n      s: this.s\n    };\n\n    try {\n      for (var _c = __values(Object.entries(validateCannotExceedMaxInteger)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var _e = __read(_d.value, 2),\n            key = _e[0],\n            value_1 = _e[1];\n\n        if (value_1 && value_1.gt(ethereumjs_util_1.MAX_INTEGER)) {\n          throw new Error(key + \" cannot exceed MAX_INTEGER, given \" + value_1);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    if (opts === null || opts === void 0 ? void 0 : opts.common) {\n      this.common = opts.common;\n    } else {\n      var DEFAULT_CHAIN = 'mainnet';\n      this.common = new common_1.default({\n        chain: DEFAULT_CHAIN\n      });\n    }\n\n    this._validateTxV(this.v);\n\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n\n  Transaction.fromTxData = function (txData, opts) {\n    return new Transaction(txData, opts);\n  };\n\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n\n    return this.fromValuesArray(values, opts);\n  };\n\n  Transaction.fromValuesArray = function (values, opts) {\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n\n    var _a = __read(values, 9),\n        nonce = _a[0],\n        gasPrice = _a[1],\n        gasLimit = _a[2],\n        to = _a[3],\n        value = _a[4],\n        data = _a[5],\n        v = _a[6],\n        r = _a[7],\n        s = _a[8];\n\n    return new Transaction({\n      nonce: new ethereumjs_util_1.BN(nonce),\n      gasPrice: new ethereumjs_util_1.BN(gasPrice),\n      gasLimit: new ethereumjs_util_1.BN(gasLimit),\n      to: to && to.length > 0 ? new ethereumjs_util_1.Address(to) : undefined,\n      value: new ethereumjs_util_1.BN(value),\n      data: data || buffer_1.Buffer.from([]),\n      v: v ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r ? new ethereumjs_util_1.BN(r) : undefined,\n      s: s ? new ethereumjs_util_1.BN(s) : undefined\n    }, opts);\n  };\n  /**\n   * If the tx's `to` is to the creation address\n   */\n\n\n  Transaction.prototype.toCreationAddress = function () {\n    return this.to === undefined || this.to.buf.length === 0;\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   */\n\n\n  Transaction.prototype.hash = function () {\n    var values = [ethereumjs_util_1.bnToRlp(this.nonce), ethereumjs_util_1.bnToRlp(this.gasPrice), ethereumjs_util_1.bnToRlp(this.gasLimit), this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]), ethereumjs_util_1.bnToRlp(this.value), this.data, this.v ? ethereumjs_util_1.bnToRlp(this.v) : buffer_1.Buffer.from([]), this.r ? ethereumjs_util_1.bnToRlp(this.r) : buffer_1.Buffer.from([]), this.s ? ethereumjs_util_1.bnToRlp(this.s) : buffer_1.Buffer.from([])];\n    return ethereumjs_util_1.rlphash(values);\n  };\n\n  Transaction.prototype.getMessageToSign = function () {\n    return this._getMessageToSign(this._unsignedTxImplementsEIP155());\n  };\n\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    return this._getMessageToSign(this._signedTxImplementsEIP155());\n  };\n  /**\n   * Returns chain ID\n   */\n\n\n  Transaction.prototype.getChainId = function () {\n    return this.common.chainId();\n  };\n  /**\n   * Returns the sender's address\n   */\n\n\n  Transaction.prototype.getSenderAddress = function () {\n    return new ethereumjs_util_1.Address(ethereumjs_util_1.publicToAddress(this.getSenderPublicKey()));\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function () {\n    var msgHash = this.getMessageToVerifySignature(); // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n\n    if (this.common.gteHardfork('homestead') && this.s && this.s.gt(N_DIV_2)) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _a = this,\n        v = _a.v,\n        r = _a.r,\n        s = _a.s;\n\n    if (!v || !r || !s) {\n      throw new Error('Missing values to derive sender public key from signed tx');\n    }\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, v.toNumber(), ethereumjs_util_1.bnToRlp(r), ethereumjs_util_1.bnToRlp(s), this._signedTxImplementsEIP155() ? this.getChainId() : undefined);\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n  /**\n   * Determines if the signature is valid\n   */\n\n\n  Transaction.prototype.verifySignature = function () {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      var publicKey = this.getSenderPublicKey();\n      return ethereumjs_util_1.unpadBuffer(publicKey).length !== 0;\n    } catch (e) {\n      return false;\n    }\n  };\n  /**\n   * Sign a transaction with a given private key.\n   * Returns a new Transaction object (the original tx will not be modified).\n   * Example:\n   * ```typescript\n   * const unsignedTx = Transaction.fromTxData(txData)\n   * const signedTx = unsignedTx.sign(privKey)\n   * ```\n   * @param privateKey Must be 32 bytes in length.\n   */\n\n\n  Transaction.prototype.sign = function (privateKey) {\n    if (privateKey.length !== 32) {\n      throw new Error('Private key must be 32 bytes in length.');\n    }\n\n    var msgHash = this.getMessageToSign(); // Only `v` is reassigned.\n\n    /* eslint-disable-next-line prefer-const */\n\n    var _a = ethereumjs_util_1.ecsign(msgHash, privateKey),\n        v = _a.v,\n        r = _a.r,\n        s = _a.s;\n\n    if (this._unsignedTxImplementsEIP155()) {\n      v += this.getChainId() * 2 + 8;\n    }\n\n    var opts = {\n      common: this.common\n    };\n    return new Transaction({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: new ethereumjs_util_1.BN(v),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  Transaction.prototype.getDataFee = function () {\n    var txDataZero = this.common.param('gasPrices', 'txDataZero');\n    var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n    var cost = 0;\n\n    for (var i = 0; i < this.data.length; i++) {\n      this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n    }\n\n    return new ethereumjs_util_1.BN(cost);\n  };\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n\n\n  Transaction.prototype.getBaseFee = function () {\n    var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));\n\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this.common.param('gasPrices', 'txCreation'));\n    }\n\n    return fee;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n\n  Transaction.prototype.validate = function (stringError) {\n    if (stringError === void 0) {\n      stringError = false;\n    }\n\n    var errors = [];\n\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().gt(this.gasLimit)) {\n      errors.push(\"gasLimit is too low. given \" + this.gasLimit + \", need at least \" + this.getBaseFee());\n    }\n\n    return stringError ? errors : errors.length === 0;\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of this transaction, in order.\n   */\n\n\n  Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToRlp(this.nonce), ethereumjs_util_1.bnToRlp(this.gasPrice), ethereumjs_util_1.bnToRlp(this.gasLimit), this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]), ethereumjs_util_1.bnToRlp(this.value), this.data, this.v !== undefined ? ethereumjs_util_1.bnToRlp(this.v) : buffer_1.Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToRlp(this.r) : buffer_1.Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToRlp(this.s) : buffer_1.Buffer.from([])];\n  };\n  /**\n   * Returns the rlp encoding of the transaction.\n   */\n\n\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n\n  Transaction.prototype.isSigned = function () {\n    var _a = this,\n        v = _a.v,\n        r = _a.r,\n        s = _a.s;\n\n    return !!v && !!r && !!s;\n  };\n\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    var _a;\n\n    if (!this.isSigned()) {\n      throw Error('This transaction is not signed');\n    }\n\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon'); // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\n    var v = (_a = this.v) === null || _a === void 0 ? void 0 : _a.toNumber();\n    var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n\n  Transaction.prototype._getMessageToSign = function (withEIP155) {\n    var values = [ethereumjs_util_1.bnToRlp(this.nonce), ethereumjs_util_1.bnToRlp(this.gasPrice), ethereumjs_util_1.bnToRlp(this.gasLimit), this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]), ethereumjs_util_1.bnToRlp(this.value), this.data];\n\n    if (withEIP155) {\n      values.push(ethereumjs_util_1.toBuffer(this.getChainId()));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n    }\n\n    return ethereumjs_util_1.rlphash(values);\n  };\n  /**\n   * Validates tx's `v` value\n   */\n\n\n  Transaction.prototype._validateTxV = function (v) {\n    if (v === undefined || v.toNumber() === 0) {\n      return;\n    }\n\n    if (!this.common.gteHardfork('spuriousDragon')) {\n      return;\n    }\n\n    var vInt = v.toNumber();\n\n    if (vInt === 27 || vInt === 28) {\n      return;\n    }\n\n    var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\n\n    if (!isValidEIP155V) {\n      throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the Common parameter of the Transaction constructor to set the chain id.\");\n    }\n  };\n\n  return Transaction;\n}();\n\nexports.default = Transaction;","map":{"version":3,"sources":["../src/transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/* eslint-disable no-dupe-class-members */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_1 = require(\"buffer\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar common_1 = __importDefault(require(\"@ethereumjs/common\"));\n// secp256k1n/2\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * An Ethereum transaction.\n */\nvar Transaction = /** @class */ (function () {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     * Use the static factory methods to assist in creating a Transaction object from varying data types.\n     * @note Transaction objects implement EIP155 by default. To disable it, pass in an `@ethereumjs/common` object set before EIP155 activation (i.e. before Spurious Dragon).\n     */\n    function Transaction(txData, opts) {\n        var e_1, _a;\n        var _b;\n        var nonce = txData.nonce, gasPrice = txData.gasPrice, gasLimit = txData.gasLimit, to = txData.to, value = txData.value, data = txData.data, v = txData.v, r = txData.r, s = txData.s;\n        this.nonce = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(nonce));\n        this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasPrice));\n        this.gasLimit = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasLimit));\n        this.to = to ? new ethereumjs_util_1.Address(ethereumjs_util_1.toBuffer(to)) : undefined;\n        this.value = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(value));\n        this.data = ethereumjs_util_1.toBuffer(data);\n        this.v = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(v));\n        this.r = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(r));\n        this.s = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(s));\n        var validateCannotExceedMaxInteger = {\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            value: this.value,\n            r: this.r,\n            s: this.s,\n        };\n        try {\n            for (var _c = __values(Object.entries(validateCannotExceedMaxInteger)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var _e = __read(_d.value, 2), key = _e[0], value_1 = _e[1];\n                if (value_1 && value_1.gt(ethereumjs_util_1.MAX_INTEGER)) {\n                    throw new Error(key + \" cannot exceed MAX_INTEGER, given \" + value_1);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (opts === null || opts === void 0 ? void 0 : opts.common) {\n            this.common = opts.common;\n        }\n        else {\n            var DEFAULT_CHAIN = 'mainnet';\n            this.common = new common_1.default({ chain: DEFAULT_CHAIN });\n        }\n        this._validateTxV(this.v);\n        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    Transaction.fromTxData = function (txData, opts) {\n        return new Transaction(txData, opts);\n    };\n    Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        var values = ethereumjs_util_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    };\n    Transaction.fromValuesArray = function (values, opts) {\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];\n        return new Transaction({\n            nonce: new ethereumjs_util_1.BN(nonce),\n            gasPrice: new ethereumjs_util_1.BN(gasPrice),\n            gasLimit: new ethereumjs_util_1.BN(gasLimit),\n            to: to && to.length > 0 ? new ethereumjs_util_1.Address(to) : undefined,\n            value: new ethereumjs_util_1.BN(value),\n            data: data || buffer_1.Buffer.from([]),\n            v: v ? new ethereumjs_util_1.BN(v) : undefined,\n            r: r ? new ethereumjs_util_1.BN(r) : undefined,\n            s: s ? new ethereumjs_util_1.BN(s) : undefined,\n        }, opts);\n    };\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    Transaction.prototype.toCreationAddress = function () {\n        return this.to === undefined || this.to.buf.length === 0;\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx\n     */\n    Transaction.prototype.hash = function () {\n        var values = [\n            ethereumjs_util_1.bnToRlp(this.nonce),\n            ethereumjs_util_1.bnToRlp(this.gasPrice),\n            ethereumjs_util_1.bnToRlp(this.gasLimit),\n            this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]),\n            ethereumjs_util_1.bnToRlp(this.value),\n            this.data,\n            this.v ? ethereumjs_util_1.bnToRlp(this.v) : buffer_1.Buffer.from([]),\n            this.r ? ethereumjs_util_1.bnToRlp(this.r) : buffer_1.Buffer.from([]),\n            this.s ? ethereumjs_util_1.bnToRlp(this.s) : buffer_1.Buffer.from([]),\n        ];\n        return ethereumjs_util_1.rlphash(values);\n    };\n    Transaction.prototype.getMessageToSign = function () {\n        return this._getMessageToSign(this._unsignedTxImplementsEIP155());\n    };\n    Transaction.prototype.getMessageToVerifySignature = function () {\n        return this._getMessageToSign(this._signedTxImplementsEIP155());\n    };\n    /**\n     * Returns chain ID\n     */\n    Transaction.prototype.getChainId = function () {\n        return this.common.chainId();\n    };\n    /**\n     * Returns the sender's address\n     */\n    Transaction.prototype.getSenderAddress = function () {\n        return new ethereumjs_util_1.Address(ethereumjs_util_1.publicToAddress(this.getSenderPublicKey()));\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    Transaction.prototype.getSenderPublicKey = function () {\n        var msgHash = this.getMessageToVerifySignature();\n        // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        if (this.common.gteHardfork('homestead') && this.s && this.s.gt(N_DIV_2)) {\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        }\n        var _a = this, v = _a.v, r = _a.r, s = _a.s;\n        if (!v || !r || !s) {\n            throw new Error('Missing values to derive sender public key from signed tx');\n        }\n        try {\n            return ethereumjs_util_1.ecrecover(msgHash, v.toNumber(), ethereumjs_util_1.bnToRlp(r), ethereumjs_util_1.bnToRlp(s), this._signedTxImplementsEIP155() ? this.getChainId() : undefined);\n        }\n        catch (e) {\n            throw new Error('Invalid Signature');\n        }\n    };\n    /**\n     * Determines if the signature is valid\n     */\n    Transaction.prototype.verifySignature = function () {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            var publicKey = this.getSenderPublicKey();\n            return ethereumjs_util_1.unpadBuffer(publicKey).length !== 0;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    /**\n     * Sign a transaction with a given private key.\n     * Returns a new Transaction object (the original tx will not be modified).\n     * Example:\n     * ```typescript\n     * const unsignedTx = Transaction.fromTxData(txData)\n     * const signedTx = unsignedTx.sign(privKey)\n     * ```\n     * @param privateKey Must be 32 bytes in length.\n     */\n    Transaction.prototype.sign = function (privateKey) {\n        if (privateKey.length !== 32) {\n            throw new Error('Private key must be 32 bytes in length.');\n        }\n        var msgHash = this.getMessageToSign();\n        // Only `v` is reassigned.\n        /* eslint-disable-next-line prefer-const */\n        var _a = ethereumjs_util_1.ecsign(msgHash, privateKey), v = _a.v, r = _a.r, s = _a.s;\n        if (this._unsignedTxImplementsEIP155()) {\n            v += this.getChainId() * 2 + 8;\n        }\n        var opts = {\n            common: this.common,\n        };\n        return new Transaction({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v: new ethereumjs_util_1.BN(v),\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    Transaction.prototype.getDataFee = function () {\n        var txDataZero = this.common.param('gasPrices', 'txDataZero');\n        var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n        var cost = 0;\n        for (var i = 0; i < this.data.length; i++) {\n            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n        }\n        return new ethereumjs_util_1.BN(cost);\n    };\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    Transaction.prototype.getBaseFee = function () {\n        var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));\n        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n            fee.iaddn(this.common.param('gasPrices', 'txCreation'));\n        }\n        return fee;\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    Transaction.prototype.validate = function (stringError) {\n        if (stringError === void 0) { stringError = false; }\n        var errors = [];\n        if (!this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        if (this.getBaseFee().gt(this.gasLimit)) {\n            errors.push(\"gasLimit is too low. given \" + this.gasLimit + \", need at least \" + this.getBaseFee());\n        }\n        return stringError ? errors : errors.length === 0;\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of this transaction, in order.\n     */\n    Transaction.prototype.raw = function () {\n        return [\n            ethereumjs_util_1.bnToRlp(this.nonce),\n            ethereumjs_util_1.bnToRlp(this.gasPrice),\n            ethereumjs_util_1.bnToRlp(this.gasLimit),\n            this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]),\n            ethereumjs_util_1.bnToRlp(this.value),\n            this.data,\n            this.v !== undefined ? ethereumjs_util_1.bnToRlp(this.v) : buffer_1.Buffer.from([]),\n            this.r !== undefined ? ethereumjs_util_1.bnToRlp(this.r) : buffer_1.Buffer.from([]),\n            this.s !== undefined ? ethereumjs_util_1.bnToRlp(this.s) : buffer_1.Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the rlp encoding of the transaction.\n     */\n    Transaction.prototype.serialize = function () {\n        return ethereumjs_util_1.rlp.encode(this.raw());\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    Transaction.prototype.toJSON = function () {\n        return {\n            nonce: ethereumjs_util_1.bnToHex(this.nonce),\n            gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n            gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: ethereumjs_util_1.bnToHex(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n            r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n            s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined,\n        };\n    };\n    Transaction.prototype.isSigned = function () {\n        var _a = this, v = _a.v, r = _a.r, s = _a.s;\n        return !!v && !!r && !!s;\n    };\n    Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n        return this.common.gteHardfork('spuriousDragon');\n    };\n    Transaction.prototype._signedTxImplementsEIP155 = function () {\n        var _a;\n        if (!this.isSigned()) {\n            throw Error('This transaction is not signed');\n        }\n        var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = (_a = this.v) === null || _a === void 0 ? void 0 : _a.toNumber();\n        var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\n        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n    };\n    Transaction.prototype._getMessageToSign = function (withEIP155) {\n        var values = [\n            ethereumjs_util_1.bnToRlp(this.nonce),\n            ethereumjs_util_1.bnToRlp(this.gasPrice),\n            ethereumjs_util_1.bnToRlp(this.gasLimit),\n            this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]),\n            ethereumjs_util_1.bnToRlp(this.value),\n            this.data,\n        ];\n        if (withEIP155) {\n            values.push(ethereumjs_util_1.toBuffer(this.getChainId()));\n            values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n            values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n        }\n        return ethereumjs_util_1.rlphash(values);\n    };\n    /**\n     * Validates tx's `v` value\n     */\n    Transaction.prototype._validateTxV = function (v) {\n        if (v === undefined || v.toNumber() === 0) {\n            return;\n        }\n        if (!this.common.gteHardfork('spuriousDragon')) {\n            return;\n        }\n        var vInt = v.toNumber();\n        if (vInt === 27 || vInt === 28) {\n            return;\n        }\n        var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\n        if (!isValidEIP155V) {\n            throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the Common parameter of the Transaction constructor to set the chain id.\");\n        }\n    };\n    return Transaction;\n}());\nexports.default = Transaction;\n//# sourceMappingURL=transaction.js.map"]},"metadata":{},"sourceType":"script"}