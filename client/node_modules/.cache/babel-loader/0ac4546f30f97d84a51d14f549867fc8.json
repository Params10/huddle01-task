{"ast":null,"code":"// source: messages-nano.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\n\nvar global = function () {\n  return this;\n}.call(null);\n\nvar types_pb = require('./types_pb.js');\n\ngoog.object.extend(proto, types_pb);\ngoog.exportSymbol('proto.NanoAddress', null, global);\ngoog.exportSymbol('proto.NanoGetAddress', null, global);\ngoog.exportSymbol('proto.NanoSignTx', null, global);\ngoog.exportSymbol('proto.NanoSignTx.ParentBlock', null, global);\ngoog.exportSymbol('proto.NanoSignedTx', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.NanoGetAddress = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.NanoGetAddress.repeatedFields_, null);\n};\n\ngoog.inherits(proto.NanoGetAddress, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoGetAddress.displayName = 'proto.NanoGetAddress';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.NanoAddress = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.NanoAddress, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoAddress.displayName = 'proto.NanoAddress';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.NanoSignTx = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.NanoSignTx.repeatedFields_, null);\n};\n\ngoog.inherits(proto.NanoSignTx, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoSignTx.displayName = 'proto.NanoSignTx';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.NanoSignTx.ParentBlock = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.NanoSignTx.ParentBlock, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoSignTx.ParentBlock.displayName = 'proto.NanoSignTx.ParentBlock';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.NanoSignedTx = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.NanoSignedTx, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoSignedTx.displayName = 'proto.NanoSignedTx';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.NanoGetAddress.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.NanoGetAddress.prototype.toObject = function (opt_includeInstance) {\n    return proto.NanoGetAddress.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.NanoGetAddress} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.NanoGetAddress.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n      coinName: jspb.Message.getFieldWithDefault(msg, 2, \"Nano\"),\n      showDisplay: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoGetAddress}\n */\n\n\nproto.NanoGetAddress.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoGetAddress();\n  return proto.NanoGetAddress.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoGetAddress} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoGetAddress}\n */\n\n\nproto.NanoGetAddress.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];\n\n        for (var i = 0; i < values.length; i++) {\n          msg.addAddressN(values[i]);\n        }\n\n        break;\n\n      case 2:\n        var value = reader.readString();\n        msg.setCoinName(value);\n        break;\n\n      case 3:\n        var value = reader.readBool();\n        msg.setShowDisplay(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.NanoGetAddress.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoGetAddress.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoGetAddress} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.NanoGetAddress.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getAddressNList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(1, f);\n  }\n\n  f = jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeString(2, f);\n  }\n\n  f = jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeBool(3, f);\n  }\n};\n/**\n * repeated uint32 address_n = 1;\n * @return {!Array<number>}\n */\n\n\nproto.NanoGetAddress.prototype.getAddressNList = function () {\n  return jspb.Message.getRepeatedField(this, 1);\n};\n/**\n * @param {!Array<number>} value\n * @return {!proto.NanoGetAddress} returns this\n */\n\n\nproto.NanoGetAddress.prototype.setAddressNList = function (value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.NanoGetAddress} returns this\n */\n\n\nproto.NanoGetAddress.prototype.addAddressN = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.NanoGetAddress} returns this\n */\n\n\nproto.NanoGetAddress.prototype.clearAddressNList = function () {\n  return this.setAddressNList([]);\n};\n/**\n * optional string coin_name = 2;\n * @return {string}\n */\n\n\nproto.NanoGetAddress.prototype.getCoinName = function () {\n  return jspb.Message.getFieldWithDefault(this, 2, \"Nano\");\n};\n/**\n * @param {string} value\n * @return {!proto.NanoGetAddress} returns this\n */\n\n\nproto.NanoGetAddress.prototype.setCoinName = function (value) {\n  return jspb.Message.setField(this, 2, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoGetAddress} returns this\n */\n\n\nproto.NanoGetAddress.prototype.clearCoinName = function () {\n  return jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoGetAddress.prototype.hasCoinName = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional bool show_display = 3;\n * @return {boolean}\n */\n\n\nproto.NanoGetAddress.prototype.getShowDisplay = function () {\n  return jspb.Message.getBooleanFieldWithDefault(this, 3, false);\n};\n/**\n * @param {boolean} value\n * @return {!proto.NanoGetAddress} returns this\n */\n\n\nproto.NanoGetAddress.prototype.setShowDisplay = function (value) {\n  return jspb.Message.setField(this, 3, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoGetAddress} returns this\n */\n\n\nproto.NanoGetAddress.prototype.clearShowDisplay = function () {\n  return jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoGetAddress.prototype.hasShowDisplay = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.NanoAddress.prototype.toObject = function (opt_includeInstance) {\n    return proto.NanoAddress.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.NanoAddress} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.NanoAddress.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      address: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoAddress}\n */\n\n\nproto.NanoAddress.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoAddress();\n  return proto.NanoAddress.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoAddress} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoAddress}\n */\n\n\nproto.NanoAddress.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = reader.readString();\n        msg.setAddress(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.NanoAddress.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoAddress.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoAddress} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.NanoAddress.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string address = 1;\n * @return {string}\n */\n\n\nproto.NanoAddress.prototype.getAddress = function () {\n  return jspb.Message.getFieldWithDefault(this, 1, \"\");\n};\n/**\n * @param {string} value\n * @return {!proto.NanoAddress} returns this\n */\n\n\nproto.NanoAddress.prototype.setAddress = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoAddress} returns this\n */\n\n\nproto.NanoAddress.prototype.clearAddress = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoAddress.prototype.hasAddress = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.NanoSignTx.repeatedFields_ = [1, 6];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.NanoSignTx.prototype.toObject = function (opt_includeInstance) {\n    return proto.NanoSignTx.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.NanoSignTx} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.NanoSignTx.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n      coinName: jspb.Message.getFieldWithDefault(msg, 2, \"Nano\"),\n      parentBlock: (f = msg.getParentBlock()) && proto.NanoSignTx.ParentBlock.toObject(includeInstance, f),\n      linkHash: msg.getLinkHash_asB64(),\n      linkRecipient: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,\n      linkRecipientNList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,\n      representative: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,\n      balance: msg.getBalance_asB64(),\n      exchangeType: (f = msg.getExchangeType()) && types_pb.ExchangeType.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoSignTx}\n */\n\n\nproto.NanoSignTx.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoSignTx();\n  return proto.NanoSignTx.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoSignTx} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoSignTx}\n */\n\n\nproto.NanoSignTx.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];\n\n        for (var i = 0; i < values.length; i++) {\n          msg.addAddressN(values[i]);\n        }\n\n        break;\n\n      case 2:\n        var value = reader.readString();\n        msg.setCoinName(value);\n        break;\n\n      case 3:\n        var value = new proto.NanoSignTx.ParentBlock();\n        reader.readMessage(value, proto.NanoSignTx.ParentBlock.deserializeBinaryFromReader);\n        msg.setParentBlock(value);\n        break;\n\n      case 4:\n        var value = reader.readBytes();\n        msg.setLinkHash(value);\n        break;\n\n      case 5:\n        var value = reader.readString();\n        msg.setLinkRecipient(value);\n        break;\n\n      case 6:\n        var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];\n\n        for (var i = 0; i < values.length; i++) {\n          msg.addLinkRecipientN(values[i]);\n        }\n\n        break;\n\n      case 7:\n        var value = reader.readString();\n        msg.setRepresentative(value);\n        break;\n\n      case 8:\n        var value = reader.readBytes();\n        msg.setBalance(value);\n        break;\n\n      case 9:\n        var value = new types_pb.ExchangeType();\n        reader.readMessage(value, types_pb.ExchangeType.deserializeBinaryFromReader);\n        msg.setExchangeType(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignTx.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoSignTx.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoSignTx} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.NanoSignTx.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getAddressNList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(1, f);\n  }\n\n  f = jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getParentBlock();\n\n  if (f != null) {\n    writer.writeMessage(3, f, proto.NanoSignTx.ParentBlock.serializeBinaryToWriter);\n  }\n\n  f = jspb.Message.getField(message, 4);\n\n  if (f != null) {\n    writer.writeBytes(4, f);\n  }\n\n  f = jspb.Message.getField(message, 5);\n\n  if (f != null) {\n    writer.writeString(5, f);\n  }\n\n  f = message.getLinkRecipientNList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(6, f);\n  }\n\n  f = jspb.Message.getField(message, 7);\n\n  if (f != null) {\n    writer.writeString(7, f);\n  }\n\n  f = jspb.Message.getField(message, 8);\n\n  if (f != null) {\n    writer.writeBytes(8, f);\n  }\n\n  f = message.getExchangeType();\n\n  if (f != null) {\n    writer.writeMessage(9, f, types_pb.ExchangeType.serializeBinaryToWriter);\n  }\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.NanoSignTx.ParentBlock.prototype.toObject = function (opt_includeInstance) {\n    return proto.NanoSignTx.ParentBlock.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.NanoSignTx.ParentBlock} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.NanoSignTx.ParentBlock.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      parentHash: msg.getParentHash_asB64(),\n      link: msg.getLink_asB64(),\n      representative: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,\n      balance: msg.getBalance_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoSignTx.ParentBlock}\n */\n\n\nproto.NanoSignTx.ParentBlock.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoSignTx.ParentBlock();\n  return proto.NanoSignTx.ParentBlock.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoSignTx.ParentBlock} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoSignTx.ParentBlock}\n */\n\n\nproto.NanoSignTx.ParentBlock.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = reader.readBytes();\n        msg.setParentHash(value);\n        break;\n\n      case 2:\n        var value = reader.readBytes();\n        msg.setLink(value);\n        break;\n\n      case 4:\n        var value = reader.readString();\n        msg.setRepresentative(value);\n        break;\n\n      case 5:\n        var value = reader.readBytes();\n        msg.setBalance(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoSignTx.ParentBlock.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoSignTx.ParentBlock} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.NanoSignTx.ParentBlock.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeBytes(1, f);\n  }\n\n  f = jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBytes(2, f);\n  }\n\n  f = jspb.Message.getField(message, 4);\n\n  if (f != null) {\n    writer.writeString(4, f);\n  }\n\n  f = jspb.Message.getField(message, 5);\n\n  if (f != null) {\n    writer.writeBytes(5, f);\n  }\n};\n/**\n * optional bytes parent_hash = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getParentHash = function () {\n  return jspb.Message.getFieldWithDefault(this, 1, \"\");\n};\n/**\n * optional bytes parent_hash = 1;\n * This is a type-conversion wrapper around `getParentHash()`\n * @return {string}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getParentHash_asB64 = function () {\n  return jspb.Message.bytesAsB64(this.getParentHash());\n};\n/**\n * optional bytes parent_hash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getParentHash()`\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getParentHash_asU8 = function () {\n  return jspb.Message.bytesAsU8(this.getParentHash());\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.setParentHash = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.clearParentHash = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.hasParentHash = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional bytes link = 2;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getLink = function () {\n  return jspb.Message.getFieldWithDefault(this, 2, \"\");\n};\n/**\n * optional bytes link = 2;\n * This is a type-conversion wrapper around `getLink()`\n * @return {string}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getLink_asB64 = function () {\n  return jspb.Message.bytesAsB64(this.getLink());\n};\n/**\n * optional bytes link = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getLink()`\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getLink_asU8 = function () {\n  return jspb.Message.bytesAsU8(this.getLink());\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.setLink = function (value) {\n  return jspb.Message.setField(this, 2, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.clearLink = function () {\n  return jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.hasLink = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional string representative = 4;\n * @return {string}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getRepresentative = function () {\n  return jspb.Message.getFieldWithDefault(this, 4, \"\");\n};\n/**\n * @param {string} value\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.setRepresentative = function (value) {\n  return jspb.Message.setField(this, 4, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.clearRepresentative = function () {\n  return jspb.Message.setField(this, 4, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.hasRepresentative = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional bytes balance = 5;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getBalance = function () {\n  return jspb.Message.getFieldWithDefault(this, 5, \"\");\n};\n/**\n * optional bytes balance = 5;\n * This is a type-conversion wrapper around `getBalance()`\n * @return {string}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getBalance_asB64 = function () {\n  return jspb.Message.bytesAsB64(this.getBalance());\n};\n/**\n * optional bytes balance = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBalance()`\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.getBalance_asU8 = function () {\n  return jspb.Message.bytesAsU8(this.getBalance());\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.setBalance = function (value) {\n  return jspb.Message.setField(this, 5, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.clearBalance = function () {\n  return jspb.Message.setField(this, 5, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.ParentBlock.prototype.hasBalance = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * repeated uint32 address_n = 1;\n * @return {!Array<number>}\n */\n\n\nproto.NanoSignTx.prototype.getAddressNList = function () {\n  return jspb.Message.getRepeatedField(this, 1);\n};\n/**\n * @param {!Array<number>} value\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.setAddressNList = function (value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.addAddressN = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.clearAddressNList = function () {\n  return this.setAddressNList([]);\n};\n/**\n * optional string coin_name = 2;\n * @return {string}\n */\n\n\nproto.NanoSignTx.prototype.getCoinName = function () {\n  return jspb.Message.getFieldWithDefault(this, 2, \"Nano\");\n};\n/**\n * @param {string} value\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.setCoinName = function (value) {\n  return jspb.Message.setField(this, 2, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.clearCoinName = function () {\n  return jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.prototype.hasCoinName = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional ParentBlock parent_block = 3;\n * @return {?proto.NanoSignTx.ParentBlock}\n */\n\n\nproto.NanoSignTx.prototype.getParentBlock = function () {\n  return jspb.Message.getWrapperField(this, proto.NanoSignTx.ParentBlock, 3);\n};\n/**\n * @param {?proto.NanoSignTx.ParentBlock|undefined} value\n * @return {!proto.NanoSignTx} returns this\n*/\n\n\nproto.NanoSignTx.prototype.setParentBlock = function (value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.clearParentBlock = function () {\n  return this.setParentBlock(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.prototype.hasParentBlock = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional bytes link_hash = 4;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.NanoSignTx.prototype.getLinkHash = function () {\n  return jspb.Message.getFieldWithDefault(this, 4, \"\");\n};\n/**\n * optional bytes link_hash = 4;\n * This is a type-conversion wrapper around `getLinkHash()`\n * @return {string}\n */\n\n\nproto.NanoSignTx.prototype.getLinkHash_asB64 = function () {\n  return jspb.Message.bytesAsB64(this.getLinkHash());\n};\n/**\n * optional bytes link_hash = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getLinkHash()`\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignTx.prototype.getLinkHash_asU8 = function () {\n  return jspb.Message.bytesAsU8(this.getLinkHash());\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.setLinkHash = function (value) {\n  return jspb.Message.setField(this, 4, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.clearLinkHash = function () {\n  return jspb.Message.setField(this, 4, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.prototype.hasLinkHash = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional string link_recipient = 5;\n * @return {string}\n */\n\n\nproto.NanoSignTx.prototype.getLinkRecipient = function () {\n  return jspb.Message.getFieldWithDefault(this, 5, \"\");\n};\n/**\n * @param {string} value\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.setLinkRecipient = function (value) {\n  return jspb.Message.setField(this, 5, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.clearLinkRecipient = function () {\n  return jspb.Message.setField(this, 5, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.prototype.hasLinkRecipient = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * repeated uint32 link_recipient_n = 6;\n * @return {!Array<number>}\n */\n\n\nproto.NanoSignTx.prototype.getLinkRecipientNList = function () {\n  return jspb.Message.getRepeatedField(this, 6);\n};\n/**\n * @param {!Array<number>} value\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.setLinkRecipientNList = function (value) {\n  return jspb.Message.setField(this, 6, value || []);\n};\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.addLinkRecipientN = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.clearLinkRecipientNList = function () {\n  return this.setLinkRecipientNList([]);\n};\n/**\n * optional string representative = 7;\n * @return {string}\n */\n\n\nproto.NanoSignTx.prototype.getRepresentative = function () {\n  return jspb.Message.getFieldWithDefault(this, 7, \"\");\n};\n/**\n * @param {string} value\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.setRepresentative = function (value) {\n  return jspb.Message.setField(this, 7, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.clearRepresentative = function () {\n  return jspb.Message.setField(this, 7, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.prototype.hasRepresentative = function () {\n  return jspb.Message.getField(this, 7) != null;\n};\n/**\n * optional bytes balance = 8;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.NanoSignTx.prototype.getBalance = function () {\n  return jspb.Message.getFieldWithDefault(this, 8, \"\");\n};\n/**\n * optional bytes balance = 8;\n * This is a type-conversion wrapper around `getBalance()`\n * @return {string}\n */\n\n\nproto.NanoSignTx.prototype.getBalance_asB64 = function () {\n  return jspb.Message.bytesAsB64(this.getBalance());\n};\n/**\n * optional bytes balance = 8;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBalance()`\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignTx.prototype.getBalance_asU8 = function () {\n  return jspb.Message.bytesAsU8(this.getBalance());\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.setBalance = function (value) {\n  return jspb.Message.setField(this, 8, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.clearBalance = function () {\n  return jspb.Message.setField(this, 8, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.prototype.hasBalance = function () {\n  return jspb.Message.getField(this, 8) != null;\n};\n/**\n * optional ExchangeType exchange_type = 9;\n * @return {?proto.ExchangeType}\n */\n\n\nproto.NanoSignTx.prototype.getExchangeType = function () {\n  return jspb.Message.getWrapperField(this, types_pb.ExchangeType, 9);\n};\n/**\n * @param {?proto.ExchangeType|undefined} value\n * @return {!proto.NanoSignTx} returns this\n*/\n\n\nproto.NanoSignTx.prototype.setExchangeType = function (value) {\n  return jspb.Message.setWrapperField(this, 9, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\n\n\nproto.NanoSignTx.prototype.clearExchangeType = function () {\n  return this.setExchangeType(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignTx.prototype.hasExchangeType = function () {\n  return jspb.Message.getField(this, 9) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.NanoSignedTx.prototype.toObject = function (opt_includeInstance) {\n    return proto.NanoSignedTx.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.NanoSignedTx} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.NanoSignedTx.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      signature: msg.getSignature_asB64(),\n      blockHash: msg.getBlockHash_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoSignedTx}\n */\n\n\nproto.NanoSignedTx.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoSignedTx();\n  return proto.NanoSignedTx.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoSignedTx} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoSignedTx}\n */\n\n\nproto.NanoSignedTx.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = reader.readBytes();\n        msg.setSignature(value);\n        break;\n\n      case 2:\n        var value = reader.readBytes();\n        msg.setBlockHash(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignedTx.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoSignedTx.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoSignedTx} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.NanoSignedTx.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeBytes(1, f);\n  }\n\n  f = jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBytes(2, f);\n  }\n};\n/**\n * optional bytes signature = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.NanoSignedTx.prototype.getSignature = function () {\n  return jspb.Message.getFieldWithDefault(this, 1, \"\");\n};\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\n\n\nproto.NanoSignedTx.prototype.getSignature_asB64 = function () {\n  return jspb.Message.bytesAsB64(this.getSignature());\n};\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignedTx.prototype.getSignature_asU8 = function () {\n  return jspb.Message.bytesAsU8(this.getSignature());\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignedTx} returns this\n */\n\n\nproto.NanoSignedTx.prototype.setSignature = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignedTx} returns this\n */\n\n\nproto.NanoSignedTx.prototype.clearSignature = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignedTx.prototype.hasSignature = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional bytes block_hash = 2;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.NanoSignedTx.prototype.getBlockHash = function () {\n  return jspb.Message.getFieldWithDefault(this, 2, \"\");\n};\n/**\n * optional bytes block_hash = 2;\n * This is a type-conversion wrapper around `getBlockHash()`\n * @return {string}\n */\n\n\nproto.NanoSignedTx.prototype.getBlockHash_asB64 = function () {\n  return jspb.Message.bytesAsB64(this.getBlockHash());\n};\n/**\n * optional bytes block_hash = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlockHash()`\n * @return {!Uint8Array}\n */\n\n\nproto.NanoSignedTx.prototype.getBlockHash_asU8 = function () {\n  return jspb.Message.bytesAsU8(this.getBlockHash());\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignedTx} returns this\n */\n\n\nproto.NanoSignedTx.prototype.setBlockHash = function (value) {\n  return jspb.Message.setField(this, 2, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignedTx} returns this\n */\n\n\nproto.NanoSignedTx.prototype.clearBlockHash = function () {\n  return jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.NanoSignedTx.prototype.hasBlockHash = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n\ngoog.object.extend(exports, proto);","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/@keepkey/device-protocol/lib/messages-nano_pb.js"],"names":["jspb","require","goog","global","call","types_pb","object","extend","proto","exportSymbol","NanoGetAddress","opt_data","Message","initialize","repeatedFields_","inherits","DEBUG","COMPILED","displayName","NanoAddress","NanoSignTx","ParentBlock","NanoSignedTx","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","addressNList","getRepeatedField","undefined","coinName","getFieldWithDefault","showDisplay","getBooleanField","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","values","isDelimited","readPackedUint32","readUint32","i","length","addAddressN","value","readString","setCoinName","readBool","setShowDisplay","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","getAddressNList","writeRepeatedUint32","getField","writeString","writeBool","setAddressNList","setField","opt_index","addToRepeatedField","clearAddressNList","getCoinName","clearCoinName","hasCoinName","getShowDisplay","getBooleanFieldWithDefault","clearShowDisplay","hasShowDisplay","address","setAddress","getAddress","clearAddress","hasAddress","parentBlock","getParentBlock","linkHash","getLinkHash_asB64","linkRecipient","linkRecipientNList","representative","balance","getBalance_asB64","exchangeType","getExchangeType","ExchangeType","readMessage","setParentBlock","readBytes","setLinkHash","setLinkRecipient","addLinkRecipientN","setRepresentative","setBalance","setExchangeType","writeMessage","writeBytes","getLinkRecipientNList","parentHash","getParentHash_asB64","link","getLink_asB64","setParentHash","setLink","getParentHash","bytesAsB64","getParentHash_asU8","bytesAsU8","clearParentHash","hasParentHash","getLink","getLink_asU8","clearLink","hasLink","getRepresentative","clearRepresentative","hasRepresentative","getBalance","getBalance_asU8","clearBalance","hasBalance","getWrapperField","setWrapperField","clearParentBlock","hasParentBlock","getLinkHash","getLinkHash_asU8","clearLinkHash","hasLinkHash","getLinkRecipient","clearLinkRecipient","hasLinkRecipient","setLinkRecipientNList","clearLinkRecipientNList","clearExchangeType","hasExchangeType","signature","getSignature_asB64","blockHash","getBlockHash_asB64","setSignature","setBlockHash","getSignature","getSignature_asU8","clearSignature","hasSignature","getBlockHash","getBlockHash_asU8","clearBlockHash","hasBlockHash","exports"],"mappings":"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","sourcesContent":["// source: messages-nano.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function(){ return this }).call(null);\n\nvar types_pb = require('./types_pb.js');\ngoog.object.extend(proto, types_pb);\ngoog.exportSymbol('proto.NanoAddress', null, global);\ngoog.exportSymbol('proto.NanoGetAddress', null, global);\ngoog.exportSymbol('proto.NanoSignTx', null, global);\ngoog.exportSymbol('proto.NanoSignTx.ParentBlock', null, global);\ngoog.exportSymbol('proto.NanoSignedTx', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.NanoGetAddress = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.NanoGetAddress.repeatedFields_, null);\n};\ngoog.inherits(proto.NanoGetAddress, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoGetAddress.displayName = 'proto.NanoGetAddress';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.NanoAddress = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.NanoAddress, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoAddress.displayName = 'proto.NanoAddress';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.NanoSignTx = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.NanoSignTx.repeatedFields_, null);\n};\ngoog.inherits(proto.NanoSignTx, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoSignTx.displayName = 'proto.NanoSignTx';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.NanoSignTx.ParentBlock = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.NanoSignTx.ParentBlock, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoSignTx.ParentBlock.displayName = 'proto.NanoSignTx.ParentBlock';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.NanoSignedTx = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.NanoSignedTx, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.NanoSignedTx.displayName = 'proto.NanoSignedTx';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.NanoGetAddress.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.NanoGetAddress.prototype.toObject = function(opt_includeInstance) {\n  return proto.NanoGetAddress.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.NanoGetAddress} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoGetAddress.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    coinName: jspb.Message.getFieldWithDefault(msg, 2, \"Nano\"),\n    showDisplay: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoGetAddress}\n */\nproto.NanoGetAddress.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoGetAddress;\n  return proto.NanoGetAddress.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoGetAddress} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoGetAddress}\n */\nproto.NanoGetAddress.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addAddressN(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCoinName(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setShowDisplay(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.NanoGetAddress.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoGetAddress.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoGetAddress} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoGetAddress.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAddressNList();\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(\n      1,\n      f\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 address_n = 1;\n * @return {!Array<number>}\n */\nproto.NanoGetAddress.prototype.getAddressNList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.NanoGetAddress} returns this\n */\nproto.NanoGetAddress.prototype.setAddressNList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.NanoGetAddress} returns this\n */\nproto.NanoGetAddress.prototype.addAddressN = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.NanoGetAddress} returns this\n */\nproto.NanoGetAddress.prototype.clearAddressNList = function() {\n  return this.setAddressNList([]);\n};\n\n\n/**\n * optional string coin_name = 2;\n * @return {string}\n */\nproto.NanoGetAddress.prototype.getCoinName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"Nano\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.NanoGetAddress} returns this\n */\nproto.NanoGetAddress.prototype.setCoinName = function(value) {\n  return jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoGetAddress} returns this\n */\nproto.NanoGetAddress.prototype.clearCoinName = function() {\n  return jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoGetAddress.prototype.hasCoinName = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional bool show_display = 3;\n * @return {boolean}\n */\nproto.NanoGetAddress.prototype.getShowDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.NanoGetAddress} returns this\n */\nproto.NanoGetAddress.prototype.setShowDisplay = function(value) {\n  return jspb.Message.setField(this, 3, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoGetAddress} returns this\n */\nproto.NanoGetAddress.prototype.clearShowDisplay = function() {\n  return jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoGetAddress.prototype.hasShowDisplay = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.NanoAddress.prototype.toObject = function(opt_includeInstance) {\n  return proto.NanoAddress.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.NanoAddress} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoAddress.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    address: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoAddress}\n */\nproto.NanoAddress.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoAddress;\n  return proto.NanoAddress.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoAddress} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoAddress}\n */\nproto.NanoAddress.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAddress(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.NanoAddress.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoAddress.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoAddress} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoAddress.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string address = 1;\n * @return {string}\n */\nproto.NanoAddress.prototype.getAddress = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.NanoAddress} returns this\n */\nproto.NanoAddress.prototype.setAddress = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoAddress} returns this\n */\nproto.NanoAddress.prototype.clearAddress = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoAddress.prototype.hasAddress = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.NanoSignTx.repeatedFields_ = [1,6];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.NanoSignTx.prototype.toObject = function(opt_includeInstance) {\n  return proto.NanoSignTx.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.NanoSignTx} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoSignTx.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    coinName: jspb.Message.getFieldWithDefault(msg, 2, \"Nano\"),\n    parentBlock: (f = msg.getParentBlock()) && proto.NanoSignTx.ParentBlock.toObject(includeInstance, f),\n    linkHash: msg.getLinkHash_asB64(),\n    linkRecipient: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,\n    linkRecipientNList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,\n    representative: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,\n    balance: msg.getBalance_asB64(),\n    exchangeType: (f = msg.getExchangeType()) && types_pb.ExchangeType.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoSignTx}\n */\nproto.NanoSignTx.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoSignTx;\n  return proto.NanoSignTx.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoSignTx} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoSignTx}\n */\nproto.NanoSignTx.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addAddressN(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCoinName(value);\n      break;\n    case 3:\n      var value = new proto.NanoSignTx.ParentBlock;\n      reader.readMessage(value,proto.NanoSignTx.ParentBlock.deserializeBinaryFromReader);\n      msg.setParentBlock(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setLinkHash(value);\n      break;\n    case 5:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setLinkRecipient(value);\n      break;\n    case 6:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addLinkRecipientN(values[i]);\n      }\n      break;\n    case 7:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRepresentative(value);\n      break;\n    case 8:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBalance(value);\n      break;\n    case 9:\n      var value = new types_pb.ExchangeType;\n      reader.readMessage(value,types_pb.ExchangeType.deserializeBinaryFromReader);\n      msg.setExchangeType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.NanoSignTx.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoSignTx.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoSignTx} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoSignTx.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAddressNList();\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(\n      1,\n      f\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getParentBlock();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.NanoSignTx.ParentBlock.serializeBinaryToWriter\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));\n  if (f != null) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 5));\n  if (f != null) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f = message.getLinkRecipientNList();\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(\n      6,\n      f\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 7));\n  if (f != null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));\n  if (f != null) {\n    writer.writeBytes(\n      8,\n      f\n    );\n  }\n  f = message.getExchangeType();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      types_pb.ExchangeType.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.NanoSignTx.ParentBlock.prototype.toObject = function(opt_includeInstance) {\n  return proto.NanoSignTx.ParentBlock.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.NanoSignTx.ParentBlock} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoSignTx.ParentBlock.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    parentHash: msg.getParentHash_asB64(),\n    link: msg.getLink_asB64(),\n    representative: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,\n    balance: msg.getBalance_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoSignTx.ParentBlock}\n */\nproto.NanoSignTx.ParentBlock.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoSignTx.ParentBlock;\n  return proto.NanoSignTx.ParentBlock.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoSignTx.ParentBlock} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoSignTx.ParentBlock}\n */\nproto.NanoSignTx.ParentBlock.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setParentHash(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setLink(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRepresentative(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBalance(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.NanoSignTx.ParentBlock.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoSignTx.ParentBlock.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoSignTx.ParentBlock} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoSignTx.ParentBlock.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 4));\n  if (f != null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));\n  if (f != null) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes parent_hash = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.NanoSignTx.ParentBlock.prototype.getParentHash = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes parent_hash = 1;\n * This is a type-conversion wrapper around `getParentHash()`\n * @return {string}\n */\nproto.NanoSignTx.ParentBlock.prototype.getParentHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getParentHash()));\n};\n\n\n/**\n * optional bytes parent_hash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getParentHash()`\n * @return {!Uint8Array}\n */\nproto.NanoSignTx.ParentBlock.prototype.getParentHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getParentHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\nproto.NanoSignTx.ParentBlock.prototype.setParentHash = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\nproto.NanoSignTx.ParentBlock.prototype.clearParentHash = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.ParentBlock.prototype.hasParentHash = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional bytes link = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.NanoSignTx.ParentBlock.prototype.getLink = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes link = 2;\n * This is a type-conversion wrapper around `getLink()`\n * @return {string}\n */\nproto.NanoSignTx.ParentBlock.prototype.getLink_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getLink()));\n};\n\n\n/**\n * optional bytes link = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getLink()`\n * @return {!Uint8Array}\n */\nproto.NanoSignTx.ParentBlock.prototype.getLink_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getLink()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\nproto.NanoSignTx.ParentBlock.prototype.setLink = function(value) {\n  return jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\nproto.NanoSignTx.ParentBlock.prototype.clearLink = function() {\n  return jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.ParentBlock.prototype.hasLink = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional string representative = 4;\n * @return {string}\n */\nproto.NanoSignTx.ParentBlock.prototype.getRepresentative = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\nproto.NanoSignTx.ParentBlock.prototype.setRepresentative = function(value) {\n  return jspb.Message.setField(this, 4, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\nproto.NanoSignTx.ParentBlock.prototype.clearRepresentative = function() {\n  return jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.ParentBlock.prototype.hasRepresentative = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional bytes balance = 5;\n * @return {!(string|Uint8Array)}\n */\nproto.NanoSignTx.ParentBlock.prototype.getBalance = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes balance = 5;\n * This is a type-conversion wrapper around `getBalance()`\n * @return {string}\n */\nproto.NanoSignTx.ParentBlock.prototype.getBalance_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBalance()));\n};\n\n\n/**\n * optional bytes balance = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBalance()`\n * @return {!Uint8Array}\n */\nproto.NanoSignTx.ParentBlock.prototype.getBalance_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBalance()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\nproto.NanoSignTx.ParentBlock.prototype.setBalance = function(value) {\n  return jspb.Message.setField(this, 5, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx.ParentBlock} returns this\n */\nproto.NanoSignTx.ParentBlock.prototype.clearBalance = function() {\n  return jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.ParentBlock.prototype.hasBalance = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * repeated uint32 address_n = 1;\n * @return {!Array<number>}\n */\nproto.NanoSignTx.prototype.getAddressNList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.setAddressNList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.addAddressN = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.clearAddressNList = function() {\n  return this.setAddressNList([]);\n};\n\n\n/**\n * optional string coin_name = 2;\n * @return {string}\n */\nproto.NanoSignTx.prototype.getCoinName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"Nano\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.setCoinName = function(value) {\n  return jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.clearCoinName = function() {\n  return jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.prototype.hasCoinName = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional ParentBlock parent_block = 3;\n * @return {?proto.NanoSignTx.ParentBlock}\n */\nproto.NanoSignTx.prototype.getParentBlock = function() {\n  return /** @type{?proto.NanoSignTx.ParentBlock} */ (\n    jspb.Message.getWrapperField(this, proto.NanoSignTx.ParentBlock, 3));\n};\n\n\n/**\n * @param {?proto.NanoSignTx.ParentBlock|undefined} value\n * @return {!proto.NanoSignTx} returns this\n*/\nproto.NanoSignTx.prototype.setParentBlock = function(value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.clearParentBlock = function() {\n  return this.setParentBlock(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.prototype.hasParentBlock = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional bytes link_hash = 4;\n * @return {!(string|Uint8Array)}\n */\nproto.NanoSignTx.prototype.getLinkHash = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes link_hash = 4;\n * This is a type-conversion wrapper around `getLinkHash()`\n * @return {string}\n */\nproto.NanoSignTx.prototype.getLinkHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getLinkHash()));\n};\n\n\n/**\n * optional bytes link_hash = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getLinkHash()`\n * @return {!Uint8Array}\n */\nproto.NanoSignTx.prototype.getLinkHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getLinkHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.setLinkHash = function(value) {\n  return jspb.Message.setField(this, 4, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.clearLinkHash = function() {\n  return jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.prototype.hasLinkHash = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional string link_recipient = 5;\n * @return {string}\n */\nproto.NanoSignTx.prototype.getLinkRecipient = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.setLinkRecipient = function(value) {\n  return jspb.Message.setField(this, 5, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.clearLinkRecipient = function() {\n  return jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.prototype.hasLinkRecipient = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * repeated uint32 link_recipient_n = 6;\n * @return {!Array<number>}\n */\nproto.NanoSignTx.prototype.getLinkRecipientNList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.setLinkRecipientNList = function(value) {\n  return jspb.Message.setField(this, 6, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.addLinkRecipientN = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.clearLinkRecipientNList = function() {\n  return this.setLinkRecipientNList([]);\n};\n\n\n/**\n * optional string representative = 7;\n * @return {string}\n */\nproto.NanoSignTx.prototype.getRepresentative = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.setRepresentative = function(value) {\n  return jspb.Message.setField(this, 7, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.clearRepresentative = function() {\n  return jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.prototype.hasRepresentative = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n/**\n * optional bytes balance = 8;\n * @return {!(string|Uint8Array)}\n */\nproto.NanoSignTx.prototype.getBalance = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/**\n * optional bytes balance = 8;\n * This is a type-conversion wrapper around `getBalance()`\n * @return {string}\n */\nproto.NanoSignTx.prototype.getBalance_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBalance()));\n};\n\n\n/**\n * optional bytes balance = 8;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBalance()`\n * @return {!Uint8Array}\n */\nproto.NanoSignTx.prototype.getBalance_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBalance()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.setBalance = function(value) {\n  return jspb.Message.setField(this, 8, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.clearBalance = function() {\n  return jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.prototype.hasBalance = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n/**\n * optional ExchangeType exchange_type = 9;\n * @return {?proto.ExchangeType}\n */\nproto.NanoSignTx.prototype.getExchangeType = function() {\n  return /** @type{?proto.ExchangeType} */ (\n    jspb.Message.getWrapperField(this, types_pb.ExchangeType, 9));\n};\n\n\n/**\n * @param {?proto.ExchangeType|undefined} value\n * @return {!proto.NanoSignTx} returns this\n*/\nproto.NanoSignTx.prototype.setExchangeType = function(value) {\n  return jspb.Message.setWrapperField(this, 9, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.NanoSignTx} returns this\n */\nproto.NanoSignTx.prototype.clearExchangeType = function() {\n  return this.setExchangeType(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignTx.prototype.hasExchangeType = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.NanoSignedTx.prototype.toObject = function(opt_includeInstance) {\n  return proto.NanoSignedTx.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.NanoSignedTx} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoSignedTx.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    signature: msg.getSignature_asB64(),\n    blockHash: msg.getBlockHash_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.NanoSignedTx}\n */\nproto.NanoSignedTx.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.NanoSignedTx;\n  return proto.NanoSignedTx.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.NanoSignedTx} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.NanoSignedTx}\n */\nproto.NanoSignedTx.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBlockHash(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.NanoSignedTx.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.NanoSignedTx.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.NanoSignedTx} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.NanoSignedTx.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes signature = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.NanoSignedTx.prototype.getSignature = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.NanoSignedTx.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.NanoSignedTx.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignedTx} returns this\n */\nproto.NanoSignedTx.prototype.setSignature = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignedTx} returns this\n */\nproto.NanoSignedTx.prototype.clearSignature = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignedTx.prototype.hasSignature = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional bytes block_hash = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.NanoSignedTx.prototype.getBlockHash = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes block_hash = 2;\n * This is a type-conversion wrapper around `getBlockHash()`\n * @return {string}\n */\nproto.NanoSignedTx.prototype.getBlockHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBlockHash()));\n};\n\n\n/**\n * optional bytes block_hash = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlockHash()`\n * @return {!Uint8Array}\n */\nproto.NanoSignedTx.prototype.getBlockHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBlockHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.NanoSignedTx} returns this\n */\nproto.NanoSignedTx.prototype.setBlockHash = function(value) {\n  return jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.NanoSignedTx} returns this\n */\nproto.NanoSignedTx.prototype.clearBlockHash = function() {\n  return jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.NanoSignedTx.prototype.hasBlockHash = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\ngoog.object.extend(exports, proto);\n"]},"metadata":{},"sourceType":"script"}