{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst errors_1 = require(\"./errors\");\n\nconst utils_1 = require(\"./utils\");\n\nconst cbor_1 = require(\"./cbor\");\n\nclass UR {\n  constructor(_cborPayload, _type = 'bytes') {\n    this._cborPayload = _cborPayload;\n    this._type = _type;\n\n    if (!utils_1.isURType(this._type)) {\n      throw new errors_1.InvalidTypeError();\n    }\n  }\n\n  static fromBuffer(buf) {\n    return new UR(cbor_1.cborEncode(buf));\n  }\n\n  static from(value, encoding) {\n    return UR.fromBuffer(Buffer.from(value, encoding));\n  }\n\n  decodeCBOR() {\n    return cbor_1.cborDecode(this._cborPayload);\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get cbor() {\n    return this._cborPayload;\n  }\n\n  equals(ur2) {\n    return this.type === ur2.type && this.cbor.equals(ur2.cbor);\n  }\n\n}\n\nexports.default = UR;","map":{"version":3,"sources":["../src/ur.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAqB,EAArB,CAAuB;AACrB,EAAA,WAAA,CACU,YADV,EAEU,KAAA,GAAgB,OAF1B,EAEiC;AADvB,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,KAAA,GAAA,KAAA;;AAER,QAAI,CAAC,OAAA,CAAA,QAAA,CAAS,KAAK,KAAd,CAAL,EAA2B;AACzB,YAAM,IAAI,QAAA,CAAA,gBAAJ,EAAN;AACD;AACF;;AAEuB,SAAV,UAAU,CAAC,GAAD,EAAY;AAClC,WAAO,IAAI,EAAJ,CAAO,MAAA,CAAA,UAAA,CAAW,GAAX,CAAP,CAAP;AACD;;AAEiB,SAAJ,IAAI,CAAC,KAAD,EAAa,QAAb,EAAsC;AACtD,WAAO,EAAE,CAAC,UAAH,CAAc,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,QAAnB,CAAd,CAAP;AACD;;AAEM,EAAA,UAAU,GAAA;AACf,WAAO,MAAA,CAAA,UAAA,CAAW,KAAK,YAAhB,CAAP;AACD;;AAEO,MAAJ,IAAI,GAAA;AAAK,WAAO,KAAK,KAAZ;AAAoB;;AACzB,MAAJ,IAAI,GAAA;AAAK,WAAO,KAAK,YAAZ;AAA2B;;AAEjC,EAAA,MAAM,CAAC,GAAD,EAAQ;AACnB,WAAO,KAAK,IAAL,KAAc,GAAG,CAAC,IAAlB,IAA0B,KAAK,IAAL,CAAU,MAAV,CAAiB,GAAG,CAAC,IAArB,CAAjC;AACD;;AA3BoB;;AAAvB,OAAA,CAAA,OAAA,GAAA,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"./utils\");\nconst cbor_1 = require(\"./cbor\");\nclass UR {\n    constructor(_cborPayload, _type = 'bytes') {\n        this._cborPayload = _cborPayload;\n        this._type = _type;\n        if (!utils_1.isURType(this._type)) {\n            throw new errors_1.InvalidTypeError();\n        }\n    }\n    static fromBuffer(buf) {\n        return new UR(cbor_1.cborEncode(buf));\n    }\n    static from(value, encoding) {\n        return UR.fromBuffer(Buffer.from(value, encoding));\n    }\n    decodeCBOR() {\n        return cbor_1.cborDecode(this._cborPayload);\n    }\n    get type() { return this._type; }\n    get cbor() { return this._cborPayload; }\n    equals(ur2) {\n        return this.type === ur2.type && this.cbor.equals(ur2.cbor);\n    }\n}\nexports.default = UR;\n//# sourceMappingURL=ur.js.map"]},"metadata":{},"sourceType":"script"}