{"ast":null,"code":"const crypto = require('crypto');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst SDK = require('gridplus-sdk');\n\nconst Transaction = require('ethereumjs-tx').Transaction;\n\nconst Common = require('ethereumjs-common').default;\n\nconst Util = require('ethereumjs-util');\n\nconst keyringType = 'Lattice Hardware';\nconst HARDENED_OFFSET = 0x80000000;\nconst PER_PAGE = 5;\nconst CLOSE_CODE = -1000;\nconst STANDARD_HD_PATH = `m/44'/60'/0'/0/x`;\n\nclass LatticeKeyring extends EventEmitter {\n  constructor(opts = {}) {\n    super();\n    this.type = keyringType;\n\n    this._resetDefaults();\n\n    this.deserialize(opts);\n  } //-------------------------------------------------------------------\n  // Keyring API (per `https://github.com/MetaMask/eth-simple-keyring`)\n  //-------------------------------------------------------------------\n\n\n  deserialize(opts = {}) {\n    if (opts.hdPath) this.hdPath = opts.hdPath;\n    if (opts.creds) this.creds = opts.creds;\n    if (opts.accounts) this.accounts = opts.accounts;\n    if (opts.accountIndices) this.accountIndices = opts.accountIndices;\n    if (opts.walletUID) this.walletUID = opts.walletUID;\n    if (opts.name) // Legacy; use is deprecated and appName is more descriptive\n      this.appName = opts.name;\n    if (opts.appName) this.appName = opts.appName;\n    if (opts.network) this.network = opts.network;\n    if (opts.page) this.page = opts.page;\n    return Promise.resolve();\n  }\n\n  setHdPath(hdPath) {\n    this.hdPath = hdPath;\n  }\n\n  serialize() {\n    return Promise.resolve({\n      creds: this.creds,\n      accounts: this.accounts,\n      accountIndices: this.accountIndices,\n      walletUID: this.walletUID,\n      appName: this.appName,\n      name: this.name,\n      // Legacy; use is deprecated\n      network: this.network,\n      page: this.page,\n      hdPath: this.hdPath\n    });\n  }\n\n  isUnlocked() {\n    return this._hasCreds() && this._hasSession();\n  } // Initialize a session with the Lattice1 device using the GridPlus SDK\n\n\n  unlock(updateData = true) {\n    return new Promise((resolve, reject) => {\n      this._getCreds().then(creds => {\n        if (creds) {\n          this.creds.deviceID = creds.deviceID;\n          this.creds.password = creds.password;\n          this.creds.endpoint = creds.endpoint || null;\n        }\n\n        return this._initSession();\n      }).then(() => {\n        return this._connect(updateData);\n      }).then(() => {\n        return resolve('Unlocked');\n      }).catch(err => {\n        return reject(new Error(err));\n      });\n    });\n  } // Add addresses to the local store and return the full result\n\n\n  addAccounts(n = 1) {\n    return new Promise((resolve, reject) => {\n      if (n === CLOSE_CODE) {\n        // Special case: use a code to forget the device. \n        // (This function is overloaded due to constraints upstream)\n        this.forgetDevice();\n        return resolve([]);\n      } else if (n <= 0) {\n        // Avoid non-positive numbers.\n        return reject('Number of accounts to add must be a positive number.');\n      } else {\n        // Normal behavior: establish the connection and fetch addresses.\n        this.unlock().then(() => {\n          return this._fetchAddresses(n, this.unlockedAccount);\n        }).then(addrs => {\n          // Add these indices\n          addrs.forEach((addr, i) => {\n            if (this.accounts.indexOf(addr) === -1) {\n              this.accounts.push(addr);\n              this.accountIndices.push(this.unlockedAccount + i);\n            }\n          });\n          return resolve(this.accounts);\n        }).catch(err => {\n          return reject(new Error(err));\n        });\n      }\n    });\n  } // Return the local store of addresses\n\n\n  getAccounts() {\n    return Promise.resolve(this.accounts ? this.accounts.slice() : [].slice());\n  }\n\n  signTransaction(address, tx) {\n    return new Promise((resolve, reject) => {\n      this._unlockAndFindAccount(address).then(addrIdx => {\n        // Build the Lattice request data and make request\n        // We expect `tx` to be an `ethereumjs-tx` object, meaning all fields are bufferized\n        // To ensure everything plays nicely with gridplus-sdk, we convert everything to hex strings\n        const txData = {\n          chainId: tx.getChainId() || 1,\n          nonce: `0x${tx.nonce.toString('hex')}` || 0,\n          gasPrice: `0x${tx.gasPrice.toString('hex')}`,\n          gasLimit: `0x${tx.gasLimit.toString('hex')}`,\n          to: `0x${tx.to.toString('hex')}`,\n          value: `0x${tx.value.toString('hex')}`,\n          data: tx.data.length === 0 ? null : `0x${tx.data.toString('hex')}`,\n          signerPath: this._getHDPathIndices(addrIdx)\n        };\n        return this._signTxData(txData);\n      }).then(signedTx => {\n        // Add the sig params. `signedTx = { sig: { v, r, s }, tx, txHash}`\n        if (!signedTx.sig || !signedTx.sig.v || !signedTx.sig.r || !signedTx.sig.s) return reject(new Error('No signature returned.'));\n        tx.r = Buffer.from(signedTx.sig.r, 'hex');\n        tx.s = Buffer.from(signedTx.sig.s, 'hex');\n        tx.v = signedTx.sig.v; // For non-mainnet EIP155 chains, we have to create a custom network in order to instantiate\n        // the validating ethereumjs-tx Transaction object\n        // For EIP155 chains, v = CHAIN_ID * 2 + 35, meaning it can never be <35\n        // Non-EIP155 chains use v = {27,28}\n\n        const useCustomEip155Chain = tx.getChainId() !== 1 && parseInt(`0x${tx.v.toString('hex')}`) > 28; // Not sure how to get `networkId` so I'm just going to use the `chainId` value for both.\n        // see: https://medium.com/@pedrouid/chainid-vs-networkid-how-do-they-differ-on-ethereum-eec2ed41635b\n\n        const customNetwork = Common.forCustomChain('mainnet', {\n          name: 'notMainnet',\n          networkId: tx.getChainId(),\n          chainId: tx.getChainId()\n        }, 'byzantium');\n        let validatingTx;\n        if (true == useCustomEip155Chain) validatingTx = new Transaction(tx, {\n          common: customNetwork\n        });else validatingTx = new Transaction(tx); // Use the validating transaction to confirm the `from` sender matches the address we\n        // signed from (i.e. `address`)\n\n        const signer = Util.toChecksumAddress(`0x${validatingTx.from.toString('hex')}`);\n        const inputAddress = Util.toChecksumAddress(address);\n        if (signer !== inputAddress) return reject(new Error(`Unexpected signer. Got ${signer}. Expected ${inputAddress}`));\n        return resolve(tx);\n      }).catch(err => {\n        return reject(new Error(err));\n      });\n    });\n  }\n\n  signPersonalMessage(address, msg) {\n    return this.signMessage(address, {\n      payload: msg,\n      protocol: 'signPersonal'\n    });\n  }\n\n  signTypedData(address, msg, opts) {\n    if (opts.version && opts.version !== 'V4' && opts.version !== 'V3') throw new Error(`Only signTypedData V3 and V4 messages (EIP712) are supported. Got version ${opts.version}`);\n    return this.signMessage(address, {\n      payload: msg,\n      protocol: 'eip712'\n    });\n  }\n\n  signMessage(address, msg) {\n    return new Promise((resolve, reject) => {\n      this._unlockAndFindAccount(address).then(addrIdx => {\n        const {\n          payload,\n          protocol\n        } = msg;\n        if (!payload || !protocol) return reject('`payload` and `protocol` fields must be included in the request');\n        const req = {\n          currency: 'ETH_MSG',\n          data: {\n            protocol,\n            payload,\n            signerPath: this._getHDPathIndices(addrIdx)\n          }\n        };\n        if (!this._hasSession()) return reject('No SDK session started. Cannot sign transaction.');\n        this.sdkSession.sign(req, (err, res) => {\n          if (err) return reject(new Error(err));\n          if (!res.sig) return reject(new Error('No signature returned')); // Convert the `v` to a number. It should convert to 0 or 1\n\n          try {\n            let v = res.sig.v.toString('hex');\n            if (v.length < 2) v = `0${v}`;\n            return resolve(`0x${res.sig.r}${res.sig.s}${v}`);\n          } catch (err) {\n            return reject(new Error('Invalid signature format returned.'));\n          }\n        });\n      });\n    });\n  }\n\n  exportAccount(address) {\n    return Promise.reject(Error('exportAccount not supported by this device'));\n  }\n\n  removeAccount(address) {\n    // We only allow one account at a time, so removing any account\n    // should result in a state reset. The user will need to reconnect\n    // to the Lattice\n    this.forgetDevice();\n  }\n\n  getFirstPage() {\n    this.page = 0;\n    return this._getPage(0);\n  }\n\n  getNextPage() {\n    return this._getPage(1);\n  }\n\n  getPreviousPage() {\n    return this._getPage(-1);\n  }\n\n  setAccountToUnlock(index) {\n    this.unlockedAccount = parseInt(index, 10);\n  }\n\n  forgetDevice() {\n    this._resetDefaults();\n  } //-------------------------------------------------------------------\n  // Internal methods and interface to SDK\n  //-------------------------------------------------------------------\n  // Find the account index of the requested address.\n  // Note that this is the BIP39 path index, not the index in the address cache.\n\n\n  _unlockAndFindAccount(address) {\n    return new Promise((resolve, reject) => {\n      // NOTE: We are passing `false` here because we do NOT want\n      // state data to be updated as a result of a transaction request.\n      // It is possible the user inserted or removed a SafeCard and\n      // will not be able to sign this transaction. If that is the\n      // case, we just want to return an error message\n      this.unlock(false).then(() => {\n        return this.getAccounts();\n      }).then(addrs => {\n        // Find the signer in our current set of accounts\n        // If we can't find it, return an error\n        let addrIdx = null;\n        addrs.forEach((addr, i) => {\n          if (address.toLowerCase() === addr.toLowerCase()) addrIdx = i;\n        });\n        if (addrIdx === null) return reject('Signer not present');\n        return resolve(this.accountIndices[addrIdx]);\n      }).catch(err => {\n        return reject(err);\n      });\n    });\n  }\n\n  _getHDPathIndices(insertIdx = 0) {\n    const path = this.hdPath.split('/').slice(1);\n    const indices = [];\n    let usedX = false;\n    path.forEach(_idx => {\n      const isHardened = _idx[_idx.length - 1] === \"'\";\n      let idx = isHardened ? HARDENED_OFFSET : 0; // If there is an `x` in the path string, we will use it to insert our\n      // index. This is useful for e.g. Ledger Live path. Most paths have the\n      // changing index as the last one, so having an `x` in the path isn't\n      // usually necessary.\n\n      if (_idx.indexOf('x') > -1) {\n        idx += insertIdx;\n        usedX = true;\n      } else if (isHardened) {\n        idx += Number(_idx.slice(0, _idx.length - 1));\n      } else {\n        idx += Number(_idx);\n      }\n\n      indices.push(idx);\n    }); // If this path string does not include an `x`, we just append the index\n    // to the end of the extracted set\n\n    if (usedX === false) {\n      indices.push(insertIdx);\n    } // Sanity check -- Lattice firmware will throw an error for large paths\n\n\n    if (indices.length > 5) throw new Error('Only HD paths with up to 5 indices are allowed.');\n    return indices;\n  }\n\n  _resetDefaults() {\n    this.accounts = [];\n    this.accountIndices = [];\n    this.isLocked = true;\n    this.creds = {\n      deviceID: null,\n      password: null,\n      endpoint: null\n    };\n    this.walletUID = null;\n    this.sdkSession = null;\n    this.page = 0;\n    this.unlockedAccount = 0;\n    this.network = null;\n    this.hdPath = STANDARD_HD_PATH;\n  }\n\n  _getCreds() {\n    return new Promise((resolve, reject) => {\n      // We only need to setup if we don't have a deviceID\n      if (this._hasCreds()) return resolve(); // If we are not aware of what Lattice we should be talking to,\n      // we need to open a window that lets the user go through the\n      // pairing or connection process.\n\n      const name = this.appName ? this.appName : 'Unknown';\n      let base = 'https://wallet.gridplus.io';\n\n      switch (this.network) {\n        case 'rinkeby':\n          base = 'https://gridplus-web-wallet-dev.herokuapp.com';\n          break;\n\n        default:\n          break;\n      }\n\n      let url = `${base}?keyring=${name}`;\n      if (this.network) url += `&network=${this.network}`;\n      const popup = window.open(url);\n      popup.postMessage('GET_LATTICE_CREDS', base); // PostMessage handler\n\n      function receiveMessage(event) {\n        // Ensure origin\n        if (event.origin !== base) return; // Parse response data\n\n        try {\n          const data = JSON.parse(event.data);\n          if (!data.deviceID || !data.password) return reject(Error('Invalid credentials returned from Lattice.'));\n          return resolve(data);\n        } catch (err) {\n          return reject(err);\n        }\n      }\n\n      window.addEventListener(\"message\", receiveMessage, false);\n    });\n  } // [re]connect to the Lattice. This should be done frequently to ensure\n  // the expected wallet UID is still the one active in the Lattice.\n  // This will handle SafeCard insertion/removal events.\n  // updateData - true if you want to overwrite walletUID and accounts in\n  //              the event that we find we are not synced.\n  //              If left false and we notice a new walletUID, we will\n  //              return an error.\n\n\n  _connect(updateData) {\n    return new Promise((resolve, reject) => {\n      this.sdkSession.connect(this.creds.deviceID, err => {\n        if (err) return reject(err); // Save the current wallet UID\n\n        const activeWallet = this.sdkSession.getActiveWallet();\n        if (!activeWallet || !activeWallet.uid) return reject(\"No active wallet\");\n        const newUID = activeWallet.uid.toString('hex'); // If we fetched a walletUID that does not match our current one,\n        // reset accounts and update the known UID\n\n        if (newUID != this.walletUID) {\n          // If we don't want to update data, return an error\n          if (updateData === false) return reject('Wallet has changed! Please reconnect.'); // By default we should clear out accounts and update with\n          // the new walletUID. We should NOT fill in the accounts yet,\n          // as we reserve that functionality to `addAccounts`\n\n          this.accounts = [];\n          this.walletUID = newUID;\n        }\n\n        return resolve();\n      });\n    });\n  }\n\n  _initSession() {\n    return new Promise((resolve, reject) => {\n      if (this._hasSession()) return resolve();\n\n      try {\n        let url = 'https://signing.gridpl.us';\n        if (this.network && this.network !== 'mainnet') url = 'https://signing.staging-gridpl.us';\n        if (this.creds.endpoint) url = this.creds.endpoint;\n        const setupData = {\n          name: this.appName,\n          baseUrl: url,\n          crypto,\n          timeout: 120000,\n          privKey: this._genSessionKey(),\n          network: this.network\n        };\n        this.sdkSession = new SDK.Client(setupData);\n        return resolve();\n      } catch (err) {\n        return reject(err);\n      }\n    });\n  }\n\n  _fetchAddresses(n = 1, i = 0, recursedAddrs = []) {\n    return new Promise((resolve, reject) => {\n      if (!this._hasSession()) return reject('No SDK session started. Cannot fetch addresses.');\n\n      this.__fetchAddresses(n, i, (err, addrs) => {\n        if (err) return reject(err);else return resolve(addrs);\n      });\n    });\n  }\n\n  __fetchAddresses(n = 1, i = 0, cb, recursedAddrs = []) {\n    // Determine if we need to do a recursive call here. We prefer not to\n    // because they will be much slower, but Ledger paths require it since\n    // they are non-standard.\n    if (n === 0) return cb(null, recursedAddrs);\n\n    const shouldRecurse = this._hdPathHasInternalVarIdx(); // Make the request to get the requested address\n\n\n    const addrData = {\n      currency: 'ETH',\n      startPath: this._getHDPathIndices(i),\n      n: shouldRecurse ? 1 : n,\n      skipCache: true\n    };\n    this.sdkSession.getAddresses(addrData, (err, addrs) => {\n      if (err) return cb(`Error fetching addresses: ${err}`); // Sanity check -- if this returned 0 addresses, handle the error\n\n      if (addrs.length < 1) return cb('No addresses returned'); // Return the addresses we fetched *without* updating state\n\n      if (shouldRecurse) {\n        return this.__fetchAddresses(n - 1, i + 1, cb, recursedAddrs.concat(addrs));\n      } else {\n        return cb(null, addrs);\n      }\n    });\n  }\n\n  _signTxData(txData) {\n    return new Promise((resolve, reject) => {\n      if (!this._hasSession()) return reject('No SDK session started. Cannot sign transaction.');\n      this.sdkSession.sign({\n        currency: 'ETH',\n        data: txData\n      }, (err, res) => {\n        if (err) return reject(err);\n        if (!res.tx) return reject('No transaction payload returned.');\n        return resolve(res);\n      });\n    });\n  }\n\n  _getPage(increment = 0) {\n    return new Promise((resolve, reject) => {\n      this.page += increment;\n      if (this.page < 0) this.page = 0;\n      const start = PER_PAGE * this.page; // Otherwise unlock the device and fetch more addresses\n\n      this.unlock().then(() => {\n        return this._fetchAddresses(PER_PAGE, start);\n      }).then(addrs => {\n        const accounts = [];\n        addrs.forEach((address, i) => {\n          accounts.push({\n            address,\n            balance: null,\n            index: start + i\n          });\n        });\n        return resolve(accounts);\n      }).catch(err => {\n        return reject(err);\n      });\n    });\n  }\n\n  _hasCreds() {\n    return this.creds.deviceID !== null && this.creds.password !== null && this.appName;\n  }\n\n  _hasSession() {\n    return this.sdkSession && this.walletUID;\n  }\n\n  _genSessionKey() {\n    if (this.name && !this.appName) // Migrate from legacy param if needed\n      this.appName = this.name;\n    if (!this._hasCreds()) throw new Error('No credentials -- cannot create session key!');\n    const buf = Buffer.concat([Buffer.from(this.creds.password), Buffer.from(this.creds.deviceID), Buffer.from(this.appName)]);\n    return crypto.createHash('sha256').update(buf).digest();\n  } // Determine if an HD path has a variable index internal to it.\n  // e.g. m/44'/60'/x'/0/0 -> true, while m/44'/60'/0'/0/x -> false\n  // This is just a hacky helper to avoid having to recursively call for non-ledger\n  // derivation paths. Ledger is SO ANNOYING TO SUPPORT.\n\n\n  _hdPathHasInternalVarIdx() {\n    const path = this.hdPath.split('/').slice(1);\n\n    for (let i = 0; i < path.length - 1; i++) {\n      if (path[i].indexOf('x') > -1) return true;\n    }\n\n    return false;\n  }\n\n}\n\nLatticeKeyring.type = keyringType;\nmodule.exports = LatticeKeyring;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/eth-lattice-keyring/index.js"],"names":["crypto","require","EventEmitter","SDK","Transaction","Common","default","Util","keyringType","HARDENED_OFFSET","PER_PAGE","CLOSE_CODE","STANDARD_HD_PATH","LatticeKeyring","constructor","opts","type","_resetDefaults","deserialize","hdPath","creds","accounts","accountIndices","walletUID","name","appName","network","page","Promise","resolve","setHdPath","serialize","isUnlocked","_hasCreds","_hasSession","unlock","updateData","reject","_getCreds","then","deviceID","password","endpoint","_initSession","_connect","catch","err","Error","addAccounts","n","forgetDevice","_fetchAddresses","unlockedAccount","addrs","forEach","addr","i","indexOf","push","getAccounts","slice","signTransaction","address","tx","_unlockAndFindAccount","addrIdx","txData","chainId","getChainId","nonce","toString","gasPrice","gasLimit","to","value","data","length","signerPath","_getHDPathIndices","_signTxData","signedTx","sig","v","r","s","Buffer","from","useCustomEip155Chain","parseInt","customNetwork","forCustomChain","networkId","validatingTx","common","signer","toChecksumAddress","inputAddress","signPersonalMessage","msg","signMessage","payload","protocol","signTypedData","version","req","currency","sdkSession","sign","res","exportAccount","removeAccount","getFirstPage","_getPage","getNextPage","getPreviousPage","setAccountToUnlock","index","toLowerCase","insertIdx","path","split","indices","usedX","_idx","isHardened","idx","Number","isLocked","base","url","popup","window","open","postMessage","receiveMessage","event","origin","JSON","parse","addEventListener","connect","activeWallet","getActiveWallet","uid","newUID","setupData","baseUrl","timeout","privKey","_genSessionKey","Client","recursedAddrs","__fetchAddresses","cb","shouldRecurse","_hdPathHasInternalVarIdx","addrData","startPath","skipCache","getAddresses","concat","increment","start","balance","buf","createHash","update","digest","module","exports"],"mappings":"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","sourcesContent":["const crypto = require('crypto');\nconst EventEmitter = require('events').EventEmitter;\nconst SDK = require('gridplus-sdk');\nconst Transaction = require('ethereumjs-tx').Transaction;\nconst Common = require('ethereumjs-common').default\nconst Util = require('ethereumjs-util');\nconst keyringType = 'Lattice Hardware';\nconst HARDENED_OFFSET = 0x80000000;\nconst PER_PAGE = 5;\nconst CLOSE_CODE = -1000;\nconst STANDARD_HD_PATH = `m/44'/60'/0'/0/x`\n\nclass LatticeKeyring extends EventEmitter {\n  constructor (opts={}) {\n    super()\n    this.type = keyringType;\n    this._resetDefaults();\n    this.deserialize(opts);\n  }\n\n  //-------------------------------------------------------------------\n  // Keyring API (per `https://github.com/MetaMask/eth-simple-keyring`)\n  //-------------------------------------------------------------------\n  deserialize (opts = {}) {\n    if (opts.hdPath)\n      this.hdPath = opts.hdPath;\n    if (opts.creds)\n      this.creds = opts.creds;\n    if (opts.accounts)\n      this.accounts = opts.accounts;\n    if (opts.accountIndices)\n      this.accountIndices = opts.accountIndices\n    if (opts.walletUID)\n      this.walletUID = opts.walletUID;\n    if (opts.name)  // Legacy; use is deprecated and appName is more descriptive\n      this.appName = opts.name;\n    if (opts.appName)\n      this.appName = opts.appName;\n    if (opts.network)\n      this.network = opts.network;\n    if (opts.page)\n      this.page = opts.page;\n    return Promise.resolve()\n  }\n\n  setHdPath(hdPath) {\n    this.hdPath = hdPath;\n  }\n\n  serialize() {\n    return Promise.resolve({\n      creds: this.creds,\n      accounts: this.accounts,\n      accountIndices: this.accountIndices,\n      walletUID: this.walletUID,\n      appName: this.appName,\n      name: this.name,  // Legacy; use is deprecated\n      network: this.network,\n      page: this.page,\n      hdPath: this.hdPath,\n    })\n  }\n\n  isUnlocked () {\n    return this._hasCreds() && this._hasSession()\n  }\n\n  // Initialize a session with the Lattice1 device using the GridPlus SDK\n  unlock(updateData=true) {\n    return new Promise((resolve, reject) => {\n      this._getCreds()\n      .then((creds) => {\n        if (creds) {\n          this.creds.deviceID = creds.deviceID;\n          this.creds.password = creds.password;\n          this.creds.endpoint = creds.endpoint || null;\n        }\n        return this._initSession();\n      })\n      .then(() => {\n        return this._connect(updateData);\n      })\n      .then(() => {\n        return resolve('Unlocked');\n      })\n      .catch((err) => {\n        return reject(new Error(err));\n      })\n    })\n  }\n\n  // Add addresses to the local store and return the full result\n  addAccounts(n=1) {\n    return new Promise((resolve, reject) => {\n      if (n === CLOSE_CODE) {\n        // Special case: use a code to forget the device. \n        // (This function is overloaded due to constraints upstream)\n        this.forgetDevice();\n        return resolve([]);\n      } else if (n <= 0) {\n        // Avoid non-positive numbers.\n        return reject('Number of accounts to add must be a positive number.');\n      } else {\n        // Normal behavior: establish the connection and fetch addresses.\n        this.unlock()\n        .then(() => {\n          return this._fetchAddresses(n, this.unlockedAccount)\n        })\n        .then((addrs) => {\n          // Add these indices\n          addrs.forEach((addr, i) => {\n            if (this.accounts.indexOf(addr) === -1) {\n              this.accounts.push(addr)\n              this.accountIndices.push(this.unlockedAccount+i)\n            }\n          })\n          return resolve(this.accounts);\n        })\n        .catch((err) => {\n          return reject(new Error(err));\n        })\n      }\n    })\n  }\n\n  // Return the local store of addresses\n  getAccounts() {\n    return Promise.resolve(this.accounts ? this.accounts.slice() : [].slice());\n  }\n\n  signTransaction (address, tx) {\n    return new Promise((resolve, reject) => {\n      this._unlockAndFindAccount(address)\n      .then((addrIdx) => {\n        // Build the Lattice request data and make request\n        // We expect `tx` to be an `ethereumjs-tx` object, meaning all fields are bufferized\n        // To ensure everything plays nicely with gridplus-sdk, we convert everything to hex strings\n        const txData = {\n          chainId: tx.getChainId() || 1,\n          nonce: `0x${tx.nonce.toString('hex')}` || 0,\n          gasPrice: `0x${tx.gasPrice.toString('hex')}`,\n          gasLimit: `0x${tx.gasLimit.toString('hex')}`,\n          to: `0x${tx.to.toString('hex')}`,\n          value: `0x${tx.value.toString('hex')}`,\n          data: tx.data.length === 0 ? null : `0x${tx.data.toString('hex')}`,\n          signerPath: this._getHDPathIndices(addrIdx),\n        }\n        return this._signTxData(txData)\n      })\n      .then((signedTx) => {\n        // Add the sig params. `signedTx = { sig: { v, r, s }, tx, txHash}`\n        if (!signedTx.sig || !signedTx.sig.v || !signedTx.sig.r || !signedTx.sig.s)\n          return reject(new Error('No signature returned.'));\n        tx.r = Buffer.from(signedTx.sig.r, 'hex');\n        tx.s = Buffer.from(signedTx.sig.s, 'hex');\n        tx.v = signedTx.sig.v;\n        // For non-mainnet EIP155 chains, we have to create a custom network in order to instantiate\n        // the validating ethereumjs-tx Transaction object\n        // For EIP155 chains, v = CHAIN_ID * 2 + 35, meaning it can never be <35\n        // Non-EIP155 chains use v = {27,28}\n        const useCustomEip155Chain = (tx.getChainId() !== 1) && \n                                  (parseInt(`0x${tx.v.toString('hex')}`) > 28);\n        // Not sure how to get `networkId` so I'm just going to use the `chainId` value for both.\n        // see: https://medium.com/@pedrouid/chainid-vs-networkid-how-do-they-differ-on-ethereum-eec2ed41635b\n        const customNetwork = Common.forCustomChain('mainnet', { \n          name: 'notMainnet', \n          networkId: tx.getChainId(),\n          chainId: tx.getChainId(), \n        }, 'byzantium')\n        let validatingTx;\n        if (true == useCustomEip155Chain)\n          validatingTx = new Transaction(tx, { common: customNetwork });\n        else\n          validatingTx = new Transaction(tx)\n        // Use the validating transaction to confirm the `from` sender matches the address we\n        // signed from (i.e. `address`)\n        const signer = Util.toChecksumAddress(`0x${validatingTx.from.toString('hex')}`)\n        const inputAddress = Util.toChecksumAddress(address)\n        if (signer !== inputAddress)\n          return reject(new Error(`Unexpected signer. Got ${signer}. Expected ${inputAddress}`))\n        return resolve(tx)\n      })\n      .catch((err) => {\n        return reject(new Error(err));\n      })\n    })\n  }\n\n  signPersonalMessage(address, msg) {\n    return this.signMessage(address, { payload: msg, protocol: 'signPersonal' });\n  }\n\n  signTypedData(address, msg, opts) {\n    if (opts.version && (opts.version !== 'V4' && opts.version !== 'V3'))\n      throw new Error(`Only signTypedData V3 and V4 messages (EIP712) are supported. Got version ${opts.version}`);\n    return this.signMessage(address, { payload: msg, protocol: 'eip712' })\n  }\n\n  signMessage(address, msg) {\n    return new Promise((resolve, reject) => {\n      this._unlockAndFindAccount(address)\n      .then((addrIdx) => {\n        const { payload, protocol } = msg;\n        if (!payload || !protocol)\n          return reject('`payload` and `protocol` fields must be included in the request');\n        const req = {\n          currency: 'ETH_MSG',\n          data: {\n            protocol,\n            payload,\n            signerPath: this._getHDPathIndices(addrIdx),\n          }\n        }\n        if (!this._hasSession())\n          return reject('No SDK session started. Cannot sign transaction.')\n        this.sdkSession.sign(req, (err, res) => {\n          if (err)\n            return reject(new Error(err));\n          if (!res.sig)\n            return reject(new Error('No signature returned'));\n          // Convert the `v` to a number. It should convert to 0 or 1\n          try {\n            let v = res.sig.v.toString('hex');\n            if (v.length < 2)\n              v = `0${v}`;\n            return resolve(`0x${res.sig.r}${res.sig.s}${v}`);\n          } catch (err) {\n            return reject(new Error('Invalid signature format returned.'))\n          }\n        })\n      })\n    })\n  }\n\n  exportAccount(address) {\n    return Promise.reject(Error('exportAccount not supported by this device'))\n  }\n\n  removeAccount(address) {\n    // We only allow one account at a time, so removing any account\n    // should result in a state reset. The user will need to reconnect\n    // to the Lattice\n    this.forgetDevice();\n  }\n\n  getFirstPage() {\n    this.page = 0;\n    return this._getPage(0);\n  }\n\n  getNextPage () {\n    return this._getPage(1);\n  }\n\n  getPreviousPage () {\n    return this._getPage(-1);\n  }\n\n  setAccountToUnlock (index) {\n    this.unlockedAccount = parseInt(index, 10)\n  }\n\n  forgetDevice () {\n    this._resetDefaults();\n  }\n\n  //-------------------------------------------------------------------\n  // Internal methods and interface to SDK\n  //-------------------------------------------------------------------\n  // Find the account index of the requested address.\n  // Note that this is the BIP39 path index, not the index in the address cache.\n  _unlockAndFindAccount(address) {\n    return new Promise((resolve, reject) => {\n      // NOTE: We are passing `false` here because we do NOT want\n      // state data to be updated as a result of a transaction request.\n      // It is possible the user inserted or removed a SafeCard and\n      // will not be able to sign this transaction. If that is the\n      // case, we just want to return an error message\n      this.unlock(false)\n      .then(() => {\n        return this.getAccounts()\n      })\n      .then((addrs) => {\n        // Find the signer in our current set of accounts\n        // If we can't find it, return an error\n        let addrIdx = null;\n        addrs.forEach((addr, i) => {\n          if (address.toLowerCase() === addr.toLowerCase())\n            addrIdx = i;\n        })\n        if (addrIdx === null)\n          return reject('Signer not present');\n        return resolve(this.accountIndices[addrIdx]);\n      })\n      .catch((err) => {\n        return reject(err);\n      })\n    })\n  }\n\n  _getHDPathIndices(insertIdx=0) {\n    const path = this.hdPath.split('/').slice(1);\n    const indices = [];\n    let usedX = false;\n    path.forEach((_idx) => {\n      const isHardened = (_idx[_idx.length - 1] === \"'\");\n      let idx = isHardened ? HARDENED_OFFSET : 0;\n      // If there is an `x` in the path string, we will use it to insert our\n      // index. This is useful for e.g. Ledger Live path. Most paths have the\n      // changing index as the last one, so having an `x` in the path isn't\n      // usually necessary.\n      if (_idx.indexOf('x') > -1) {\n        idx += insertIdx;\n        usedX = true;\n      } else if (isHardened) {\n        idx += Number(_idx.slice(0, _idx.length - 1));\n      } else {\n        idx += Number(_idx);\n      }\n      indices.push(idx);\n    })\n    // If this path string does not include an `x`, we just append the index\n    // to the end of the extracted set\n    if (usedX === false) {\n      indices.push(insertIdx);\n    }\n    // Sanity check -- Lattice firmware will throw an error for large paths\n    if (indices.length > 5)\n      throw new Error('Only HD paths with up to 5 indices are allowed.')\n    return indices;\n  }\n\n  _resetDefaults() {\n    this.accounts = [];\n    this.accountIndices = [];\n    this.isLocked = true;\n    this.creds = {\n      deviceID: null,\n      password: null,\n      endpoint: null,\n    };\n    this.walletUID = null;\n    this.sdkSession = null;\n    this.page = 0;\n    this.unlockedAccount = 0;\n    this.network = null;\n    this.hdPath = STANDARD_HD_PATH;\n  }\n\n  _getCreds() {\n    return new Promise((resolve, reject) => {\n      // We only need to setup if we don't have a deviceID\n      if (this._hasCreds())\n        return resolve();\n\n      // If we are not aware of what Lattice we should be talking to,\n      // we need to open a window that lets the user go through the\n      // pairing or connection process.\n      const name = this.appName ? this.appName : 'Unknown'\n      let base = 'https://wallet.gridplus.io';\n      switch (this.network) {\n        case 'rinkeby':\n          base = 'https://gridplus-web-wallet-dev.herokuapp.com';\n          break;\n        default:\n          break;\n      }\n      let url = `${base}?keyring=${name}`;\n      if (this.network)\n        url += `&network=${this.network}`\n      const popup = window.open(url);\n      popup.postMessage('GET_LATTICE_CREDS', base);\n\n      // PostMessage handler\n      function receiveMessage(event) {\n        // Ensure origin\n        if (event.origin !== base)\n          return;\n        // Parse response data\n        try {\n          const data = JSON.parse(event.data);\n          if (!data.deviceID || !data.password)\n            return reject(Error('Invalid credentials returned from Lattice.'));\n          return resolve(data);\n        } catch (err) {\n          return reject(err);\n        }\n      }\n      window.addEventListener(\"message\", receiveMessage, false);\n    })\n  }\n\n  // [re]connect to the Lattice. This should be done frequently to ensure\n  // the expected wallet UID is still the one active in the Lattice.\n  // This will handle SafeCard insertion/removal events.\n  // updateData - true if you want to overwrite walletUID and accounts in\n  //              the event that we find we are not synced.\n  //              If left false and we notice a new walletUID, we will\n  //              return an error.\n  _connect(updateData) {\n    return new Promise((resolve, reject) => {\n      this.sdkSession.connect(this.creds.deviceID, (err) => {\n        if (err)\n          return reject(err);\n        // Save the current wallet UID\n        const activeWallet = this.sdkSession.getActiveWallet();\n        if (!activeWallet || !activeWallet.uid)\n          return reject(\"No active wallet\");\n        const newUID = activeWallet.uid.toString('hex');\n        // If we fetched a walletUID that does not match our current one,\n        // reset accounts and update the known UID\n        if (newUID != this.walletUID) {\n          // If we don't want to update data, return an error\n          if (updateData === false)\n            return reject('Wallet has changed! Please reconnect.')\n          \n          // By default we should clear out accounts and update with\n          // the new walletUID. We should NOT fill in the accounts yet,\n          // as we reserve that functionality to `addAccounts`\n          this.accounts = [];\n          this.walletUID = newUID;\n        }\n        return resolve();\n      });\n    })\n  }\n\n  _initSession() {\n    return new Promise((resolve, reject) => {\n      if (this._hasSession())\n        return resolve();\n      try {\n        let url = 'https://signing.gridpl.us';\n        if (this.network && this.network !== 'mainnet')\n          url = 'https://signing.staging-gridpl.us'\n        if (this.creds.endpoint)\n          url = this.creds.endpoint\n        const setupData = {\n          name: this.appName,\n          baseUrl: url,\n          crypto,\n          timeout: 120000,\n          privKey: this._genSessionKey(),\n          network: this.network\n        }\n        this.sdkSession = new SDK.Client(setupData);\n        return resolve();\n      } catch (err) {\n        return reject(err);\n      }\n    })\n  }\n\n  _fetchAddresses(n=1, i=0, recursedAddrs=[]) {\n    return new Promise((resolve, reject) => {\n      if (!this._hasSession())\n        return reject('No SDK session started. Cannot fetch addresses.')\n\n      this.__fetchAddresses(n, i, (err, addrs) => {\n        if (err)\n          return reject(err);\n        else\n          return resolve(addrs);\n      })\n    })\n  }\n\n  __fetchAddresses(n=1, i=0, cb, recursedAddrs=[]) {\n     // Determine if we need to do a recursive call here. We prefer not to\n      // because they will be much slower, but Ledger paths require it since\n      // they are non-standard.\n      if (n === 0)\n        return cb(null, recursedAddrs);\n      const shouldRecurse = this._hdPathHasInternalVarIdx();\n\n      // Make the request to get the requested address\n      const addrData = { \n        currency: 'ETH', \n        startPath: this._getHDPathIndices(i), \n        n: shouldRecurse ? 1 : n,\n        skipCache: true,\n      };\n      this.sdkSession.getAddresses(addrData, (err, addrs) => {\n        if (err)\n          return cb(`Error fetching addresses: ${err}`);\n        // Sanity check -- if this returned 0 addresses, handle the error\n        if (addrs.length < 1)\n          return cb('No addresses returned');\n        // Return the addresses we fetched *without* updating state\n        if (shouldRecurse) {\n          return this.__fetchAddresses(n-1, i+1, cb, recursedAddrs.concat(addrs));\n        } else {\n          return cb(null, addrs);\n        }\n      })\n  }\n\n  _signTxData(txData) {\n    return new Promise((resolve, reject) => {\n      if (!this._hasSession())\n        return reject('No SDK session started. Cannot sign transaction.')\n      this.sdkSession.sign({ currency: 'ETH', data: txData }, (err, res) => {\n        if (err)\n          return reject(err);\n        if (!res.tx)\n          return reject('No transaction payload returned.');\n        return resolve(res)\n      })\n    })\n  }\n\n  _getPage(increment=0) {\n    return new Promise((resolve, reject) => {\n      this.page += increment;\n      if (this.page < 0)\n        this.page = 0;\n      const start = PER_PAGE * this.page;\n      // Otherwise unlock the device and fetch more addresses\n      this.unlock()\n      .then(() => {\n        return this._fetchAddresses(PER_PAGE, start)\n      })\n      .then((addrs) => {\n        const accounts = []\n        addrs.forEach((address, i) => {\n          accounts.push({\n            address,\n            balance: null,\n            index: start + i,\n          })\n        })\n        return resolve(accounts)\n      })\n      .catch((err) => {\n        return reject(err);\n      })\n    })\n  }\n\n  _hasCreds() {\n    return this.creds.deviceID !== null && this.creds.password !== null && this.appName;\n  }\n\n  _hasSession() {\n    return this.sdkSession && this.walletUID;\n  }\n\n  _genSessionKey() {\n    if (this.name && !this.appName) // Migrate from legacy param if needed\n      this.appName = this.name;\n    if (!this._hasCreds())\n      throw new Error('No credentials -- cannot create session key!');\n    const buf = Buffer.concat([\n      Buffer.from(this.creds.password), \n      Buffer.from(this.creds.deviceID), \n      Buffer.from(this.appName)\n    ])\n    return crypto.createHash('sha256').update(buf).digest();\n  }\n\n  // Determine if an HD path has a variable index internal to it.\n  // e.g. m/44'/60'/x'/0/0 -> true, while m/44'/60'/0'/0/x -> false\n  // This is just a hacky helper to avoid having to recursively call for non-ledger\n  // derivation paths. Ledger is SO ANNOYING TO SUPPORT.\n  _hdPathHasInternalVarIdx() {\n    const path = this.hdPath.split('/').slice(1);\n    for (let i = 0; i < path.length -1; i++) {\n      if (path[i].indexOf('x') > -1)\n        return true;\n    }\n    return false;\n  }\n\n}\n\nLatticeKeyring.type = keyringType\nmodule.exports = LatticeKeyring;"]},"metadata":{},"sourceType":"script"}