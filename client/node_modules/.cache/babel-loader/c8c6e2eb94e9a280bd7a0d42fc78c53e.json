{"ast":null,"code":"const Logger = require('./Logger');\n\nconst EnhancedEventEmitter = require('./EnhancedEventEmitter');\n\nconst Message = require('./Message');\n\nconst logger = new Logger('Peer');\n\nclass Peer extends EnhancedEventEmitter {\n  /**\n   * @param {protoo.Transport} transport\n   *\n   * @emits open\n   * @emits {currentAttempt: Number} failed\n   * @emits disconnected\n   * @emits close\n   * @emits {request: protoo.Request, accept: Function, reject: Function} request\n   * @emits {notification: protoo.Notification} notification\n   */\n  constructor(transport) {\n    super(logger);\n    logger.debug('constructor()'); // Closed flag.\n    // @type {Boolean}\n\n    this._closed = false; // Transport.\n    // @type {protoo.Transport}\n\n    this._transport = transport; // Connected flag.\n    // @type {Boolean}\n\n    this._connected = false; // Custom data object.\n    // @type {Object}\n\n    this._data = {}; // Map of pending sent request objects indexed by request id.\n    // @type {Map<Number, Object>}\n\n    this._sents = new Map(); // Handle transport.\n\n    this._handleTransport();\n  }\n  /**\n   * Whether the Peer is closed.\n   *\n   * @returns {Boolean}\n   */\n\n\n  get closed() {\n    return this._closed;\n  }\n  /**\n   * Whether the Peer is connected.\n   *\n   * @returns {Boolean}\n   */\n\n\n  get connected() {\n    return this._connected;\n  }\n  /**\n   * App custom data.\n   *\n   * @returns {Object}\n   */\n\n\n  get data() {\n    return this._data;\n  }\n  /**\n   * Invalid setter.\n   */\n\n\n  set data(data) // eslint-disable-line no-unused-vars\n  {\n    throw new Error('cannot override data object');\n  }\n  /**\n   * Close this Peer and its Transport.\n   */\n\n\n  close() {\n    if (this._closed) return;\n    logger.debug('close()');\n    this._closed = true;\n    this._connected = false; // Close Transport.\n\n    this._transport.close(); // Close every pending sent.\n\n\n    for (const sent of this._sents.values()) {\n      sent.close();\n    } // Emit 'close' event.\n\n\n    this.safeEmit('close');\n  }\n  /**\n   * Send a protoo request to the server-side Room.\n   *\n   * @param {String} method\n   * @param {Object} [data]\n   *\n   * @async\n   * @returns {Object} The response data Object if a success response is received.\n   */\n\n\n  async request(method, data = undefined) {\n    const request = Message.createRequest(method, data);\n\n    this._logger.debug('request() [method:%s, id:%s]', method, request.id); // This may throw.\n\n\n    await this._transport.send(request);\n    return new Promise((pResolve, pReject) => {\n      const timeout = 1500 * (15 + 0.1 * this._sents.size);\n      const sent = {\n        id: request.id,\n        method: request.method,\n        resolve: data2 => {\n          if (!this._sents.delete(request.id)) return;\n          clearTimeout(sent.timer);\n          pResolve(data2);\n        },\n        reject: error => {\n          if (!this._sents.delete(request.id)) return;\n          clearTimeout(sent.timer);\n          pReject(error);\n        },\n        timer: setTimeout(() => {\n          if (!this._sents.delete(request.id)) return;\n          pReject(new Error('request timeout'));\n        }, timeout),\n        close: () => {\n          clearTimeout(sent.timer);\n          pReject(new Error('peer closed'));\n        }\n      }; // Add sent stuff to the map.\n\n      this._sents.set(request.id, sent);\n    });\n  }\n  /**\n   * Send a protoo notification to the server-side Room.\n   *\n   * @param {String} method\n   * @param {Object} [data]\n   *\n   * @async\n   */\n\n\n  async notify(method, data = undefined) {\n    const notification = Message.createNotification(method, data);\n\n    this._logger.debug('notify() [method:%s]', method); // This may throw.\n\n\n    await this._transport.send(notification);\n  }\n\n  _handleTransport() {\n    if (this._transport.closed) {\n      this._closed = true;\n      setTimeout(() => {\n        if (this._closed) return;\n        this._connected = false;\n        this.safeEmit('close');\n      });\n      return;\n    }\n\n    this._transport.on('open', () => {\n      if (this._closed) return;\n      logger.debug('emit \"open\"');\n      this._connected = true;\n      this.safeEmit('open');\n    });\n\n    this._transport.on('disconnected', () => {\n      if (this._closed) return;\n      logger.debug('emit \"disconnected\"');\n      this._connected = false;\n      this.safeEmit('disconnected');\n    });\n\n    this._transport.on('failed', currentAttempt => {\n      if (this._closed) return;\n      logger.debug('emit \"failed\" [currentAttempt:%s]', currentAttempt);\n      this._connected = false;\n      this.safeEmit('failed', currentAttempt);\n    });\n\n    this._transport.on('close', () => {\n      if (this._closed) return;\n      this._closed = true;\n      logger.debug('emit \"close\"');\n      this._connected = false;\n      this.safeEmit('close');\n    });\n\n    this._transport.on('message', message => {\n      if (message.request) this._handleRequest(message);else if (message.response) this._handleResponse(message);else if (message.notification) this._handleNotification(message);\n    });\n  }\n\n  _handleRequest(request) {\n    try {\n      this.emit('request', // Request.\n      request, // accept() function.\n      data => {\n        const response = Message.createSuccessResponse(request, data);\n\n        this._transport.send(response).catch(() => {});\n      }, // reject() function.\n      (errorCode, errorReason) => {\n        if (errorCode instanceof Error) {\n          errorReason = errorCode.message;\n          errorCode = 500;\n        } else if (typeof errorCode === 'number' && errorReason instanceof Error) {\n          errorReason = errorReason.message;\n        }\n\n        const response = Message.createErrorResponse(request, errorCode, errorReason);\n\n        this._transport.send(response).catch(() => {});\n      });\n    } catch (error) {\n      const response = Message.createErrorResponse(request, 500, String(error));\n\n      this._transport.send(response).catch(() => {});\n    }\n  }\n\n  _handleResponse(response) {\n    const sent = this._sents.get(response.id);\n\n    if (!sent) {\n      logger.error('received response does not match any sent request [id:%s]', response.id);\n      return;\n    }\n\n    if (response.ok) {\n      sent.resolve(response.data);\n    } else {\n      const error = new Error(response.errorReason);\n      error.code = response.errorCode;\n      sent.reject(error);\n    }\n  }\n\n  _handleNotification(notification) {\n    this.safeEmit('notification', notification);\n  }\n\n}\n\nmodule.exports = Peer;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/protoo-client/lib/Peer.js"],"names":["Logger","require","EnhancedEventEmitter","Message","logger","Peer","constructor","transport","debug","_closed","_transport","_connected","_data","_sents","Map","_handleTransport","closed","connected","data","Error","close","sent","values","safeEmit","request","method","undefined","createRequest","_logger","id","send","Promise","pResolve","pReject","timeout","size","resolve","data2","delete","clearTimeout","timer","reject","error","setTimeout","set","notify","notification","createNotification","on","currentAttempt","message","_handleRequest","response","_handleResponse","_handleNotification","emit","createSuccessResponse","catch","errorCode","errorReason","createErrorResponse","String","get","ok","code","module","exports"],"mappings":"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","sourcesContent":["const Logger = require('./Logger');\nconst EnhancedEventEmitter = require('./EnhancedEventEmitter');\nconst Message = require('./Message');\n\nconst logger = new Logger('Peer');\n\nclass Peer extends EnhancedEventEmitter\n{\n\t/**\n\t * @param {protoo.Transport} transport\n\t *\n\t * @emits open\n\t * @emits {currentAttempt: Number} failed\n\t * @emits disconnected\n\t * @emits close\n\t * @emits {request: protoo.Request, accept: Function, reject: Function} request\n\t * @emits {notification: protoo.Notification} notification\n\t */\n\tconstructor(transport)\n\t{\n\t\tsuper(logger);\n\n\t\tlogger.debug('constructor()');\n\n\t\t// Closed flag.\n\t\t// @type {Boolean}\n\t\tthis._closed = false;\n\n\t\t// Transport.\n\t\t// @type {protoo.Transport}\n\t\tthis._transport = transport;\n\n\t\t// Connected flag.\n\t\t// @type {Boolean}\n\t\tthis._connected = false;\n\n\t\t// Custom data object.\n\t\t// @type {Object}\n\t\tthis._data = {};\n\n\t\t// Map of pending sent request objects indexed by request id.\n\t\t// @type {Map<Number, Object>}\n\t\tthis._sents = new Map();\n\n\t\t// Handle transport.\n\t\tthis._handleTransport();\n\t}\n\n\t/**\n\t * Whether the Peer is closed.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget closed()\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * Whether the Peer is connected.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget connected()\n\t{\n\t\treturn this._connected;\n\t}\n\n\t/**\n\t * App custom data.\n\t *\n\t * @returns {Object}\n\t */\n\tget data()\n\t{\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset data(data) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new Error('cannot override data object');\n\t}\n\n\t/**\n\t * Close this Peer and its Transport.\n\t */\n\tclose()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\t\tthis._connected = false;\n\n\t\t// Close Transport.\n\t\tthis._transport.close();\n\n\t\t// Close every pending sent.\n\t\tfor (const sent of this._sents.values())\n\t\t{\n\t\t\tsent.close();\n\t\t}\n\n\t\t// Emit 'close' event.\n\t\tthis.safeEmit('close');\n\t}\n\n\t/**\n\t * Send a protoo request to the server-side Room.\n\t *\n\t * @param {String} method\n\t * @param {Object} [data]\n\t *\n\t * @async\n\t * @returns {Object} The response data Object if a success response is received.\n\t */\n\tasync request(method, data = undefined)\n\t{\n\t\tconst request = Message.createRequest(method, data);\n\n\t\tthis._logger.debug('request() [method:%s, id:%s]', method, request.id);\n\n\t\t// This may throw.\n\t\tawait this._transport.send(request);\n\n\t\treturn new Promise((pResolve, pReject) =>\n\t\t{\n\t\t\tconst timeout = 1500 * (15 + (0.1 * this._sents.size));\n\t\t\tconst sent =\n\t\t\t{\n\t\t\t\tid      : request.id,\n\t\t\t\tmethod  : request.method,\n\t\t\t\tresolve : (data2) =>\n\t\t\t\t{\n\t\t\t\t\tif (!this._sents.delete(request.id))\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tclearTimeout(sent.timer);\n\t\t\t\t\tpResolve(data2);\n\t\t\t\t},\n\t\t\t\treject : (error) =>\n\t\t\t\t{\n\t\t\t\t\tif (!this._sents.delete(request.id))\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tclearTimeout(sent.timer);\n\t\t\t\t\tpReject(error);\n\t\t\t\t},\n\t\t\t\ttimer : setTimeout(() =>\n\t\t\t\t{\n\t\t\t\t\tif (!this._sents.delete(request.id))\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tpReject(new Error('request timeout'));\n\t\t\t\t}, timeout),\n\t\t\t\tclose : () =>\n\t\t\t\t{\n\t\t\t\t\tclearTimeout(sent.timer);\n\t\t\t\t\tpReject(new Error('peer closed'));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Add sent stuff to the map.\n\t\t\tthis._sents.set(request.id, sent);\n\t\t});\n\t}\n\n\t/**\n\t * Send a protoo notification to the server-side Room.\n\t *\n\t * @param {String} method\n\t * @param {Object} [data]\n\t *\n\t * @async\n\t */\n\tasync notify(method, data = undefined)\n\t{\n\t\tconst notification = Message.createNotification(method, data);\n\n\t\tthis._logger.debug('notify() [method:%s]', method);\n\n\t\t// This may throw.\n\t\tawait this._transport.send(notification);\n\t}\n\n\t_handleTransport()\n\t{\n\t\tif (this._transport.closed)\n\t\t{\n\t\t\tthis._closed = true;\n\n\t\t\tsetTimeout(() =>\n\t\t\t{\n\t\t\t\tif (this._closed)\n\t\t\t\t\treturn;\n\n\t\t\t\tthis._connected = false;\n\n\t\t\t\tthis.safeEmit('close');\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._transport.on('open', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.debug('emit \"open\"');\n\n\t\t\tthis._connected = true;\n\n\t\t\tthis.safeEmit('open');\n\t\t});\n\n\t\tthis._transport.on('disconnected', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.debug('emit \"disconnected\"');\n\n\t\t\tthis._connected = false;\n\n\t\t\tthis.safeEmit('disconnected');\n\t\t});\n\n\t\tthis._transport.on('failed', (currentAttempt) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.debug('emit \"failed\" [currentAttempt:%s]', currentAttempt);\n\n\t\t\tthis._connected = false;\n\n\t\t\tthis.safeEmit('failed', currentAttempt);\n\t\t});\n\n\t\tthis._transport.on('close', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tthis._closed = true;\n\n\t\t\tlogger.debug('emit \"close\"');\n\n\t\t\tthis._connected = false;\n\n\t\t\tthis.safeEmit('close');\n\t\t});\n\n\t\tthis._transport.on('message', (message) =>\n\t\t{\n\t\t\tif (message.request)\n\t\t\t\tthis._handleRequest(message);\n\t\t\telse if (message.response)\n\t\t\t\tthis._handleResponse(message);\n\t\t\telse if (message.notification)\n\t\t\t\tthis._handleNotification(message);\n\t\t});\n\t}\n\n\t_handleRequest(request)\n\t{\n\t\ttry\n\t\t{\n\t\t\tthis.emit('request',\n\t\t\t\t// Request.\n\t\t\t\trequest,\n\t\t\t\t// accept() function.\n\t\t\t\t(data) =>\n\t\t\t\t{\n\t\t\t\t\tconst response = Message.createSuccessResponse(request, data);\n\n\t\t\t\t\tthis._transport.send(response)\n\t\t\t\t\t\t.catch(() => {});\n\t\t\t\t},\n\t\t\t\t// reject() function.\n\t\t\t\t(errorCode, errorReason) =>\n\t\t\t\t{\n\t\t\t\t\tif (errorCode instanceof Error)\n\t\t\t\t\t{\n\t\t\t\t\t\terrorReason = errorCode.message;\n\t\t\t\t\t\terrorCode = 500;\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof errorCode === 'number' && errorReason instanceof Error)\n\t\t\t\t\t{\n\t\t\t\t\t\terrorReason = errorReason.message;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst response =\n\t\t\t\t\t\tMessage.createErrorResponse(request, errorCode, errorReason);\n\n\t\t\t\t\tthis._transport.send(response)\n\t\t\t\t\t\t.catch(() => {});\n\t\t\t\t});\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconst response = Message.createErrorResponse(request, 500, String(error));\n\n\t\t\tthis._transport.send(response)\n\t\t\t\t.catch(() => {});\n\t\t}\n\t}\n\n\t_handleResponse(response)\n\t{\n\t\tconst sent = this._sents.get(response.id);\n\n\t\tif (!sent)\n\t\t{\n\t\t\tlogger.error(\n\t\t\t\t'received response does not match any sent request [id:%s]', response.id);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (response.ok)\n\t\t{\n\t\t\tsent.resolve(response.data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst error = new Error(response.errorReason);\n\n\t\t\terror.code = response.errorCode;\n\t\t\tsent.reject(error);\n\t\t}\n\t}\n\n\t_handleNotification(notification)\n\t{\n\t\tthis.safeEmit('notification', notification);\n\t}\n}\n\nmodule.exports = Peer;\n"]},"metadata":{},"sourceType":"script"}