{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Chrome70 = void 0;\n\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\n\nconst Logger_1 = require(\"../Logger\");\n\nconst utils = __importStar(require(\"../utils\"));\n\nconst ortc = __importStar(require(\"../ortc\"));\n\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\n\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\n\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\n\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\n\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\n\nconst logger = new Logger_1.Logger('Chrome70');\nconst SCTP_NUM_STREAMS = {\n  OS: 1024,\n  MIS: 1024\n};\n\nclass Chrome70 extends HandlerInterface_1.HandlerInterface {\n  constructor() {\n    super(); // Map of RTCTransceivers indexed by MID.\n\n    this._mapMidTransceiver = new Map(); // Local stream for sending.\n\n    this._sendStream = new MediaStream(); // Whether a DataChannel m=application section has been created.\n\n    this._hasDataChannelMediaSection = false; // Sending DataChannel id value counter. Incremented for each new DataChannel.\n\n    this._nextSendSctpStreamId = 0; // Got transport local and remote parameters.\n\n    this._transportReady = false;\n  }\n  /**\n   * Creates a factory function.\n   */\n\n\n  static createFactory() {\n    return () => new Chrome70();\n  }\n\n  get name() {\n    return 'Chrome70';\n  }\n\n  close() {\n    logger.debug('close()'); // Close RTCPeerConnection.\n\n    if (this._pc) {\n      try {\n        this._pc.close();\n      } catch (error) {}\n    }\n  }\n\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    const pc = new RTCPeerConnection({\n      iceServers: [],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n\n    try {\n      pc.addTransceiver('audio');\n      pc.addTransceiver('video');\n      const offer = await pc.createOffer();\n\n      try {\n        pc.close();\n      } catch (error) {}\n\n      const sdpObject = sdpTransform.parse(offer.sdp);\n      const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n        sdpObject\n      });\n      return nativeRtpCapabilities;\n    } catch (error) {\n      try {\n        pc.close();\n      } catch (error2) {}\n\n      throw error;\n    }\n  }\n\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: SCTP_NUM_STREAMS\n    };\n  }\n\n  run({\n    direction,\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    iceServers,\n    iceTransportPolicy,\n    additionalSettings,\n    proprietaryConstraints,\n    extendedRtpCapabilities\n  }) {\n    logger.debug('run()');\n    this._direction = direction;\n    this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters\n    });\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._sendingRemoteRtpParametersByKind = {\n      audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._pc = new RTCPeerConnection(Object.assign({\n      iceServers: iceServers || [],\n      iceTransportPolicy: iceTransportPolicy || 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    }, additionalSettings), proprietaryConstraints); // Handle RTCPeerConnection connection status.\n\n    this._pc.addEventListener('iceconnectionstatechange', () => {\n      switch (this._pc.iceConnectionState) {\n        case 'checking':\n          this.emit('@connectionstatechange', 'connecting');\n          break;\n\n        case 'connected':\n        case 'completed':\n          this.emit('@connectionstatechange', 'connected');\n          break;\n\n        case 'failed':\n          this.emit('@connectionstatechange', 'failed');\n          break;\n\n        case 'disconnected':\n          this.emit('@connectionstatechange', 'disconnected');\n          break;\n\n        case 'closed':\n          this.emit('@connectionstatechange', 'closed');\n          break;\n      }\n    });\n  }\n\n  async updateIceServers(iceServers) {\n    logger.debug('updateIceServers()');\n\n    const configuration = this._pc.getConfiguration();\n\n    configuration.iceServers = iceServers;\n\n    this._pc.setConfiguration(configuration);\n  }\n\n  async restartIce(iceParameters) {\n    logger.debug('restartIce()'); // Provide the remote SDP handler with new remote ICE parameters.\n\n    this._remoteSdp.updateIceParameters(iceParameters);\n\n    if (!this._transportReady) return;\n\n    if (this._direction === 'send') {\n      const offer = await this._pc.createOffer({\n        iceRestart: true\n      });\n      logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n    } else {\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n    }\n  }\n\n  async getTransportStats() {\n    return this._pc.getStats();\n  }\n\n  async send({\n    track,\n    encodings,\n    codecOptions,\n    codec\n  }) {\n    this._assertSendDirection();\n\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {}); // This may throw.\n\n    sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n    const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {}); // This may throw.\n\n    sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n\n    const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n\n    const transceiver = this._pc.addTransceiver(track, {\n      direction: 'sendonly',\n      streams: [this._sendStream]\n    });\n\n    let offer = await this._pc.createOffer();\n    let localSdpObject = sdpTransform.parse(offer.sdp);\n    let offerMediaObject;\n    if (!this._transportReady) await this._setupTransport({\n      localDtlsRole: 'server',\n      localSdpObject\n    });\n\n    if (encodings && encodings.length > 1) {\n      logger.debug('send() | enabling legacy simulcast');\n      localSdpObject = sdpTransform.parse(offer.sdp);\n      offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n      sdpUnifiedPlanUtils.addLegacySimulcast({\n        offerMediaObject,\n        numStreams: encodings.length\n      });\n      offer = {\n        type: 'offer',\n        sdp: sdpTransform.write(localSdpObject)\n      };\n    } // Special case for VP9 with SVC.\n\n\n    let hackVp9Svc = false;\n    const layers = scalabilityModes_1.parse((encodings || [{}])[0].scalabilityMode);\n\n    if (encodings && encodings.length === 1 && layers.spatialLayers > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\n      logger.debug('send() | enabling legacy simulcast for VP9 SVC');\n      hackVp9Svc = true;\n      localSdpObject = sdpTransform.parse(offer.sdp);\n      offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n      sdpUnifiedPlanUtils.addLegacySimulcast({\n        offerMediaObject,\n        numStreams: layers.spatialLayers\n      });\n      offer = {\n        type: 'offer',\n        sdp: sdpTransform.write(localSdpObject)\n      };\n    }\n\n    logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer); // If encodings are given, apply them now.\n\n    if (encodings) {\n      logger.debug('send() | applying given encodings');\n      const parameters = transceiver.sender.getParameters();\n\n      for (let idx = 0; idx < (parameters.encodings || []).length; ++idx) {\n        const encoding = parameters.encodings[idx];\n        const desiredEncoding = encodings[idx]; // Should not happen but just in case.\n\n        if (!desiredEncoding) break;\n        parameters.encodings[idx] = Object.assign(encoding, desiredEncoding);\n      }\n\n      await transceiver.sender.setParameters(parameters);\n    } // We can now get the transceiver.mid.\n\n\n    const localId = transceiver.mid; // Set MID.\n\n    sendingRtpParameters.mid = localId;\n    localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    offerMediaObject = localSdpObject.media[mediaSectionIdx.idx]; // Set RTCP CNAME.\n\n    sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n      offerMediaObject\n    }); // Set RTP encodings.\n\n    sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n      offerMediaObject\n    }); // Complete encodings with given values.\n\n    if (encodings) {\n      for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n        if (encodings[idx]) Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n      }\n    } // Hack for VP9 SVC.\n\n\n    if (hackVp9Svc) {\n      sendingRtpParameters.encodings = [sendingRtpParameters.encodings[0]];\n    } // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n    // each encoding.\n\n\n    if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n      for (const encoding of sendingRtpParameters.encodings) {\n        encoding.scalabilityMode = 'S1T3';\n      }\n    }\n\n    this._remoteSdp.send({\n      offerMediaObject,\n      reuseMid: mediaSectionIdx.reuseMid,\n      offerRtpParameters: sendingRtpParameters,\n      answerRtpParameters: sendingRemoteRtpParameters,\n      codecOptions\n    });\n\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer); // Store in the map.\n\n    this._mapMidTransceiver.set(localId, transceiver);\n\n    return {\n      localId,\n      rtpParameters: sendingRtpParameters,\n      rtpSender: transceiver.sender\n    };\n  }\n\n  async stopSending(localId) {\n    this._assertSendDirection();\n\n    logger.debug('stopSending() [localId:%s]', localId);\n\n    const transceiver = this._mapMidTransceiver.get(localId);\n\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    transceiver.sender.replaceTrack(null);\n\n    this._pc.removeTrack(transceiver.sender);\n\n    this._remoteSdp.closeMediaSection(transceiver.mid);\n\n    const offer = await this._pc.createOffer();\n    logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n\n  async replaceTrack(localId, track) {\n    this._assertSendDirection();\n\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n\n    const transceiver = this._mapMidTransceiver.get(localId);\n\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    await transceiver.sender.replaceTrack(track);\n  }\n\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    this._assertSendDirection();\n\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n\n    const transceiver = this._mapMidTransceiver.get(localId);\n\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) encoding.active = true;else encoding.active = false;\n    });\n    await transceiver.sender.setParameters(parameters);\n  }\n\n  async setRtpEncodingParameters(localId, params) {\n    this._assertSendDirection();\n\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n\n    const transceiver = this._mapMidTransceiver.get(localId);\n\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = Object.assign(Object.assign({}, encoding), params);\n    });\n    await transceiver.sender.setParameters(parameters);\n  }\n\n  async getSenderStats(localId) {\n    this._assertSendDirection();\n\n    const transceiver = this._mapMidTransceiver.get(localId);\n\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    return transceiver.sender.getStats();\n  }\n\n  async sendDataChannel({\n    ordered,\n    maxPacketLifeTime,\n    maxRetransmits,\n    label,\n    protocol\n  }) {\n    this._assertSendDirection();\n\n    const options = {\n      negotiated: true,\n      id: this._nextSendSctpStreamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmitTime: maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('sendDataChannel() [options:%o]', options);\n\n    const dataChannel = this._pc.createDataChannel(label, options); // Increase next id.\n\n\n    this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS; // If this is the first DataChannel we need to create the SDP answer with\n    // m=application section.\n\n    if (!this._hasDataChannelMediaSection) {\n      const offer = await this._pc.createOffer();\n      const localSdpObject = sdpTransform.parse(offer.sdp);\n      const offerMediaObject = localSdpObject.media.find(m => m.type === 'application');\n      if (!this._transportReady) await this._setupTransport({\n        localDtlsRole: 'server',\n        localSdpObject\n      });\n      logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n\n      this._remoteSdp.sendSctpAssociation({\n        offerMediaObject\n      });\n\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n\n    const sctpStreamParameters = {\n      streamId: options.id,\n      ordered: options.ordered,\n      maxPacketLifeTime: options.maxPacketLifeTime,\n      maxRetransmits: options.maxRetransmits\n    };\n    return {\n      dataChannel,\n      sctpStreamParameters\n    };\n  }\n\n  async receive({\n    trackId,\n    kind,\n    rtpParameters\n  }) {\n    this._assertRecvDirection();\n\n    logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n    const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n\n    this._remoteSdp.receive({\n      mid: localId,\n      kind,\n      offerRtpParameters: rtpParameters,\n      streamId: rtpParameters.rtcp.cname,\n      trackId\n    });\n\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    let answer = await this._pc.createAnswer();\n    const localSdpObject = sdpTransform.parse(answer.sdp);\n    const answerMediaObject = localSdpObject.media.find(m => String(m.mid) === localId); // May need to modify codec parameters in the answer based on codec\n    // parameters in the offer.\n\n    sdpCommonUtils.applyCodecParameters({\n      offerRtpParameters: rtpParameters,\n      answerMediaObject\n    });\n    answer = {\n      type: 'answer',\n      sdp: sdpTransform.write(localSdpObject)\n    };\n    if (!this._transportReady) await this._setupTransport({\n      localDtlsRole: 'client',\n      localSdpObject\n    });\n    logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n\n    const transceiver = this._pc.getTransceivers().find(t => t.mid === localId);\n\n    if (!transceiver) throw new Error('new RTCRtpTransceiver not found'); // Store in the map.\n\n    this._mapMidTransceiver.set(localId, transceiver);\n\n    return {\n      localId,\n      track: transceiver.receiver.track,\n      rtpReceiver: transceiver.receiver\n    };\n  }\n\n  async stopReceiving(localId) {\n    this._assertRecvDirection();\n\n    logger.debug('stopReceiving() [localId:%s]', localId);\n\n    const transceiver = this._mapMidTransceiver.get(localId);\n\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n\n    this._remoteSdp.closeMediaSection(transceiver.mid);\n\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n\n  async getReceiverStats(localId) {\n    this._assertRecvDirection();\n\n    const transceiver = this._mapMidTransceiver.get(localId);\n\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    return transceiver.receiver.getStats();\n  }\n\n  async receiveDataChannel({\n    sctpStreamParameters,\n    label,\n    protocol\n  }) {\n    this._assertRecvDirection();\n\n    const {\n      streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits\n    } = sctpStreamParameters;\n    const options = {\n      negotiated: true,\n      id: streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmitTime: maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('receiveDataChannel() [options:%o]', options);\n\n    const dataChannel = this._pc.createDataChannel(label, options); // If this is the first DataChannel we need to create the SDP offer with\n    // m=application section.\n\n\n    if (!this._hasDataChannelMediaSection) {\n      this._remoteSdp.receiveSctpAssociation();\n\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n\n      if (!this._transportReady) {\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        await this._setupTransport({\n          localDtlsRole: 'client',\n          localSdpObject\n        });\n      }\n\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n\n    return {\n      dataChannel\n    };\n  }\n\n  async _setupTransport({\n    localDtlsRole,\n    localSdpObject\n  }) {\n    if (!localSdpObject) localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp); // Get our local DTLS parameters.\n\n    const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n      sdpObject: localSdpObject\n    }); // Set our DTLS role.\n\n    dtlsParameters.role = localDtlsRole; // Update the remote DTLS role in the SDP.\n\n    this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client'); // Need to tell the remote transport about our parameters.\n\n\n    await this.safeEmitAsPromise('@connect', {\n      dtlsParameters\n    });\n    this._transportReady = true;\n  }\n\n  _assertSendDirection() {\n    if (this._direction !== 'send') {\n      throw new Error('method can just be called for handlers with \"send\" direction');\n    }\n  }\n\n  _assertRecvDirection() {\n    if (this._direction !== 'recv') {\n      throw new Error('method can just be called for handlers with \"recv\" direction');\n    }\n  }\n\n}\n\nexports.Chrome70 = Chrome70;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/mediasoup-client/lib/handlers/Chrome70.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","hasOwnProperty","call","exports","Chrome70","sdpTransform","require","Logger_1","utils","ortc","sdpCommonUtils","sdpUnifiedPlanUtils","HandlerInterface_1","RemoteSdp_1","scalabilityModes_1","logger","Logger","SCTP_NUM_STREAMS","OS","MIS","HandlerInterface","constructor","_mapMidTransceiver","Map","_sendStream","MediaStream","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","createFactory","name","close","debug","_pc","error","getNativeRtpCapabilities","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","addTransceiver","offer","createOffer","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","error2","getNativeSctpCapabilities","numStreams","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","_direction","_remoteSdp","RemoteSdp","_sendingRtpParametersByKind","audio","getSendingRtpParameters","video","_sendingRemoteRtpParametersByKind","getSendingRemoteRtpParameters","assign","addEventListener","iceConnectionState","emit","updateIceServers","configuration","getConfiguration","setConfiguration","restartIce","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getTransportStats","getStats","send","track","encodings","codecOptions","codec","_assertSendDirection","kind","id","sendingRtpParameters","clone","codecs","reduceCodecs","sendingRemoteRtpParameters","mediaSectionIdx","getNextMediaSectionIdx","transceiver","streams","localSdpObject","offerMediaObject","_setupTransport","localDtlsRole","length","media","idx","addLegacySimulcast","write","hackVp9Svc","layers","scalabilityMode","spatialLayers","mimeType","toLowerCase","parameters","sender","getParameters","encoding","desiredEncoding","setParameters","localId","mid","localDescription","rtcp","cname","getCname","getRtpEncodings","reuseMid","offerRtpParameters","answerRtpParameters","set","rtpParameters","rtpSender","stopSending","Error","replaceTrack","removeTrack","closeMediaSection","setMaxSpatialLayer","spatialLayer","forEach","active","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","maxRetransmitTime","dataChannel","createDataChannel","find","sendSctpAssociation","sctpStreamParameters","streamId","receive","trackId","_assertRecvDirection","String","size","answerMediaObject","applyCodecParameters","getTransceivers","t","receiver","rtpReceiver","stopReceiving","getReceiverStats","receiveDataChannel","receiveSctpAssociation","extractDtlsParameters","role","updateDtlsRole","safeEmitAsPromise"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Chrome70 = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Chrome70');\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\nclass Chrome70 extends HandlerInterface_1.HandlerInterface {\n    constructor() {\n        super();\n        // Map of RTCTransceivers indexed by MID.\n        this._mapMidTransceiver = new Map();\n        // Local stream for sending.\n        this._sendStream = new MediaStream();\n        // Whether a DataChannel m=application section has been created.\n        this._hasDataChannelMediaSection = false;\n        // Sending DataChannel id value counter. Incremented for each new DataChannel.\n        this._nextSendSctpStreamId = 0;\n        // Got transport local and remote parameters.\n        this._transportReady = false;\n    }\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Chrome70();\n    }\n    get name() {\n        return 'Chrome70';\n    }\n    close() {\n        logger.debug('close()');\n        // Close RTCPeerConnection.\n        if (this._pc) {\n            try {\n                this._pc.close();\n            }\n            catch (error) { }\n        }\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'unified-plan'\n        });\n        try {\n            pc.addTransceiver('audio');\n            pc.addTransceiver('video');\n            const offer = await pc.createOffer();\n            try {\n                pc.close();\n            }\n            catch (error) { }\n            const sdpObject = sdpTransform.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n        }\n        catch (error) {\n            try {\n                pc.close();\n            }\n            catch (error2) { }\n            throw error;\n        }\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: SCTP_NUM_STREAMS\n        };\n    }\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger.debug('run()');\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters\n        });\n        this._sendingRtpParametersByKind =\n            {\n                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._sendingRemoteRtpParametersByKind =\n            {\n                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._pc = new RTCPeerConnection(Object.assign({ iceServers: iceServers || [], iceTransportPolicy: iceTransportPolicy || 'all', bundlePolicy: 'max-bundle', rtcpMuxPolicy: 'require', sdpSemantics: 'unified-plan' }, additionalSettings), proprietaryConstraints);\n        // Handle RTCPeerConnection connection status.\n        this._pc.addEventListener('iceconnectionstatechange', () => {\n            switch (this._pc.iceConnectionState) {\n                case 'checking':\n                    this.emit('@connectionstatechange', 'connecting');\n                    break;\n                case 'connected':\n                case 'completed':\n                    this.emit('@connectionstatechange', 'connected');\n                    break;\n                case 'failed':\n                    this.emit('@connectionstatechange', 'failed');\n                    break;\n                case 'disconnected':\n                    this.emit('@connectionstatechange', 'disconnected');\n                    break;\n                case 'closed':\n                    this.emit('@connectionstatechange', 'closed');\n                    break;\n            }\n        });\n    }\n    async updateIceServers(iceServers) {\n        logger.debug('updateIceServers()');\n        const configuration = this._pc.getConfiguration();\n        configuration.iceServers = iceServers;\n        this._pc.setConfiguration(configuration);\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        // Provide the remote SDP handler with new remote ICE parameters.\n        this._remoteSdp.updateIceParameters(iceParameters);\n        if (!this._transportReady)\n            return;\n        if (this._direction === 'send') {\n            const offer = await this._pc.createOffer({ iceRestart: true });\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n        }\n        else {\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n        }\n    }\n    async getTransportStats() {\n        return this._pc.getStats();\n    }\n    async send({ track, encodings, codecOptions, codec }) {\n        this._assertSendDirection();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRemoteRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });\n        let offer = await this._pc.createOffer();\n        let localSdpObject = sdpTransform.parse(offer.sdp);\n        let offerMediaObject;\n        if (!this._transportReady)\n            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n        if (encodings && encodings.length > 1) {\n            logger.debug('send() | enabling legacy simulcast');\n            localSdpObject = sdpTransform.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n                offerMediaObject,\n                numStreams: encodings.length\n            });\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        // Special case for VP9 with SVC.\n        let hackVp9Svc = false;\n        const layers = scalabilityModes_1.parse((encodings || [{}])[0].scalabilityMode);\n        if (encodings &&\n            encodings.length === 1 &&\n            layers.spatialLayers > 1 &&\n            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\n            logger.debug('send() | enabling legacy simulcast for VP9 SVC');\n            hackVp9Svc = true;\n            localSdpObject = sdpTransform.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n                offerMediaObject,\n                numStreams: layers.spatialLayers\n            });\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        // If encodings are given, apply them now.\n        if (encodings) {\n            logger.debug('send() | applying given encodings');\n            const parameters = transceiver.sender.getParameters();\n            for (let idx = 0; idx < (parameters.encodings || []).length; ++idx) {\n                const encoding = parameters.encodings[idx];\n                const desiredEncoding = encodings[idx];\n                // Should not happen but just in case.\n                if (!desiredEncoding)\n                    break;\n                parameters.encodings[idx] = Object.assign(encoding, desiredEncoding);\n            }\n            await transceiver.sender.setParameters(parameters);\n        }\n        // We can now get the transceiver.mid.\n        const localId = transceiver.mid;\n        // Set MID.\n        sendingRtpParameters.mid = localId;\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n        // Set RTCP CNAME.\n        sendingRtpParameters.rtcp.cname =\n            sdpCommonUtils.getCname({ offerMediaObject });\n        // Set RTP encodings.\n        sendingRtpParameters.encodings =\n            sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n        // Complete encodings with given values.\n        if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n                if (encodings[idx])\n                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n            }\n        }\n        // Hack for VP9 SVC.\n        if (hackVp9Svc) {\n            sendingRtpParameters.encodings = [sendingRtpParameters.encodings[0]];\n        }\n        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n        // each encoding.\n        if (sendingRtpParameters.encodings.length > 1 &&\n            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n            for (const encoding of sendingRtpParameters.encodings) {\n                encoding.scalabilityMode = 'S1T3';\n            }\n        }\n        this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions\n        });\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n        };\n    }\n    async stopSending(localId) {\n        this._assertSendDirection();\n        logger.debug('stopSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        transceiver.sender.replaceTrack(null);\n        this._pc.removeTrack(transceiver.sender);\n        this._remoteSdp.closeMediaSection(transceiver.mid);\n        const offer = await this._pc.createOffer();\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async replaceTrack(localId, track) {\n        this._assertSendDirection();\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        await transceiver.sender.replaceTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        this._assertSendDirection();\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer)\n                encoding.active = true;\n            else\n                encoding.active = false;\n        });\n        await transceiver.sender.setParameters(parameters);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        this._assertSendDirection();\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = Object.assign(Object.assign({}, encoding), params);\n        });\n        await transceiver.sender.setParameters(parameters);\n    }\n    async getSenderStats(localId) {\n        this._assertSendDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        return transceiver.sender.getStats();\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n        this._assertSendDirection();\n        const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('sendDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // Increase next id.\n        this._nextSendSctpStreamId =\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n        // If this is the first DataChannel we need to create the SDP answer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            const offer = await this._pc.createOffer();\n            const localSdpObject = sdpTransform.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media\n                .find((m) => m.type === 'application');\n            if (!this._transportReady)\n                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n        };\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive({ trackId, kind, rtpParameters }) {\n        this._assertRecvDirection();\n        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n        const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n        this._remoteSdp.receive({\n            mid: localId,\n            kind,\n            offerRtpParameters: rtpParameters,\n            streamId: rtpParameters.rtcp.cname,\n            trackId\n        });\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        let answer = await this._pc.createAnswer();\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        const answerMediaObject = localSdpObject.media\n            .find((m) => String(m.mid) === localId);\n        // May need to modify codec parameters in the answer based on codec\n        // parameters in the offer.\n        sdpCommonUtils.applyCodecParameters({\n            offerRtpParameters: rtpParameters,\n            answerMediaObject\n        });\n        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n        if (!this._transportReady)\n            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        const transceiver = this._pc.getTransceivers()\n            .find((t) => t.mid === localId);\n        if (!transceiver)\n            throw new Error('new RTCRtpTransceiver not found');\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        return {\n            localId,\n            track: transceiver.receiver.track,\n            rtpReceiver: transceiver.receiver\n        };\n    }\n    async stopReceiving(localId) {\n        this._assertRecvDirection();\n        logger.debug('stopReceiving() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        this._remoteSdp.closeMediaSection(transceiver.mid);\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async getReceiverStats(localId) {\n        this._assertRecvDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        return transceiver.receiver.getStats();\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {\n        this._assertRecvDirection();\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n        const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('receiveDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // If this is the first DataChannel we need to create the SDP offer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            if (!this._transportReady) {\n                const localSdpObject = sdpTransform.parse(answer.sdp);\n                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n            }\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        return { dataChannel };\n    }\n    async _setupTransport({ localDtlsRole, localSdpObject }) {\n        if (!localSdpObject)\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        // Get our local DTLS parameters.\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n        // Set our DTLS role.\n        dtlsParameters.role = localDtlsRole;\n        // Update the remote DTLS role in the SDP.\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n        // Need to tell the remote transport about our parameters.\n        await this.safeEmitAsPromise('@connect', { dtlsParameters });\n        this._transportReady = true;\n    }\n    _assertSendDirection() {\n        if (this._direction !== 'send') {\n            throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n    }\n    _assertRecvDirection() {\n        if (this._direction !== 'recv') {\n            throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n    }\n}\nexports.Chrome70 = Chrome70;\n"]},"metadata":{},"sourceType":"script"}