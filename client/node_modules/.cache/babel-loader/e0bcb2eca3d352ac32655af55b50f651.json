{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OfferMediaSection = exports.AnswerMediaSection = exports.MediaSection = void 0;\n\nconst utils = __importStar(require(\"../../utils\"));\n\nclass MediaSection {\n  constructor({\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    planB = false\n  }) {\n    this._mediaObject = {};\n    this._planB = planB;\n\n    if (iceParameters) {\n      this.setIceParameters(iceParameters);\n    }\n\n    if (iceCandidates) {\n      this._mediaObject.candidates = [];\n\n      for (const candidate of iceCandidates) {\n        const candidateObject = {}; // mediasoup does mandates rtcp-mux so candidates component is always\n        // RTP (1).\n\n        candidateObject.component = 1;\n        candidateObject.foundation = candidate.foundation;\n        candidateObject.ip = candidate.ip;\n        candidateObject.port = candidate.port;\n        candidateObject.priority = candidate.priority;\n        candidateObject.transport = candidate.protocol;\n        candidateObject.type = candidate.type;\n        if (candidate.tcpType) candidateObject.tcptype = candidate.tcpType;\n\n        this._mediaObject.candidates.push(candidateObject);\n      }\n\n      this._mediaObject.endOfCandidates = 'end-of-candidates';\n      this._mediaObject.iceOptions = 'renomination';\n    }\n\n    if (dtlsParameters) {\n      this.setDtlsRole(dtlsParameters.role);\n    }\n  }\n\n  get mid() {\n    return String(this._mediaObject.mid);\n  }\n\n  get closed() {\n    return this._mediaObject.port === 0;\n  }\n\n  getObject() {\n    return this._mediaObject;\n  }\n\n  setIceParameters(iceParameters) {\n    this._mediaObject.iceUfrag = iceParameters.usernameFragment;\n    this._mediaObject.icePwd = iceParameters.password;\n  }\n\n  disable() {\n    this._mediaObject.direction = 'inactive';\n    delete this._mediaObject.ext;\n    delete this._mediaObject.ssrcs;\n    delete this._mediaObject.ssrcGroups;\n    delete this._mediaObject.simulcast;\n    delete this._mediaObject.simulcast_03;\n    delete this._mediaObject.rids;\n  }\n\n  close() {\n    this._mediaObject.direction = 'inactive';\n    this._mediaObject.port = 0;\n    delete this._mediaObject.ext;\n    delete this._mediaObject.ssrcs;\n    delete this._mediaObject.ssrcGroups;\n    delete this._mediaObject.simulcast;\n    delete this._mediaObject.simulcast_03;\n    delete this._mediaObject.rids;\n    delete this._mediaObject.extmapAllowMixed;\n  }\n\n}\n\nexports.MediaSection = MediaSection;\n\nclass AnswerMediaSection extends MediaSection {\n  constructor({\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    plainRtpParameters,\n    planB = false,\n    offerMediaObject,\n    offerRtpParameters,\n    answerRtpParameters,\n    codecOptions,\n    extmapAllowMixed = false\n  }) {\n    super({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      planB\n    });\n    this._mediaObject.mid = String(offerMediaObject.mid);\n    this._mediaObject.type = offerMediaObject.type;\n    this._mediaObject.protocol = offerMediaObject.protocol;\n\n    if (!plainRtpParameters) {\n      this._mediaObject.connection = {\n        ip: '127.0.0.1',\n        version: 4\n      };\n      this._mediaObject.port = 7;\n    } else {\n      this._mediaObject.connection = {\n        ip: plainRtpParameters.ip,\n        version: plainRtpParameters.ipVersion\n      };\n      this._mediaObject.port = plainRtpParameters.port;\n    }\n\n    switch (offerMediaObject.type) {\n      case 'audio':\n      case 'video':\n        {\n          this._mediaObject.direction = 'recvonly';\n          this._mediaObject.rtp = [];\n          this._mediaObject.rtcpFb = [];\n          this._mediaObject.fmtp = [];\n\n          for (const codec of answerRtpParameters.codecs) {\n            const rtp = {\n              payload: codec.payloadType,\n              codec: getCodecName(codec),\n              rate: codec.clockRate\n            };\n            if (codec.channels > 1) rtp.encoding = codec.channels;\n\n            this._mediaObject.rtp.push(rtp);\n\n            const codecParameters = utils.clone(codec.parameters, {});\n\n            if (codecOptions) {\n              const {\n                opusStereo,\n                opusFec,\n                opusDtx,\n                opusMaxPlaybackRate,\n                opusMaxAverageBitrate,\n                opusPtime,\n                videoGoogleStartBitrate,\n                videoGoogleMaxBitrate,\n                videoGoogleMinBitrate\n              } = codecOptions;\n              const offerCodec = offerRtpParameters.codecs.find(c => c.payloadType === codec.payloadType);\n\n              switch (codec.mimeType.toLowerCase()) {\n                case 'audio/opus':\n                  {\n                    if (opusStereo !== undefined) {\n                      offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;\n                      codecParameters.stereo = opusStereo ? 1 : 0;\n                    }\n\n                    if (opusFec !== undefined) {\n                      offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n                      codecParameters.useinbandfec = opusFec ? 1 : 0;\n                    }\n\n                    if (opusDtx !== undefined) {\n                      offerCodec.parameters.usedtx = opusDtx ? 1 : 0;\n                      codecParameters.usedtx = opusDtx ? 1 : 0;\n                    }\n\n                    if (opusMaxPlaybackRate !== undefined) {\n                      codecParameters.maxplaybackrate = opusMaxPlaybackRate;\n                    }\n\n                    if (opusMaxAverageBitrate !== undefined) {\n                      codecParameters.maxaveragebitrate = opusMaxAverageBitrate;\n                    }\n\n                    if (opusPtime !== undefined) {\n                      offerCodec.parameters.ptime = opusPtime;\n                      codecParameters.ptime = opusPtime;\n                    }\n\n                    break;\n                  }\n\n                case 'video/vp8':\n                case 'video/vp9':\n                case 'video/h264':\n                case 'video/h265':\n                  {\n                    if (videoGoogleStartBitrate !== undefined) codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;\n                    if (videoGoogleMaxBitrate !== undefined) codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;\n                    if (videoGoogleMinBitrate !== undefined) codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;\n                    break;\n                  }\n              }\n            }\n\n            const fmtp = {\n              payload: codec.payloadType,\n              config: ''\n            };\n\n            for (const key of Object.keys(codecParameters)) {\n              if (fmtp.config) fmtp.config += ';';\n              fmtp.config += `${key}=${codecParameters[key]}`;\n            }\n\n            if (fmtp.config) this._mediaObject.fmtp.push(fmtp);\n\n            for (const fb of codec.rtcpFeedback) {\n              this._mediaObject.rtcpFb.push({\n                payload: codec.payloadType,\n                type: fb.type,\n                subtype: fb.parameter\n              });\n            }\n          }\n\n          this._mediaObject.payloads = answerRtpParameters.codecs.map(codec => codec.payloadType).join(' ');\n          this._mediaObject.ext = [];\n\n          for (const ext of answerRtpParameters.headerExtensions) {\n            // Don't add a header extension if not present in the offer.\n            const found = (offerMediaObject.ext || []).some(localExt => localExt.uri === ext.uri);\n            if (!found) continue;\n\n            this._mediaObject.ext.push({\n              uri: ext.uri,\n              value: ext.id\n            });\n          } // Allow both 1 byte and 2 bytes length header extensions.\n\n\n          if (extmapAllowMixed && offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {\n            this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n          } // Simulcast.\n\n\n          if (offerMediaObject.simulcast) {\n            this._mediaObject.simulcast = {\n              dir1: 'recv',\n              list1: offerMediaObject.simulcast.list1\n            };\n            this._mediaObject.rids = [];\n\n            for (const rid of offerMediaObject.rids || []) {\n              if (rid.direction !== 'send') continue;\n\n              this._mediaObject.rids.push({\n                id: rid.id,\n                direction: 'recv'\n              });\n            }\n          } // Simulcast (draft version 03).\n          else if (offerMediaObject.simulcast_03) {\n            // eslint-disable-next-line camelcase\n            this._mediaObject.simulcast_03 = {\n              value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')\n            };\n            this._mediaObject.rids = [];\n\n            for (const rid of offerMediaObject.rids || []) {\n              if (rid.direction !== 'send') continue;\n\n              this._mediaObject.rids.push({\n                id: rid.id,\n                direction: 'recv'\n              });\n            }\n          }\n\n          this._mediaObject.rtcpMux = 'rtcp-mux';\n          this._mediaObject.rtcpRsize = 'rtcp-rsize';\n          if (this._planB && this._mediaObject.type === 'video') this._mediaObject.xGoogleFlag = 'conference';\n          break;\n        }\n\n      case 'application':\n        {\n          // New spec.\n          if (typeof offerMediaObject.sctpPort === 'number') {\n            this._mediaObject.payloads = 'webrtc-datachannel';\n            this._mediaObject.sctpPort = sctpParameters.port;\n            this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n          } // Old spec.\n          else if (offerMediaObject.sctpmap) {\n            this._mediaObject.payloads = sctpParameters.port;\n            this._mediaObject.sctpmap = {\n              app: 'webrtc-datachannel',\n              sctpmapNumber: sctpParameters.port,\n              maxMessageSize: sctpParameters.maxMessageSize\n            };\n          }\n\n          break;\n        }\n    }\n  }\n\n  setDtlsRole(role) {\n    switch (role) {\n      case 'client':\n        this._mediaObject.setup = 'active';\n        break;\n\n      case 'server':\n        this._mediaObject.setup = 'passive';\n        break;\n\n      case 'auto':\n        this._mediaObject.setup = 'actpass';\n        break;\n    }\n  }\n\n}\n\nexports.AnswerMediaSection = AnswerMediaSection;\n\nclass OfferMediaSection extends MediaSection {\n  constructor({\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    plainRtpParameters,\n    planB = false,\n    mid,\n    kind,\n    offerRtpParameters,\n    streamId,\n    trackId,\n    oldDataChannelSpec = false\n  }) {\n    super({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      planB\n    });\n    this._mediaObject.mid = String(mid);\n    this._mediaObject.type = kind;\n\n    if (!plainRtpParameters) {\n      this._mediaObject.connection = {\n        ip: '127.0.0.1',\n        version: 4\n      };\n      if (!sctpParameters) this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';else this._mediaObject.protocol = 'UDP/DTLS/SCTP';\n      this._mediaObject.port = 7;\n    } else {\n      this._mediaObject.connection = {\n        ip: plainRtpParameters.ip,\n        version: plainRtpParameters.ipVersion\n      };\n      this._mediaObject.protocol = 'RTP/AVP';\n      this._mediaObject.port = plainRtpParameters.port;\n    }\n\n    switch (kind) {\n      case 'audio':\n      case 'video':\n        {\n          this._mediaObject.direction = 'sendonly';\n          this._mediaObject.rtp = [];\n          this._mediaObject.rtcpFb = [];\n          this._mediaObject.fmtp = [];\n          if (!this._planB) this._mediaObject.msid = `${streamId || '-'} ${trackId}`;\n\n          for (const codec of offerRtpParameters.codecs) {\n            const rtp = {\n              payload: codec.payloadType,\n              codec: getCodecName(codec),\n              rate: codec.clockRate\n            };\n            if (codec.channels > 1) rtp.encoding = codec.channels;\n\n            this._mediaObject.rtp.push(rtp);\n\n            const fmtp = {\n              payload: codec.payloadType,\n              config: ''\n            };\n\n            for (const key of Object.keys(codec.parameters)) {\n              if (fmtp.config) fmtp.config += ';';\n              fmtp.config += `${key}=${codec.parameters[key]}`;\n            }\n\n            if (fmtp.config) this._mediaObject.fmtp.push(fmtp);\n\n            for (const fb of codec.rtcpFeedback) {\n              this._mediaObject.rtcpFb.push({\n                payload: codec.payloadType,\n                type: fb.type,\n                subtype: fb.parameter\n              });\n            }\n          }\n\n          this._mediaObject.payloads = offerRtpParameters.codecs.map(codec => codec.payloadType).join(' ');\n          this._mediaObject.ext = [];\n\n          for (const ext of offerRtpParameters.headerExtensions) {\n            this._mediaObject.ext.push({\n              uri: ext.uri,\n              value: ext.id\n            });\n          }\n\n          this._mediaObject.rtcpMux = 'rtcp-mux';\n          this._mediaObject.rtcpRsize = 'rtcp-rsize';\n          const encoding = offerRtpParameters.encodings[0];\n          const ssrc = encoding.ssrc;\n          const rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;\n          this._mediaObject.ssrcs = [];\n          this._mediaObject.ssrcGroups = [];\n\n          if (offerRtpParameters.rtcp.cname) {\n            this._mediaObject.ssrcs.push({\n              id: ssrc,\n              attribute: 'cname',\n              value: offerRtpParameters.rtcp.cname\n            });\n          }\n\n          if (this._planB) {\n            this._mediaObject.ssrcs.push({\n              id: ssrc,\n              attribute: 'msid',\n              value: `${streamId || '-'} ${trackId}`\n            });\n          }\n\n          if (rtxSsrc) {\n            if (offerRtpParameters.rtcp.cname) {\n              this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'cname',\n                value: offerRtpParameters.rtcp.cname\n              });\n            }\n\n            if (this._planB) {\n              this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'msid',\n                value: `${streamId || '-'} ${trackId}`\n              });\n            } // Associate original and retransmission SSRCs.\n\n\n            this._mediaObject.ssrcGroups.push({\n              semantics: 'FID',\n              ssrcs: `${ssrc} ${rtxSsrc}`\n            });\n          }\n\n          break;\n        }\n\n      case 'application':\n        {\n          // New spec.\n          if (!oldDataChannelSpec) {\n            this._mediaObject.payloads = 'webrtc-datachannel';\n            this._mediaObject.sctpPort = sctpParameters.port;\n            this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n          } // Old spec.\n          else {\n            this._mediaObject.payloads = sctpParameters.port;\n            this._mediaObject.sctpmap = {\n              app: 'webrtc-datachannel',\n              sctpmapNumber: sctpParameters.port,\n              maxMessageSize: sctpParameters.maxMessageSize\n            };\n          }\n\n          break;\n        }\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  setDtlsRole(role) {\n    // Always 'actpass'.\n    this._mediaObject.setup = 'actpass';\n  }\n\n  planBReceive({\n    offerRtpParameters,\n    streamId,\n    trackId\n  }) {\n    const encoding = offerRtpParameters.encodings[0];\n    const ssrc = encoding.ssrc;\n    const rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;\n\n    const payloads = this._mediaObject.payloads.split(' ');\n\n    for (const codec of offerRtpParameters.codecs) {\n      if (payloads.includes(String(codec.payloadType))) {\n        continue;\n      }\n\n      const rtp = {\n        payload: codec.payloadType,\n        codec: getCodecName(codec),\n        rate: codec.clockRate\n      };\n      if (codec.channels > 1) rtp.encoding = codec.channels;\n\n      this._mediaObject.rtp.push(rtp);\n\n      const fmtp = {\n        payload: codec.payloadType,\n        config: ''\n      };\n\n      for (const key of Object.keys(codec.parameters)) {\n        if (fmtp.config) fmtp.config += ';';\n        fmtp.config += `${key}=${codec.parameters[key]}`;\n      }\n\n      if (fmtp.config) this._mediaObject.fmtp.push(fmtp);\n\n      for (const fb of codec.rtcpFeedback) {\n        this._mediaObject.rtcpFb.push({\n          payload: codec.payloadType,\n          type: fb.type,\n          subtype: fb.parameter\n        });\n      }\n    }\n\n    this._mediaObject.payloads += ` ${offerRtpParameters.codecs.filter(codec => !this._mediaObject.payloads.includes(codec.payloadType)).map(codec => codec.payloadType).join(' ')}`;\n    this._mediaObject.payloads = this._mediaObject.payloads.trim();\n\n    if (offerRtpParameters.rtcp.cname) {\n      this._mediaObject.ssrcs.push({\n        id: ssrc,\n        attribute: 'cname',\n        value: offerRtpParameters.rtcp.cname\n      });\n    }\n\n    this._mediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: `${streamId || '-'} ${trackId}`\n    });\n\n    if (rtxSsrc) {\n      if (offerRtpParameters.rtcp.cname) {\n        this._mediaObject.ssrcs.push({\n          id: rtxSsrc,\n          attribute: 'cname',\n          value: offerRtpParameters.rtcp.cname\n        });\n      }\n\n      this._mediaObject.ssrcs.push({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: `${streamId || '-'} ${trackId}`\n      }); // Associate original and retransmission SSRCs.\n\n\n      this._mediaObject.ssrcGroups.push({\n        semantics: 'FID',\n        ssrcs: `${ssrc} ${rtxSsrc}`\n      });\n    }\n  }\n\n  planBStopReceiving({\n    offerRtpParameters\n  }) {\n    const encoding = offerRtpParameters.encodings[0];\n    const ssrc = encoding.ssrc;\n    const rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;\n    this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(s => s.id !== ssrc && s.id !== rtxSsrc);\n\n    if (rtxSsrc) {\n      this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter(group => group.ssrcs !== `${ssrc} ${rtxSsrc}`);\n    }\n  }\n\n}\n\nexports.OfferMediaSection = OfferMediaSection;\n\nfunction getCodecName(codec) {\n  const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n  const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n  if (!mimeTypeMatch) throw new TypeError('invalid codec.mimeType');\n  return mimeTypeMatch[2];\n}","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","hasOwnProperty","call","exports","OfferMediaSection","AnswerMediaSection","MediaSection","utils","require","constructor","iceParameters","iceCandidates","dtlsParameters","planB","_mediaObject","_planB","setIceParameters","candidates","candidate","candidateObject","component","foundation","ip","port","priority","transport","protocol","type","tcpType","tcptype","push","endOfCandidates","iceOptions","setDtlsRole","role","mid","String","closed","getObject","iceUfrag","usernameFragment","icePwd","password","disable","direction","ext","ssrcs","ssrcGroups","simulcast","simulcast_03","rids","close","extmapAllowMixed","sctpParameters","plainRtpParameters","offerMediaObject","offerRtpParameters","answerRtpParameters","codecOptions","connection","version","ipVersion","rtp","rtcpFb","fmtp","codec","codecs","payload","payloadType","getCodecName","rate","clockRate","channels","encoding","codecParameters","clone","parameters","opusStereo","opusFec","opusDtx","opusMaxPlaybackRate","opusMaxAverageBitrate","opusPtime","videoGoogleStartBitrate","videoGoogleMaxBitrate","videoGoogleMinBitrate","offerCodec","find","c","mimeType","toLowerCase","stereo","useinbandfec","usedtx","maxplaybackrate","maxaveragebitrate","ptime","config","key","keys","fb","rtcpFeedback","subtype","parameter","payloads","map","join","headerExtensions","found","some","localExt","uri","id","dir1","list1","rid","replace","rtcpMux","rtcpRsize","xGoogleFlag","sctpPort","maxMessageSize","sctpmap","app","sctpmapNumber","setup","kind","streamId","trackId","oldDataChannelSpec","msid","encodings","ssrc","rtxSsrc","rtx","rtcp","cname","attribute","semantics","planBReceive","split","includes","filter","trim","planBStopReceiving","s","group","MimeTypeRegex","RegExp","mimeTypeMatch","exec","TypeError"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OfferMediaSection = exports.AnswerMediaSection = exports.MediaSection = void 0;\nconst utils = __importStar(require(\"../../utils\"));\nclass MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, planB = false }) {\n        this._mediaObject = {};\n        this._planB = planB;\n        if (iceParameters) {\n            this.setIceParameters(iceParameters);\n        }\n        if (iceCandidates) {\n            this._mediaObject.candidates = [];\n            for (const candidate of iceCandidates) {\n                const candidateObject = {};\n                // mediasoup does mandates rtcp-mux so candidates component is always\n                // RTP (1).\n                candidateObject.component = 1;\n                candidateObject.foundation = candidate.foundation;\n                candidateObject.ip = candidate.ip;\n                candidateObject.port = candidate.port;\n                candidateObject.priority = candidate.priority;\n                candidateObject.transport = candidate.protocol;\n                candidateObject.type = candidate.type;\n                if (candidate.tcpType)\n                    candidateObject.tcptype = candidate.tcpType;\n                this._mediaObject.candidates.push(candidateObject);\n            }\n            this._mediaObject.endOfCandidates = 'end-of-candidates';\n            this._mediaObject.iceOptions = 'renomination';\n        }\n        if (dtlsParameters) {\n            this.setDtlsRole(dtlsParameters.role);\n        }\n    }\n    get mid() {\n        return String(this._mediaObject.mid);\n    }\n    get closed() {\n        return this._mediaObject.port === 0;\n    }\n    getObject() {\n        return this._mediaObject;\n    }\n    setIceParameters(iceParameters) {\n        this._mediaObject.iceUfrag = iceParameters.usernameFragment;\n        this._mediaObject.icePwd = iceParameters.password;\n    }\n    disable() {\n        this._mediaObject.direction = 'inactive';\n        delete this._mediaObject.ext;\n        delete this._mediaObject.ssrcs;\n        delete this._mediaObject.ssrcGroups;\n        delete this._mediaObject.simulcast;\n        delete this._mediaObject.simulcast_03;\n        delete this._mediaObject.rids;\n    }\n    close() {\n        this._mediaObject.direction = 'inactive';\n        this._mediaObject.port = 0;\n        delete this._mediaObject.ext;\n        delete this._mediaObject.ssrcs;\n        delete this._mediaObject.ssrcGroups;\n        delete this._mediaObject.simulcast;\n        delete this._mediaObject.simulcast_03;\n        delete this._mediaObject.rids;\n        delete this._mediaObject.extmapAllowMixed;\n    }\n}\nexports.MediaSection = MediaSection;\nclass AnswerMediaSection extends MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, offerMediaObject, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(offerMediaObject.mid);\n        this._mediaObject.type = offerMediaObject.type;\n        this._mediaObject.protocol = offerMediaObject.protocol;\n        if (!plainRtpParameters) {\n            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n            this._mediaObject.port = 7;\n        }\n        else {\n            this._mediaObject.connection =\n                {\n                    ip: plainRtpParameters.ip,\n                    version: plainRtpParameters.ipVersion\n                };\n            this._mediaObject.port = plainRtpParameters.port;\n        }\n        switch (offerMediaObject.type) {\n            case 'audio':\n            case 'video':\n                {\n                    this._mediaObject.direction = 'recvonly';\n                    this._mediaObject.rtp = [];\n                    this._mediaObject.rtcpFb = [];\n                    this._mediaObject.fmtp = [];\n                    for (const codec of answerRtpParameters.codecs) {\n                        const rtp = {\n                            payload: codec.payloadType,\n                            codec: getCodecName(codec),\n                            rate: codec.clockRate\n                        };\n                        if (codec.channels > 1)\n                            rtp.encoding = codec.channels;\n                        this._mediaObject.rtp.push(rtp);\n                        const codecParameters = utils.clone(codec.parameters, {});\n                        if (codecOptions) {\n                            const { opusStereo, opusFec, opusDtx, opusMaxPlaybackRate, opusMaxAverageBitrate, opusPtime, videoGoogleStartBitrate, videoGoogleMaxBitrate, videoGoogleMinBitrate } = codecOptions;\n                            const offerCodec = offerRtpParameters.codecs\n                                .find((c) => (c.payloadType === codec.payloadType));\n                            switch (codec.mimeType.toLowerCase()) {\n                                case 'audio/opus':\n                                    {\n                                        if (opusStereo !== undefined) {\n                                            offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;\n                                            codecParameters.stereo = opusStereo ? 1 : 0;\n                                        }\n                                        if (opusFec !== undefined) {\n                                            offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n                                            codecParameters.useinbandfec = opusFec ? 1 : 0;\n                                        }\n                                        if (opusDtx !== undefined) {\n                                            offerCodec.parameters.usedtx = opusDtx ? 1 : 0;\n                                            codecParameters.usedtx = opusDtx ? 1 : 0;\n                                        }\n                                        if (opusMaxPlaybackRate !== undefined) {\n                                            codecParameters.maxplaybackrate = opusMaxPlaybackRate;\n                                        }\n                                        if (opusMaxAverageBitrate !== undefined) {\n                                            codecParameters.maxaveragebitrate = opusMaxAverageBitrate;\n                                        }\n                                        if (opusPtime !== undefined) {\n                                            offerCodec.parameters.ptime = opusPtime;\n                                            codecParameters.ptime = opusPtime;\n                                        }\n                                        break;\n                                    }\n                                case 'video/vp8':\n                                case 'video/vp9':\n                                case 'video/h264':\n                                case 'video/h265':\n                                    {\n                                        if (videoGoogleStartBitrate !== undefined)\n                                            codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;\n                                        if (videoGoogleMaxBitrate !== undefined)\n                                            codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;\n                                        if (videoGoogleMinBitrate !== undefined)\n                                            codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;\n                                        break;\n                                    }\n                            }\n                        }\n                        const fmtp = {\n                            payload: codec.payloadType,\n                            config: ''\n                        };\n                        for (const key of Object.keys(codecParameters)) {\n                            if (fmtp.config)\n                                fmtp.config += ';';\n                            fmtp.config += `${key}=${codecParameters[key]}`;\n                        }\n                        if (fmtp.config)\n                            this._mediaObject.fmtp.push(fmtp);\n                        for (const fb of codec.rtcpFeedback) {\n                            this._mediaObject.rtcpFb.push({\n                                payload: codec.payloadType,\n                                type: fb.type,\n                                subtype: fb.parameter\n                            });\n                        }\n                    }\n                    this._mediaObject.payloads = answerRtpParameters.codecs\n                        .map((codec) => codec.payloadType)\n                        .join(' ');\n                    this._mediaObject.ext = [];\n                    for (const ext of answerRtpParameters.headerExtensions) {\n                        // Don't add a header extension if not present in the offer.\n                        const found = (offerMediaObject.ext || [])\n                            .some((localExt) => localExt.uri === ext.uri);\n                        if (!found)\n                            continue;\n                        this._mediaObject.ext.push({\n                            uri: ext.uri,\n                            value: ext.id\n                        });\n                    }\n                    // Allow both 1 byte and 2 bytes length header extensions.\n                    if (extmapAllowMixed &&\n                        offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {\n                        this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n                    }\n                    // Simulcast.\n                    if (offerMediaObject.simulcast) {\n                        this._mediaObject.simulcast =\n                            {\n                                dir1: 'recv',\n                                list1: offerMediaObject.simulcast.list1\n                            };\n                        this._mediaObject.rids = [];\n                        for (const rid of offerMediaObject.rids || []) {\n                            if (rid.direction !== 'send')\n                                continue;\n                            this._mediaObject.rids.push({\n                                id: rid.id,\n                                direction: 'recv'\n                            });\n                        }\n                    }\n                    // Simulcast (draft version 03).\n                    else if (offerMediaObject.simulcast_03) {\n                        // eslint-disable-next-line camelcase\n                        this._mediaObject.simulcast_03 =\n                            {\n                                value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')\n                            };\n                        this._mediaObject.rids = [];\n                        for (const rid of offerMediaObject.rids || []) {\n                            if (rid.direction !== 'send')\n                                continue;\n                            this._mediaObject.rids.push({\n                                id: rid.id,\n                                direction: 'recv'\n                            });\n                        }\n                    }\n                    this._mediaObject.rtcpMux = 'rtcp-mux';\n                    this._mediaObject.rtcpRsize = 'rtcp-rsize';\n                    if (this._planB && this._mediaObject.type === 'video')\n                        this._mediaObject.xGoogleFlag = 'conference';\n                    break;\n                }\n            case 'application':\n                {\n                    // New spec.\n                    if (typeof offerMediaObject.sctpPort === 'number') {\n                        this._mediaObject.payloads = 'webrtc-datachannel';\n                        this._mediaObject.sctpPort = sctpParameters.port;\n                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n                    }\n                    // Old spec.\n                    else if (offerMediaObject.sctpmap) {\n                        this._mediaObject.payloads = sctpParameters.port;\n                        this._mediaObject.sctpmap =\n                            {\n                                app: 'webrtc-datachannel',\n                                sctpmapNumber: sctpParameters.port,\n                                maxMessageSize: sctpParameters.maxMessageSize\n                            };\n                    }\n                    break;\n                }\n        }\n    }\n    setDtlsRole(role) {\n        switch (role) {\n            case 'client':\n                this._mediaObject.setup = 'active';\n                break;\n            case 'server':\n                this._mediaObject.setup = 'passive';\n                break;\n            case 'auto':\n                this._mediaObject.setup = 'actpass';\n                break;\n        }\n    }\n}\nexports.AnswerMediaSection = AnswerMediaSection;\nclass OfferMediaSection extends MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, mid, kind, offerRtpParameters, streamId, trackId, oldDataChannelSpec = false }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(mid);\n        this._mediaObject.type = kind;\n        if (!plainRtpParameters) {\n            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n            if (!sctpParameters)\n                this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';\n            else\n                this._mediaObject.protocol = 'UDP/DTLS/SCTP';\n            this._mediaObject.port = 7;\n        }\n        else {\n            this._mediaObject.connection =\n                {\n                    ip: plainRtpParameters.ip,\n                    version: plainRtpParameters.ipVersion\n                };\n            this._mediaObject.protocol = 'RTP/AVP';\n            this._mediaObject.port = plainRtpParameters.port;\n        }\n        switch (kind) {\n            case 'audio':\n            case 'video':\n                {\n                    this._mediaObject.direction = 'sendonly';\n                    this._mediaObject.rtp = [];\n                    this._mediaObject.rtcpFb = [];\n                    this._mediaObject.fmtp = [];\n                    if (!this._planB)\n                        this._mediaObject.msid = `${streamId || '-'} ${trackId}`;\n                    for (const codec of offerRtpParameters.codecs) {\n                        const rtp = {\n                            payload: codec.payloadType,\n                            codec: getCodecName(codec),\n                            rate: codec.clockRate\n                        };\n                        if (codec.channels > 1)\n                            rtp.encoding = codec.channels;\n                        this._mediaObject.rtp.push(rtp);\n                        const fmtp = {\n                            payload: codec.payloadType,\n                            config: ''\n                        };\n                        for (const key of Object.keys(codec.parameters)) {\n                            if (fmtp.config)\n                                fmtp.config += ';';\n                            fmtp.config += `${key}=${codec.parameters[key]}`;\n                        }\n                        if (fmtp.config)\n                            this._mediaObject.fmtp.push(fmtp);\n                        for (const fb of codec.rtcpFeedback) {\n                            this._mediaObject.rtcpFb.push({\n                                payload: codec.payloadType,\n                                type: fb.type,\n                                subtype: fb.parameter\n                            });\n                        }\n                    }\n                    this._mediaObject.payloads = offerRtpParameters.codecs\n                        .map((codec) => codec.payloadType)\n                        .join(' ');\n                    this._mediaObject.ext = [];\n                    for (const ext of offerRtpParameters.headerExtensions) {\n                        this._mediaObject.ext.push({\n                            uri: ext.uri,\n                            value: ext.id\n                        });\n                    }\n                    this._mediaObject.rtcpMux = 'rtcp-mux';\n                    this._mediaObject.rtcpRsize = 'rtcp-rsize';\n                    const encoding = offerRtpParameters.encodings[0];\n                    const ssrc = encoding.ssrc;\n                    const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n                        ? encoding.rtx.ssrc\n                        : undefined;\n                    this._mediaObject.ssrcs = [];\n                    this._mediaObject.ssrcGroups = [];\n                    if (offerRtpParameters.rtcp.cname) {\n                        this._mediaObject.ssrcs.push({\n                            id: ssrc,\n                            attribute: 'cname',\n                            value: offerRtpParameters.rtcp.cname\n                        });\n                    }\n                    if (this._planB) {\n                        this._mediaObject.ssrcs.push({\n                            id: ssrc,\n                            attribute: 'msid',\n                            value: `${streamId || '-'} ${trackId}`\n                        });\n                    }\n                    if (rtxSsrc) {\n                        if (offerRtpParameters.rtcp.cname) {\n                            this._mediaObject.ssrcs.push({\n                                id: rtxSsrc,\n                                attribute: 'cname',\n                                value: offerRtpParameters.rtcp.cname\n                            });\n                        }\n                        if (this._planB) {\n                            this._mediaObject.ssrcs.push({\n                                id: rtxSsrc,\n                                attribute: 'msid',\n                                value: `${streamId || '-'} ${trackId}`\n                            });\n                        }\n                        // Associate original and retransmission SSRCs.\n                        this._mediaObject.ssrcGroups.push({\n                            semantics: 'FID',\n                            ssrcs: `${ssrc} ${rtxSsrc}`\n                        });\n                    }\n                    break;\n                }\n            case 'application':\n                {\n                    // New spec.\n                    if (!oldDataChannelSpec) {\n                        this._mediaObject.payloads = 'webrtc-datachannel';\n                        this._mediaObject.sctpPort = sctpParameters.port;\n                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n                    }\n                    // Old spec.\n                    else {\n                        this._mediaObject.payloads = sctpParameters.port;\n                        this._mediaObject.sctpmap =\n                            {\n                                app: 'webrtc-datachannel',\n                                sctpmapNumber: sctpParameters.port,\n                                maxMessageSize: sctpParameters.maxMessageSize\n                            };\n                    }\n                    break;\n                }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setDtlsRole(role) {\n        // Always 'actpass'.\n        this._mediaObject.setup = 'actpass';\n    }\n    planBReceive({ offerRtpParameters, streamId, trackId }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n            ? encoding.rtx.ssrc\n            : undefined;\n        const payloads = this._mediaObject.payloads.split(' ');\n        for (const codec of offerRtpParameters.codecs) {\n            if (payloads.includes(String(codec.payloadType))) {\n                continue;\n            }\n            const rtp = {\n                payload: codec.payloadType,\n                codec: getCodecName(codec),\n                rate: codec.clockRate\n            };\n            if (codec.channels > 1)\n                rtp.encoding = codec.channels;\n            this._mediaObject.rtp.push(rtp);\n            const fmtp = {\n                payload: codec.payloadType,\n                config: ''\n            };\n            for (const key of Object.keys(codec.parameters)) {\n                if (fmtp.config)\n                    fmtp.config += ';';\n                fmtp.config += `${key}=${codec.parameters[key]}`;\n            }\n            if (fmtp.config)\n                this._mediaObject.fmtp.push(fmtp);\n            for (const fb of codec.rtcpFeedback) {\n                this._mediaObject.rtcpFb.push({\n                    payload: codec.payloadType,\n                    type: fb.type,\n                    subtype: fb.parameter\n                });\n            }\n        }\n        this._mediaObject.payloads += ` ${offerRtpParameters\n            .codecs\n            .filter((codec) => !this._mediaObject.payloads.includes(codec.payloadType))\n            .map((codec) => codec.payloadType)\n            .join(' ')}`;\n        this._mediaObject.payloads = this._mediaObject.payloads.trim();\n        if (offerRtpParameters.rtcp.cname) {\n            this._mediaObject.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: offerRtpParameters.rtcp.cname\n            });\n        }\n        this._mediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId || '-'} ${trackId}`\n        });\n        if (rtxSsrc) {\n            if (offerRtpParameters.rtcp.cname) {\n                this._mediaObject.ssrcs.push({\n                    id: rtxSsrc,\n                    attribute: 'cname',\n                    value: offerRtpParameters.rtcp.cname\n                });\n            }\n            this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'msid',\n                value: `${streamId || '-'} ${trackId}`\n            });\n            // Associate original and retransmission SSRCs.\n            this._mediaObject.ssrcGroups.push({\n                semantics: 'FID',\n                ssrcs: `${ssrc} ${rtxSsrc}`\n            });\n        }\n    }\n    planBStopReceiving({ offerRtpParameters }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n            ? encoding.rtx.ssrc\n            : undefined;\n        this._mediaObject.ssrcs = this._mediaObject.ssrcs\n            .filter((s) => s.id !== ssrc && s.id !== rtxSsrc);\n        if (rtxSsrc) {\n            this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups\n                .filter((group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`);\n        }\n    }\n}\nexports.OfferMediaSection = OfferMediaSection;\nfunction getCodecName(codec) {\n    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n    if (!mimeTypeMatch)\n        throw new TypeError('invalid codec.mimeType');\n    return mimeTypeMatch[2];\n}\n"]},"metadata":{},"sourceType":"script"}