{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoPSBT = void 0;\n\nconst lib_1 = require(\"./lib\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nclass CryptoPSBT extends RegistryItem_1.RegistryItem {\n  constructor(psbt) {\n    super();\n    this.psbt = psbt;\n\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.CRYPTO_PSBT;\n\n    this.getPSBT = () => this.psbt;\n\n    this.toDataItem = () => {\n      return new lib_1.DataItem(this.psbt);\n    };\n  }\n\n}\n\nexports.CryptoPSBT = CryptoPSBT;\n\nCryptoPSBT.fromDataItem = dataItem => {\n  const psbt = dataItem.getData();\n\n  if (!psbt) {\n    throw new Error(`#[ur-registry][CryptoPSBT][fn.fromDataItem]: decoded [dataItem][#data] is undefined: ${dataItem}`);\n  }\n\n  return new CryptoPSBT(psbt);\n};\n\nCryptoPSBT.fromCBOR = _cborPayload => {\n  const dataItem = lib_1.decodeToDataItem(_cborPayload);\n  return CryptoPSBT.fromDataItem(dataItem);\n};","map":{"version":3,"sources":["../src/CryptoPSBT.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,MAAa,UAAb,SAAgC,cAAA,CAAA,YAAhC,CAA4C;AAG1C,EAAA,WAAA,CAAoB,IAApB,EAAgC;AAC9B;AADkB,SAAA,IAAA,GAAA,IAAA;;AAFpB,SAAA,eAAA,GAAkB,MAAM,cAAA,CAAA,aAAA,CAAc,WAAtC;;AAMO,SAAA,OAAA,GAAU,MAAM,KAAK,IAArB;;AAEA,SAAA,UAAA,GAAa,MAAK;AACvB,aAAO,IAAI,KAAA,CAAA,QAAJ,CAAa,KAAK,IAAlB,CAAP;AACD,KAFM;AAJN;;AALyC;;AAA5C,OAAA,CAAA,UAAA,GAAA,UAAA;;AAagB,UAAA,CAAA,YAAA,GAAgB,QAAD,IAAuB;AAClD,QAAM,IAAI,GAAG,QAAQ,CAAC,OAAT,EAAb;;AACA,MAAI,CAAC,IAAL,EAAW;AACT,UAAM,IAAI,KAAJ,CACJ,wFAAwF,QAAQ,EAD5F,CAAN;AAGD;;AACD,SAAO,IAAI,UAAJ,CAAe,IAAf,CAAP;AACD,CARa;;AAUA,UAAA,CAAA,QAAA,GAAY,YAAD,IAAyB;AAChD,QAAM,QAAQ,GAAG,KAAA,CAAA,gBAAA,CAAiB,YAAjB,CAAjB;AACA,SAAO,UAAU,CAAC,YAAX,CAAwB,QAAxB,CAAP;AACD,CAHa","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoPSBT = void 0;\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nclass CryptoPSBT extends RegistryItem_1.RegistryItem {\n    constructor(psbt) {\n        super();\n        this.psbt = psbt;\n        this.getRegistryType = () => RegistryType_1.RegistryTypes.CRYPTO_PSBT;\n        this.getPSBT = () => this.psbt;\n        this.toDataItem = () => {\n            return new lib_1.DataItem(this.psbt);\n        };\n    }\n}\nexports.CryptoPSBT = CryptoPSBT;\nCryptoPSBT.fromDataItem = (dataItem) => {\n    const psbt = dataItem.getData();\n    if (!psbt) {\n        throw new Error(`#[ur-registry][CryptoPSBT][fn.fromDataItem]: decoded [dataItem][#data] is undefined: ${dataItem}`);\n    }\n    return new CryptoPSBT(psbt);\n};\nCryptoPSBT.fromCBOR = (_cborPayload) => {\n    const dataItem = lib_1.decodeToDataItem(_cborPayload);\n    return CryptoPSBT.fromDataItem(dataItem);\n};\n//# sourceMappingURL=CryptoPSBT.js.map"]},"metadata":{},"sourceType":"script"}