{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URRegistryDecoder = void 0;\n\nconst bc_ur_1 = require(\"@ngraveio/bc-ur\");\n\nconst __1 = require(\"..\");\n\nconst RegistryType_1 = require(\"../RegistryType\");\n\nclass URRegistryDecoder extends bc_ur_1.URDecoder {\n  constructor() {\n    super(...arguments);\n\n    this.resultRegistryType = () => {\n      const ur = this.resultUR();\n\n      switch (ur.type) {\n        case RegistryType_1.RegistryTypes.BYTES.getType():\n          return __1.Bytes.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getType():\n          return __1.CryptoHDKey.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_KEYPATH.getType():\n          return __1.CryptoKeypath.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO.getType():\n          return __1.CryptoCoinInfo.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getType():\n          return __1.CryptoECKey.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_OUTPUT.getType():\n          return __1.CryptoOutput.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_PSBT.getType():\n          return __1.CryptoPSBT.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_ACCOUNT.getType():\n          return __1.CryptoAccount.fromCBOR(ur.cbor);\n\n        default:\n          throw new Error(`#[ur-registry][Decoder][fn.resultRegistryType]: registry type ${ur.type} is not supported now`);\n      }\n    };\n  }\n\n}\n\nexports.URRegistryDecoder = URRegistryDecoder;","map":{"version":3,"sources":["../../src/Decoder/index.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,GAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AAUA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,MAAa,iBAAb,SAAuC,OAAA,CAAA,SAAvC,CAAgD;AAAhD,EAAA,WAAA,GAAA;;;AACS,SAAA,kBAAA,GAAqB,MAAK;AAC/B,YAAM,EAAE,GAAG,KAAK,QAAL,EAAX;;AACA,cAAQ,EAAE,CAAC,IAAX;AACE,aAAK,cAAA,CAAA,aAAA,CAAc,KAAd,CAAoB,OAApB,EAAL;AACE,iBAAO,GAAA,CAAA,KAAA,CAAM,QAAN,CAAe,EAAE,CAAC,IAAlB,CAAP;;AACF,aAAK,cAAA,CAAA,aAAA,CAAc,YAAd,CAA2B,OAA3B,EAAL;AACE,iBAAO,GAAA,CAAA,WAAA,CAAY,QAAZ,CAAqB,EAAE,CAAC,IAAxB,CAAP;;AACF,aAAK,cAAA,CAAA,aAAA,CAAc,cAAd,CAA6B,OAA7B,EAAL;AACE,iBAAO,GAAA,CAAA,aAAA,CAAc,QAAd,CAAuB,EAAE,CAAC,IAA1B,CAAP;;AACF,aAAK,cAAA,CAAA,aAAA,CAAc,gBAAd,CAA+B,OAA/B,EAAL;AACE,iBAAO,GAAA,CAAA,cAAA,CAAe,QAAf,CAAwB,EAAE,CAAC,IAA3B,CAAP;;AACF,aAAK,cAAA,CAAA,aAAA,CAAc,YAAd,CAA2B,OAA3B,EAAL;AACE,iBAAO,GAAA,CAAA,WAAA,CAAY,QAAZ,CAAqB,EAAE,CAAC,IAAxB,CAAP;;AACF,aAAK,cAAA,CAAA,aAAA,CAAc,aAAd,CAA4B,OAA5B,EAAL;AACE,iBAAO,GAAA,CAAA,YAAA,CAAa,QAAb,CAAsB,EAAE,CAAC,IAAzB,CAAP;;AACF,aAAK,cAAA,CAAA,aAAA,CAAc,WAAd,CAA0B,OAA1B,EAAL;AACE,iBAAO,GAAA,CAAA,UAAA,CAAW,QAAX,CAAoB,EAAE,CAAC,IAAvB,CAAP;;AACF,aAAK,cAAA,CAAA,aAAA,CAAc,cAAd,CAA6B,OAA7B,EAAL;AACE,iBAAO,GAAA,CAAA,aAAA,CAAc,QAAd,CAAuB,EAAE,CAAC,IAA1B,CAAP;;AACF;AACE,gBAAM,IAAI,KAAJ,CACJ,iEAAiE,EAAE,CAAC,IAAI,uBADpE,CAAN;AAlBJ;AAsBD,KAxBM;AAyBR;;AA1B+C;;AAAhD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.URRegistryDecoder = void 0;\nconst bc_ur_1 = require(\"@ngraveio/bc-ur\");\nconst __1 = require(\"..\");\nconst RegistryType_1 = require(\"../RegistryType\");\nclass URRegistryDecoder extends bc_ur_1.URDecoder {\n    constructor() {\n        super(...arguments);\n        this.resultRegistryType = () => {\n            const ur = this.resultUR();\n            switch (ur.type) {\n                case RegistryType_1.RegistryTypes.BYTES.getType():\n                    return __1.Bytes.fromCBOR(ur.cbor);\n                case RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getType():\n                    return __1.CryptoHDKey.fromCBOR(ur.cbor);\n                case RegistryType_1.RegistryTypes.CRYPTO_KEYPATH.getType():\n                    return __1.CryptoKeypath.fromCBOR(ur.cbor);\n                case RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO.getType():\n                    return __1.CryptoCoinInfo.fromCBOR(ur.cbor);\n                case RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getType():\n                    return __1.CryptoECKey.fromCBOR(ur.cbor);\n                case RegistryType_1.RegistryTypes.CRYPTO_OUTPUT.getType():\n                    return __1.CryptoOutput.fromCBOR(ur.cbor);\n                case RegistryType_1.RegistryTypes.CRYPTO_PSBT.getType():\n                    return __1.CryptoPSBT.fromCBOR(ur.cbor);\n                case RegistryType_1.RegistryTypes.CRYPTO_ACCOUNT.getType():\n                    return __1.CryptoAccount.fromCBOR(ur.cbor);\n                default:\n                    throw new Error(`#[ur-registry][Decoder][fn.resultRegistryType]: registry type ${ur.type} is not supported now`);\n            }\n        };\n    }\n}\nexports.URRegistryDecoder = URRegistryDecoder;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}