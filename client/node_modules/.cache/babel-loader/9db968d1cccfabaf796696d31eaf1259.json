{"ast":null,"code":"// source: messages-ripple.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\n\nvar global = function () {\n  return this;\n}.call(null);\n\ngoog.exportSymbol('proto.RippleAddress', null, global);\ngoog.exportSymbol('proto.RippleGetAddress', null, global);\ngoog.exportSymbol('proto.RipplePayment', null, global);\ngoog.exportSymbol('proto.RippleSignTx', null, global);\ngoog.exportSymbol('proto.RippleSignedTx', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.RippleGetAddress = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.RippleGetAddress.repeatedFields_, null);\n};\n\ngoog.inherits(proto.RippleGetAddress, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RippleGetAddress.displayName = 'proto.RippleGetAddress';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.RippleAddress = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.RippleAddress, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RippleAddress.displayName = 'proto.RippleAddress';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.RippleSignTx = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.RippleSignTx.repeatedFields_, null);\n};\n\ngoog.inherits(proto.RippleSignTx, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RippleSignTx.displayName = 'proto.RippleSignTx';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.RipplePayment = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.RipplePayment, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RipplePayment.displayName = 'proto.RipplePayment';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.RippleSignedTx = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.RippleSignedTx, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RippleSignedTx.displayName = 'proto.RippleSignedTx';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.RippleGetAddress.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.RippleGetAddress.prototype.toObject = function (opt_includeInstance) {\n    return proto.RippleGetAddress.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.RippleGetAddress} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.RippleGetAddress.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n      showDisplay: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RippleGetAddress}\n */\n\n\nproto.RippleGetAddress.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RippleGetAddress();\n  return proto.RippleGetAddress.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RippleGetAddress} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RippleGetAddress}\n */\n\n\nproto.RippleGetAddress.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];\n\n        for (var i = 0; i < values.length; i++) {\n          msg.addAddressN(values[i]);\n        }\n\n        break;\n\n      case 2:\n        var value = reader.readBool();\n        msg.setShowDisplay(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.RippleGetAddress.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.RippleGetAddress.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RippleGetAddress} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.RippleGetAddress.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getAddressNList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(1, f);\n  }\n\n  f = jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBool(2, f);\n  }\n};\n/**\n * repeated uint32 address_n = 1;\n * @return {!Array<number>}\n */\n\n\nproto.RippleGetAddress.prototype.getAddressNList = function () {\n  return jspb.Message.getRepeatedField(this, 1);\n};\n/**\n * @param {!Array<number>} value\n * @return {!proto.RippleGetAddress} returns this\n */\n\n\nproto.RippleGetAddress.prototype.setAddressNList = function (value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.RippleGetAddress} returns this\n */\n\n\nproto.RippleGetAddress.prototype.addAddressN = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.RippleGetAddress} returns this\n */\n\n\nproto.RippleGetAddress.prototype.clearAddressNList = function () {\n  return this.setAddressNList([]);\n};\n/**\n * optional bool show_display = 2;\n * @return {boolean}\n */\n\n\nproto.RippleGetAddress.prototype.getShowDisplay = function () {\n  return jspb.Message.getBooleanFieldWithDefault(this, 2, false);\n};\n/**\n * @param {boolean} value\n * @return {!proto.RippleGetAddress} returns this\n */\n\n\nproto.RippleGetAddress.prototype.setShowDisplay = function (value) {\n  return jspb.Message.setField(this, 2, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleGetAddress} returns this\n */\n\n\nproto.RippleGetAddress.prototype.clearShowDisplay = function () {\n  return jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RippleGetAddress.prototype.hasShowDisplay = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.RippleAddress.prototype.toObject = function (opt_includeInstance) {\n    return proto.RippleAddress.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.RippleAddress} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.RippleAddress.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      address: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RippleAddress}\n */\n\n\nproto.RippleAddress.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RippleAddress();\n  return proto.RippleAddress.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RippleAddress} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RippleAddress}\n */\n\n\nproto.RippleAddress.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = reader.readString();\n        msg.setAddress(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.RippleAddress.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.RippleAddress.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RippleAddress} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.RippleAddress.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string address = 1;\n * @return {string}\n */\n\n\nproto.RippleAddress.prototype.getAddress = function () {\n  return jspb.Message.getFieldWithDefault(this, 1, \"\");\n};\n/**\n * @param {string} value\n * @return {!proto.RippleAddress} returns this\n */\n\n\nproto.RippleAddress.prototype.setAddress = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleAddress} returns this\n */\n\n\nproto.RippleAddress.prototype.clearAddress = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RippleAddress.prototype.hasAddress = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.RippleSignTx.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.RippleSignTx.prototype.toObject = function (opt_includeInstance) {\n    return proto.RippleSignTx.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.RippleSignTx} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.RippleSignTx.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n      fee: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n      flags: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n      sequence: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,\n      lastLedgerSequence: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,\n      payment: (f = msg.getPayment()) && proto.RipplePayment.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RippleSignTx}\n */\n\n\nproto.RippleSignTx.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RippleSignTx();\n  return proto.RippleSignTx.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RippleSignTx} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RippleSignTx}\n */\n\n\nproto.RippleSignTx.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];\n\n        for (var i = 0; i < values.length; i++) {\n          msg.addAddressN(values[i]);\n        }\n\n        break;\n\n      case 2:\n        var value = reader.readUint64();\n        msg.setFee(value);\n        break;\n\n      case 3:\n        var value = reader.readUint32();\n        msg.setFlags(value);\n        break;\n\n      case 4:\n        var value = reader.readUint32();\n        msg.setSequence(value);\n        break;\n\n      case 5:\n        var value = reader.readUint32();\n        msg.setLastLedgerSequence(value);\n        break;\n\n      case 6:\n        var value = new proto.RipplePayment();\n        reader.readMessage(value, proto.RipplePayment.deserializeBinaryFromReader);\n        msg.setPayment(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.RippleSignTx.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.RippleSignTx.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RippleSignTx} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.RippleSignTx.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getAddressNList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(1, f);\n  }\n\n  f = jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeUint64(2, f);\n  }\n\n  f = jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeUint32(3, f);\n  }\n\n  f = jspb.Message.getField(message, 4);\n\n  if (f != null) {\n    writer.writeUint32(4, f);\n  }\n\n  f = jspb.Message.getField(message, 5);\n\n  if (f != null) {\n    writer.writeUint32(5, f);\n  }\n\n  f = message.getPayment();\n\n  if (f != null) {\n    writer.writeMessage(6, f, proto.RipplePayment.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated uint32 address_n = 1;\n * @return {!Array<number>}\n */\n\n\nproto.RippleSignTx.prototype.getAddressNList = function () {\n  return jspb.Message.getRepeatedField(this, 1);\n};\n/**\n * @param {!Array<number>} value\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.setAddressNList = function (value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.addAddressN = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.clearAddressNList = function () {\n  return this.setAddressNList([]);\n};\n/**\n * optional uint64 fee = 2;\n * @return {number}\n */\n\n\nproto.RippleSignTx.prototype.getFee = function () {\n  return jspb.Message.getFieldWithDefault(this, 2, 0);\n};\n/**\n * @param {number} value\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.setFee = function (value) {\n  return jspb.Message.setField(this, 2, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.clearFee = function () {\n  return jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RippleSignTx.prototype.hasFee = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional uint32 flags = 3;\n * @return {number}\n */\n\n\nproto.RippleSignTx.prototype.getFlags = function () {\n  return jspb.Message.getFieldWithDefault(this, 3, 0);\n};\n/**\n * @param {number} value\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.setFlags = function (value) {\n  return jspb.Message.setField(this, 3, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.clearFlags = function () {\n  return jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RippleSignTx.prototype.hasFlags = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional uint32 sequence = 4;\n * @return {number}\n */\n\n\nproto.RippleSignTx.prototype.getSequence = function () {\n  return jspb.Message.getFieldWithDefault(this, 4, 0);\n};\n/**\n * @param {number} value\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.setSequence = function (value) {\n  return jspb.Message.setField(this, 4, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.clearSequence = function () {\n  return jspb.Message.setField(this, 4, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RippleSignTx.prototype.hasSequence = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * optional uint32 last_ledger_sequence = 5;\n * @return {number}\n */\n\n\nproto.RippleSignTx.prototype.getLastLedgerSequence = function () {\n  return jspb.Message.getFieldWithDefault(this, 5, 0);\n};\n/**\n * @param {number} value\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.setLastLedgerSequence = function (value) {\n  return jspb.Message.setField(this, 5, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.clearLastLedgerSequence = function () {\n  return jspb.Message.setField(this, 5, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RippleSignTx.prototype.hasLastLedgerSequence = function () {\n  return jspb.Message.getField(this, 5) != null;\n};\n/**\n * optional RipplePayment payment = 6;\n * @return {?proto.RipplePayment}\n */\n\n\nproto.RippleSignTx.prototype.getPayment = function () {\n  return jspb.Message.getWrapperField(this, proto.RipplePayment, 6);\n};\n/**\n * @param {?proto.RipplePayment|undefined} value\n * @return {!proto.RippleSignTx} returns this\n*/\n\n\nproto.RippleSignTx.prototype.setPayment = function (value) {\n  return jspb.Message.setWrapperField(this, 6, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\n\n\nproto.RippleSignTx.prototype.clearPayment = function () {\n  return this.setPayment(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RippleSignTx.prototype.hasPayment = function () {\n  return jspb.Message.getField(this, 6) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.RipplePayment.prototype.toObject = function (opt_includeInstance) {\n    return proto.RipplePayment.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.RipplePayment} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.RipplePayment.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      amount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n      destination: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n      destinationTag: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RipplePayment}\n */\n\n\nproto.RipplePayment.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RipplePayment();\n  return proto.RipplePayment.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RipplePayment} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RipplePayment}\n */\n\n\nproto.RipplePayment.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = reader.readUint64();\n        msg.setAmount(value);\n        break;\n\n      case 2:\n        var value = reader.readString();\n        msg.setDestination(value);\n        break;\n\n      case 3:\n        var value = reader.readUint32();\n        msg.setDestinationTag(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.RipplePayment.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.RipplePayment.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RipplePayment} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.RipplePayment.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeUint64(1, f);\n  }\n\n  f = jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeString(2, f);\n  }\n\n  f = jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeUint32(3, f);\n  }\n};\n/**\n * optional uint64 amount = 1;\n * @return {number}\n */\n\n\nproto.RipplePayment.prototype.getAmount = function () {\n  return jspb.Message.getFieldWithDefault(this, 1, 0);\n};\n/**\n * @param {number} value\n * @return {!proto.RipplePayment} returns this\n */\n\n\nproto.RipplePayment.prototype.setAmount = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RipplePayment} returns this\n */\n\n\nproto.RipplePayment.prototype.clearAmount = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RipplePayment.prototype.hasAmount = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional string destination = 2;\n * @return {string}\n */\n\n\nproto.RipplePayment.prototype.getDestination = function () {\n  return jspb.Message.getFieldWithDefault(this, 2, \"\");\n};\n/**\n * @param {string} value\n * @return {!proto.RipplePayment} returns this\n */\n\n\nproto.RipplePayment.prototype.setDestination = function (value) {\n  return jspb.Message.setField(this, 2, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RipplePayment} returns this\n */\n\n\nproto.RipplePayment.prototype.clearDestination = function () {\n  return jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RipplePayment.prototype.hasDestination = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional uint32 destination_tag = 3;\n * @return {number}\n */\n\n\nproto.RipplePayment.prototype.getDestinationTag = function () {\n  return jspb.Message.getFieldWithDefault(this, 3, 0);\n};\n/**\n * @param {number} value\n * @return {!proto.RipplePayment} returns this\n */\n\n\nproto.RipplePayment.prototype.setDestinationTag = function (value) {\n  return jspb.Message.setField(this, 3, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RipplePayment} returns this\n */\n\n\nproto.RipplePayment.prototype.clearDestinationTag = function () {\n  return jspb.Message.setField(this, 3, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RipplePayment.prototype.hasDestinationTag = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.RippleSignedTx.prototype.toObject = function (opt_includeInstance) {\n    return proto.RippleSignedTx.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.RippleSignedTx} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.RippleSignedTx.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      signature: msg.getSignature_asB64(),\n      serializedTx: msg.getSerializedTx_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RippleSignedTx}\n */\n\n\nproto.RippleSignedTx.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RippleSignedTx();\n  return proto.RippleSignedTx.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RippleSignedTx} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RippleSignedTx}\n */\n\n\nproto.RippleSignedTx.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = reader.readBytes();\n        msg.setSignature(value);\n        break;\n\n      case 2:\n        var value = reader.readBytes();\n        msg.setSerializedTx(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.RippleSignedTx.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.RippleSignedTx.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RippleSignedTx} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.RippleSignedTx.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeBytes(1, f);\n  }\n\n  f = jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBytes(2, f);\n  }\n};\n/**\n * optional bytes signature = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.RippleSignedTx.prototype.getSignature = function () {\n  return jspb.Message.getFieldWithDefault(this, 1, \"\");\n};\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\n\n\nproto.RippleSignedTx.prototype.getSignature_asB64 = function () {\n  return jspb.Message.bytesAsB64(this.getSignature());\n};\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\n\n\nproto.RippleSignedTx.prototype.getSignature_asU8 = function () {\n  return jspb.Message.bytesAsU8(this.getSignature());\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.RippleSignedTx} returns this\n */\n\n\nproto.RippleSignedTx.prototype.setSignature = function (value) {\n  return jspb.Message.setField(this, 1, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignedTx} returns this\n */\n\n\nproto.RippleSignedTx.prototype.clearSignature = function () {\n  return jspb.Message.setField(this, 1, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RippleSignedTx.prototype.hasSignature = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional bytes serialized_tx = 2;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.RippleSignedTx.prototype.getSerializedTx = function () {\n  return jspb.Message.getFieldWithDefault(this, 2, \"\");\n};\n/**\n * optional bytes serialized_tx = 2;\n * This is a type-conversion wrapper around `getSerializedTx()`\n * @return {string}\n */\n\n\nproto.RippleSignedTx.prototype.getSerializedTx_asB64 = function () {\n  return jspb.Message.bytesAsB64(this.getSerializedTx());\n};\n/**\n * optional bytes serialized_tx = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSerializedTx()`\n * @return {!Uint8Array}\n */\n\n\nproto.RippleSignedTx.prototype.getSerializedTx_asU8 = function () {\n  return jspb.Message.bytesAsU8(this.getSerializedTx());\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.RippleSignedTx} returns this\n */\n\n\nproto.RippleSignedTx.prototype.setSerializedTx = function (value) {\n  return jspb.Message.setField(this, 2, value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignedTx} returns this\n */\n\n\nproto.RippleSignedTx.prototype.clearSerializedTx = function () {\n  return jspb.Message.setField(this, 2, undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.RippleSignedTx.prototype.hasSerializedTx = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n\ngoog.object.extend(exports, proto);","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/@keepkey/device-protocol/lib/messages-ripple_pb.js"],"names":["jspb","require","goog","global","call","exportSymbol","proto","RippleGetAddress","opt_data","Message","initialize","repeatedFields_","inherits","DEBUG","COMPILED","displayName","RippleAddress","RippleSignTx","RipplePayment","RippleSignedTx","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","addressNList","getRepeatedField","undefined","showDisplay","getBooleanField","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","values","isDelimited","readPackedUint32","readUint32","i","length","addAddressN","value","readBool","setShowDisplay","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","getAddressNList","writeRepeatedUint32","getField","writeBool","setAddressNList","setField","opt_index","addToRepeatedField","clearAddressNList","getShowDisplay","getBooleanFieldWithDefault","clearShowDisplay","hasShowDisplay","address","readString","setAddress","writeString","getAddress","getFieldWithDefault","clearAddress","hasAddress","fee","flags","sequence","lastLedgerSequence","payment","getPayment","readUint64","setFee","setFlags","setSequence","setLastLedgerSequence","readMessage","setPayment","writeUint64","writeUint32","writeMessage","getFee","clearFee","hasFee","getFlags","clearFlags","hasFlags","getSequence","clearSequence","hasSequence","getLastLedgerSequence","clearLastLedgerSequence","hasLastLedgerSequence","getWrapperField","setWrapperField","clearPayment","hasPayment","amount","destination","destinationTag","setAmount","setDestination","setDestinationTag","getAmount","clearAmount","hasAmount","getDestination","clearDestination","hasDestination","getDestinationTag","clearDestinationTag","hasDestinationTag","signature","getSignature_asB64","serializedTx","getSerializedTx_asB64","readBytes","setSignature","setSerializedTx","writeBytes","getSignature","bytesAsB64","getSignature_asU8","bytesAsU8","clearSignature","hasSignature","getSerializedTx","getSerializedTx_asU8","clearSerializedTx","hasSerializedTx","object","extend","exports"],"mappings":"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","sourcesContent":["// source: messages-ripple.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function(){ return this }).call(null);\n\ngoog.exportSymbol('proto.RippleAddress', null, global);\ngoog.exportSymbol('proto.RippleGetAddress', null, global);\ngoog.exportSymbol('proto.RipplePayment', null, global);\ngoog.exportSymbol('proto.RippleSignTx', null, global);\ngoog.exportSymbol('proto.RippleSignedTx', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.RippleGetAddress = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.RippleGetAddress.repeatedFields_, null);\n};\ngoog.inherits(proto.RippleGetAddress, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RippleGetAddress.displayName = 'proto.RippleGetAddress';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.RippleAddress = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.RippleAddress, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RippleAddress.displayName = 'proto.RippleAddress';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.RippleSignTx = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.RippleSignTx.repeatedFields_, null);\n};\ngoog.inherits(proto.RippleSignTx, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RippleSignTx.displayName = 'proto.RippleSignTx';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.RipplePayment = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.RipplePayment, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RipplePayment.displayName = 'proto.RipplePayment';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.RippleSignedTx = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.RippleSignedTx, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.RippleSignedTx.displayName = 'proto.RippleSignedTx';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.RippleGetAddress.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.RippleGetAddress.prototype.toObject = function(opt_includeInstance) {\n  return proto.RippleGetAddress.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.RippleGetAddress} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RippleGetAddress.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    showDisplay: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RippleGetAddress}\n */\nproto.RippleGetAddress.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RippleGetAddress;\n  return proto.RippleGetAddress.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RippleGetAddress} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RippleGetAddress}\n */\nproto.RippleGetAddress.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addAddressN(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setShowDisplay(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.RippleGetAddress.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.RippleGetAddress.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RippleGetAddress} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RippleGetAddress.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAddressNList();\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(\n      1,\n      f\n    );\n  }\n  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 address_n = 1;\n * @return {!Array<number>}\n */\nproto.RippleGetAddress.prototype.getAddressNList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.RippleGetAddress} returns this\n */\nproto.RippleGetAddress.prototype.setAddressNList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.RippleGetAddress} returns this\n */\nproto.RippleGetAddress.prototype.addAddressN = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.RippleGetAddress} returns this\n */\nproto.RippleGetAddress.prototype.clearAddressNList = function() {\n  return this.setAddressNList([]);\n};\n\n\n/**\n * optional bool show_display = 2;\n * @return {boolean}\n */\nproto.RippleGetAddress.prototype.getShowDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.RippleGetAddress} returns this\n */\nproto.RippleGetAddress.prototype.setShowDisplay = function(value) {\n  return jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleGetAddress} returns this\n */\nproto.RippleGetAddress.prototype.clearShowDisplay = function() {\n  return jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RippleGetAddress.prototype.hasShowDisplay = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.RippleAddress.prototype.toObject = function(opt_includeInstance) {\n  return proto.RippleAddress.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.RippleAddress} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RippleAddress.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    address: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RippleAddress}\n */\nproto.RippleAddress.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RippleAddress;\n  return proto.RippleAddress.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RippleAddress} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RippleAddress}\n */\nproto.RippleAddress.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAddress(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.RippleAddress.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.RippleAddress.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RippleAddress} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RippleAddress.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string address = 1;\n * @return {string}\n */\nproto.RippleAddress.prototype.getAddress = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.RippleAddress} returns this\n */\nproto.RippleAddress.prototype.setAddress = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleAddress} returns this\n */\nproto.RippleAddress.prototype.clearAddress = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RippleAddress.prototype.hasAddress = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.RippleSignTx.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.RippleSignTx.prototype.toObject = function(opt_includeInstance) {\n  return proto.RippleSignTx.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.RippleSignTx} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RippleSignTx.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    fee: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n    flags: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n    sequence: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,\n    lastLedgerSequence: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,\n    payment: (f = msg.getPayment()) && proto.RipplePayment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RippleSignTx}\n */\nproto.RippleSignTx.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RippleSignTx;\n  return proto.RippleSignTx.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RippleSignTx} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RippleSignTx}\n */\nproto.RippleSignTx.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addAddressN(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setFee(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setFlags(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setSequence(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setLastLedgerSequence(value);\n      break;\n    case 6:\n      var value = new proto.RipplePayment;\n      reader.readMessage(value,proto.RipplePayment.deserializeBinaryFromReader);\n      msg.setPayment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.RippleSignTx.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.RippleSignTx.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RippleSignTx} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RippleSignTx.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAddressNList();\n  if (f.length > 0) {\n    writer.writeRepeatedUint32(\n      1,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n  if (f != null) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 5));\n  if (f != null) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getPayment();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      proto.RipplePayment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated uint32 address_n = 1;\n * @return {!Array<number>}\n */\nproto.RippleSignTx.prototype.getAddressNList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.setAddressNList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.addAddressN = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.clearAddressNList = function() {\n  return this.setAddressNList([]);\n};\n\n\n/**\n * optional uint64 fee = 2;\n * @return {number}\n */\nproto.RippleSignTx.prototype.getFee = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.setFee = function(value) {\n  return jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.clearFee = function() {\n  return jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RippleSignTx.prototype.hasFee = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional uint32 flags = 3;\n * @return {number}\n */\nproto.RippleSignTx.prototype.getFlags = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.setFlags = function(value) {\n  return jspb.Message.setField(this, 3, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.clearFlags = function() {\n  return jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RippleSignTx.prototype.hasFlags = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional uint32 sequence = 4;\n * @return {number}\n */\nproto.RippleSignTx.prototype.getSequence = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.setSequence = function(value) {\n  return jspb.Message.setField(this, 4, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.clearSequence = function() {\n  return jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RippleSignTx.prototype.hasSequence = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional uint32 last_ledger_sequence = 5;\n * @return {number}\n */\nproto.RippleSignTx.prototype.getLastLedgerSequence = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.setLastLedgerSequence = function(value) {\n  return jspb.Message.setField(this, 5, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.clearLastLedgerSequence = function() {\n  return jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RippleSignTx.prototype.hasLastLedgerSequence = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional RipplePayment payment = 6;\n * @return {?proto.RipplePayment}\n */\nproto.RippleSignTx.prototype.getPayment = function() {\n  return /** @type{?proto.RipplePayment} */ (\n    jspb.Message.getWrapperField(this, proto.RipplePayment, 6));\n};\n\n\n/**\n * @param {?proto.RipplePayment|undefined} value\n * @return {!proto.RippleSignTx} returns this\n*/\nproto.RippleSignTx.prototype.setPayment = function(value) {\n  return jspb.Message.setWrapperField(this, 6, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.RippleSignTx} returns this\n */\nproto.RippleSignTx.prototype.clearPayment = function() {\n  return this.setPayment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RippleSignTx.prototype.hasPayment = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.RipplePayment.prototype.toObject = function(opt_includeInstance) {\n  return proto.RipplePayment.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.RipplePayment} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RipplePayment.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    amount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n    destination: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n    destinationTag: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RipplePayment}\n */\nproto.RipplePayment.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RipplePayment;\n  return proto.RipplePayment.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RipplePayment} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RipplePayment}\n */\nproto.RipplePayment.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setAmount(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDestination(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setDestinationTag(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.RipplePayment.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.RipplePayment.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RipplePayment} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RipplePayment.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 amount = 1;\n * @return {number}\n */\nproto.RipplePayment.prototype.getAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.RipplePayment} returns this\n */\nproto.RipplePayment.prototype.setAmount = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RipplePayment} returns this\n */\nproto.RipplePayment.prototype.clearAmount = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RipplePayment.prototype.hasAmount = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional string destination = 2;\n * @return {string}\n */\nproto.RipplePayment.prototype.getDestination = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.RipplePayment} returns this\n */\nproto.RipplePayment.prototype.setDestination = function(value) {\n  return jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RipplePayment} returns this\n */\nproto.RipplePayment.prototype.clearDestination = function() {\n  return jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RipplePayment.prototype.hasDestination = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional uint32 destination_tag = 3;\n * @return {number}\n */\nproto.RipplePayment.prototype.getDestinationTag = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.RipplePayment} returns this\n */\nproto.RipplePayment.prototype.setDestinationTag = function(value) {\n  return jspb.Message.setField(this, 3, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RipplePayment} returns this\n */\nproto.RipplePayment.prototype.clearDestinationTag = function() {\n  return jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RipplePayment.prototype.hasDestinationTag = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.RippleSignedTx.prototype.toObject = function(opt_includeInstance) {\n  return proto.RippleSignedTx.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.RippleSignedTx} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RippleSignedTx.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    signature: msg.getSignature_asB64(),\n    serializedTx: msg.getSerializedTx_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.RippleSignedTx}\n */\nproto.RippleSignedTx.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.RippleSignedTx;\n  return proto.RippleSignedTx.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.RippleSignedTx} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.RippleSignedTx}\n */\nproto.RippleSignedTx.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSerializedTx(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.RippleSignedTx.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.RippleSignedTx.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.RippleSignedTx} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.RippleSignedTx.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes signature = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.RippleSignedTx.prototype.getSignature = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.RippleSignedTx.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.RippleSignedTx.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.RippleSignedTx} returns this\n */\nproto.RippleSignedTx.prototype.setSignature = function(value) {\n  return jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignedTx} returns this\n */\nproto.RippleSignedTx.prototype.clearSignature = function() {\n  return jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RippleSignedTx.prototype.hasSignature = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional bytes serialized_tx = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.RippleSignedTx.prototype.getSerializedTx = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes serialized_tx = 2;\n * This is a type-conversion wrapper around `getSerializedTx()`\n * @return {string}\n */\nproto.RippleSignedTx.prototype.getSerializedTx_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSerializedTx()));\n};\n\n\n/**\n * optional bytes serialized_tx = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSerializedTx()`\n * @return {!Uint8Array}\n */\nproto.RippleSignedTx.prototype.getSerializedTx_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSerializedTx()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.RippleSignedTx} returns this\n */\nproto.RippleSignedTx.prototype.setSerializedTx = function(value) {\n  return jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.RippleSignedTx} returns this\n */\nproto.RippleSignedTx.prototype.clearSerializedTx = function() {\n  return jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.RippleSignedTx.prototype.hasSerializedTx = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\ngoog.object.extend(exports, proto);\n"]},"metadata":{},"sourceType":"script"}