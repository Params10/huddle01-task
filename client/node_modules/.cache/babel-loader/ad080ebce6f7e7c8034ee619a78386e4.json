{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\n\nfunction getRtpEncodings({\n  offerMediaObject,\n  track\n}) {\n  // First media SSRC (or the only one).\n  let firstSsrc;\n  const ssrcs = new Set();\n\n  for (const line of offerMediaObject.ssrcs || []) {\n    if (line.attribute !== 'msid') continue;\n    const trackId = line.value.split(' ')[1];\n\n    if (trackId === track.id) {\n      const ssrc = line.id;\n      ssrcs.add(ssrc);\n      if (!firstSsrc) firstSsrc = ssrc;\n    }\n  }\n\n  if (ssrcs.size === 0) throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n  const ssrcToRtxSsrc = new Map(); // First assume RTX is used.\n\n  for (const line of offerMediaObject.ssrcGroups || []) {\n    if (line.semantics !== 'FID') continue;\n    let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n    ssrc = Number(ssrc);\n    rtxSsrc = Number(rtxSsrc);\n\n    if (ssrcs.has(ssrc)) {\n      // Remove both the SSRC and RTX SSRC from the set so later we know that they\n      // are already handled.\n      ssrcs.delete(ssrc);\n      ssrcs.delete(rtxSsrc); // Add to the map.\n\n      ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n    }\n  } // If the set of SSRCs is not empty it means that RTX is not being used, so take\n  // media SSRCs from there.\n\n\n  for (const ssrc of ssrcs) {\n    // Add to the map.\n    ssrcToRtxSsrc.set(ssrc, null);\n  }\n\n  const encodings = [];\n\n  for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n    const encoding = {\n      ssrc\n    };\n    if (rtxSsrc) encoding.rtx = {\n      ssrc: rtxSsrc\n    };\n    encodings.push(encoding);\n  }\n\n  return encodings;\n}\n\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\n\nfunction addLegacySimulcast({\n  offerMediaObject,\n  track,\n  numStreams\n}) {\n  if (numStreams <= 1) throw new TypeError('numStreams must be greater than 1');\n  let firstSsrc;\n  let firstRtxSsrc;\n  let streamId; // Get the SSRC.\n\n  const ssrcMsidLine = (offerMediaObject.ssrcs || []).find(line => {\n    if (line.attribute !== 'msid') return false;\n    const trackId = line.value.split(' ')[1];\n\n    if (trackId === track.id) {\n      firstSsrc = line.id;\n      streamId = line.value.split(' ')[0];\n      return true;\n    } else {\n      return false;\n    }\n  });\n  if (!ssrcMsidLine) throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`); // Get the SSRC for RTX.\n\n  (offerMediaObject.ssrcGroups || []).some(line => {\n    if (line.semantics !== 'FID') return false;\n    const ssrcs = line.ssrcs.split(/\\s+/);\n\n    if (Number(ssrcs[0]) === firstSsrc) {\n      firstRtxSsrc = Number(ssrcs[1]);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  const ssrcCnameLine = offerMediaObject.ssrcs.find(line => line.attribute === 'cname' && line.id === firstSsrc);\n  if (!ssrcCnameLine) throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);\n  const cname = ssrcCnameLine.value;\n  const ssrcs = [];\n  const rtxSsrcs = [];\n\n  for (let i = 0; i < numStreams; ++i) {\n    ssrcs.push(firstSsrc + i);\n    if (firstRtxSsrc) rtxSsrcs.push(firstRtxSsrc + i);\n  }\n\n  offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];\n  offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];\n  offerMediaObject.ssrcGroups.push({\n    semantics: 'SIM',\n    ssrcs: ssrcs.join(' ')\n  });\n\n  for (let i = 0; i < ssrcs.length; ++i) {\n    const ssrc = ssrcs[i];\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: `${streamId} ${track.id}`\n    });\n  }\n\n  for (let i = 0; i < rtxSsrcs.length; ++i) {\n    const ssrc = ssrcs[i];\n    const rtxSsrc = rtxSsrcs[i];\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'msid',\n      value: `${streamId} ${track.id}`\n    });\n    offerMediaObject.ssrcGroups.push({\n      semantics: 'FID',\n      ssrcs: `${ssrc} ${rtxSsrc}`\n    });\n  }\n}\n\nexports.addLegacySimulcast = addLegacySimulcast;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js"],"names":["Object","defineProperty","exports","value","addLegacySimulcast","getRtpEncodings","offerMediaObject","track","firstSsrc","ssrcs","Set","line","attribute","trackId","split","id","ssrc","add","size","Error","ssrcToRtxSsrc","Map","ssrcGroups","semantics","rtxSsrc","Number","has","delete","set","encodings","encoding","rtx","push","numStreams","TypeError","firstRtxSsrc","streamId","ssrcMsidLine","find","some","ssrcCnameLine","cname","rtxSsrcs","i","join","length"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\nfunction getRtpEncodings({ offerMediaObject, track }) {\n    // First media SSRC (or the only one).\n    let firstSsrc;\n    const ssrcs = new Set();\n    for (const line of offerMediaObject.ssrcs || []) {\n        if (line.attribute !== 'msid')\n            continue;\n        const trackId = line.value.split(' ')[1];\n        if (trackId === track.id) {\n            const ssrc = line.id;\n            ssrcs.add(ssrc);\n            if (!firstSsrc)\n                firstSsrc = ssrc;\n        }\n    }\n    if (ssrcs.size === 0)\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n    const ssrcToRtxSsrc = new Map();\n    // First assume RTX is used.\n    for (const line of offerMediaObject.ssrcGroups || []) {\n        if (line.semantics !== 'FID')\n            continue;\n        let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n        ssrc = Number(ssrc);\n        rtxSsrc = Number(rtxSsrc);\n        if (ssrcs.has(ssrc)) {\n            // Remove both the SSRC and RTX SSRC from the set so later we know that they\n            // are already handled.\n            ssrcs.delete(ssrc);\n            ssrcs.delete(rtxSsrc);\n            // Add to the map.\n            ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n        }\n    }\n    // If the set of SSRCs is not empty it means that RTX is not being used, so take\n    // media SSRCs from there.\n    for (const ssrc of ssrcs) {\n        // Add to the map.\n        ssrcToRtxSsrc.set(ssrc, null);\n    }\n    const encodings = [];\n    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n        const encoding = { ssrc };\n        if (rtxSsrc)\n            encoding.rtx = { ssrc: rtxSsrc };\n        encodings.push(encoding);\n    }\n    return encodings;\n}\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast({ offerMediaObject, track, numStreams }) {\n    if (numStreams <= 1)\n        throw new TypeError('numStreams must be greater than 1');\n    let firstSsrc;\n    let firstRtxSsrc;\n    let streamId;\n    // Get the SSRC.\n    const ssrcMsidLine = (offerMediaObject.ssrcs || [])\n        .find((line) => {\n        if (line.attribute !== 'msid')\n            return false;\n        const trackId = line.value.split(' ')[1];\n        if (trackId === track.id) {\n            firstSsrc = line.id;\n            streamId = line.value.split(' ')[0];\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    if (!ssrcMsidLine)\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n    // Get the SSRC for RTX.\n    (offerMediaObject.ssrcGroups || [])\n        .some((line) => {\n        if (line.semantics !== 'FID')\n            return false;\n        const ssrcs = line.ssrcs.split(/\\s+/);\n        if (Number(ssrcs[0]) === firstSsrc) {\n            firstRtxSsrc = Number(ssrcs[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    const ssrcCnameLine = offerMediaObject.ssrcs\n        .find((line) => (line.attribute === 'cname' && line.id === firstSsrc));\n    if (!ssrcCnameLine)\n        throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);\n    const cname = ssrcCnameLine.value;\n    const ssrcs = [];\n    const rtxSsrcs = [];\n    for (let i = 0; i < numStreams; ++i) {\n        ssrcs.push(firstSsrc + i);\n        if (firstRtxSsrc)\n            rtxSsrcs.push(firstRtxSsrc + i);\n    }\n    offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];\n    offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];\n    offerMediaObject.ssrcGroups.push({\n        semantics: 'SIM',\n        ssrcs: ssrcs.join(' ')\n    });\n    for (let i = 0; i < ssrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId} ${track.id}`\n        });\n    }\n    for (let i = 0; i < rtxSsrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        const rtxSsrc = rtxSsrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'msid',\n            value: `${streamId} ${track.id}`\n        });\n        offerMediaObject.ssrcGroups.push({\n            semantics: 'FID',\n            ssrcs: `${ssrc} ${rtxSsrc}`\n        });\n    }\n}\nexports.addLegacySimulcast = addLegacySimulcast;\n"]},"metadata":{},"sourceType":"script"}