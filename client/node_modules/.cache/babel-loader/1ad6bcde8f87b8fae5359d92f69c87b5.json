{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataConsumer = void 0;\n\nconst Logger_1 = require(\"./Logger\");\n\nconst EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\n\nconst logger = new Logger_1.Logger('DataConsumer');\n\nclass DataConsumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n  /**\n   * @emits transportclose\n   * @emits open\n   * @emits error - (error: Error)\n   * @emits close\n   * @emits message - (message: any)\n   * @emits @close\n   */\n  constructor({\n    id,\n    dataProducerId,\n    dataChannel,\n    sctpStreamParameters,\n    appData\n  }) {\n    super(); // Closed flag.\n\n    this._closed = false; // Observer instance.\n\n    this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n    logger.debug('constructor()');\n    this._id = id;\n    this._dataProducerId = dataProducerId;\n    this._dataChannel = dataChannel;\n    this._sctpStreamParameters = sctpStreamParameters;\n    this._appData = appData;\n\n    this._handleDataChannel();\n  }\n  /**\n   * DataConsumer id.\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * Associated DataProducer id.\n   */\n\n\n  get dataProducerId() {\n    return this._dataProducerId;\n  }\n  /**\n   * Whether the DataConsumer is closed.\n   */\n\n\n  get closed() {\n    return this._closed;\n  }\n  /**\n   * SCTP stream parameters.\n   */\n\n\n  get sctpStreamParameters() {\n    return this._sctpStreamParameters;\n  }\n  /**\n   * DataChannel readyState.\n   */\n\n\n  get readyState() {\n    return this._dataChannel.readyState;\n  }\n  /**\n   * DataChannel label.\n   */\n\n\n  get label() {\n    return this._dataChannel.label;\n  }\n  /**\n   * DataChannel protocol.\n   */\n\n\n  get protocol() {\n    return this._dataChannel.protocol;\n  }\n  /**\n   * DataChannel binaryType.\n   */\n\n\n  get binaryType() {\n    return this._dataChannel.binaryType;\n  }\n  /**\n   * Set DataChannel binaryType.\n   */\n\n\n  set binaryType(binaryType) {\n    this._dataChannel.binaryType = binaryType;\n  }\n  /**\n   * App custom data.\n   */\n\n\n  get appData() {\n    return this._appData;\n  }\n  /**\n   * Invalid setter.\n   */\n\n\n  set appData(appData) {\n    throw new Error('cannot override appData object');\n  }\n  /**\n   * Observer.\n   *\n   * @emits close\n   */\n\n\n  get observer() {\n    return this._observer;\n  }\n  /**\n   * Closes the DataConsumer.\n   */\n\n\n  close() {\n    if (this._closed) return;\n    logger.debug('close()');\n    this._closed = true;\n\n    this._dataChannel.close();\n\n    this.emit('@close'); // Emit observer event.\n\n    this._observer.safeEmit('close');\n  }\n  /**\n   * Transport was closed.\n   */\n\n\n  transportClosed() {\n    if (this._closed) return;\n    logger.debug('transportClosed()');\n    this._closed = true;\n\n    this._dataChannel.close();\n\n    this.safeEmit('transportclose'); // Emit observer event.\n\n    this._observer.safeEmit('close');\n  }\n\n  _handleDataChannel() {\n    this._dataChannel.addEventListener('open', () => {\n      if (this._closed) return;\n      logger.debug('DataChannel \"open\" event');\n      this.safeEmit('open');\n    });\n\n    this._dataChannel.addEventListener('error', event => {\n      if (this._closed) return;\n      let {\n        error\n      } = event;\n      if (!error) error = new Error('unknown DataChannel error');\n\n      if (error.errorDetail === 'sctp-failure') {\n        logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);\n      } else {\n        logger.error('DataChannel \"error\" event: %o', error);\n      }\n\n      this.safeEmit('error', error);\n    });\n\n    this._dataChannel.addEventListener('close', () => {\n      if (this._closed) return;\n      logger.warn('DataChannel \"close\" event');\n      this._closed = true;\n      this.emit('@close');\n      this.safeEmit('close');\n    });\n\n    this._dataChannel.addEventListener('message', event => {\n      if (this._closed) return;\n      this.safeEmit('message', event.data);\n    });\n  }\n\n}\n\nexports.DataConsumer = DataConsumer;","map":{"version":3,"sources":["/home/param/Desktop/huddle01-task/client/node_modules/mediasoup-client/lib/DataConsumer.js"],"names":["Object","defineProperty","exports","value","DataConsumer","Logger_1","require","EnhancedEventEmitter_1","logger","Logger","EnhancedEventEmitter","constructor","id","dataProducerId","dataChannel","sctpStreamParameters","appData","_closed","_observer","debug","_id","_dataProducerId","_dataChannel","_sctpStreamParameters","_appData","_handleDataChannel","closed","readyState","label","protocol","binaryType","Error","observer","close","emit","safeEmit","transportClosed","addEventListener","event","error","errorDetail","sctpCauseCode","message","warn","data"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataConsumer = void 0;\nconst Logger_1 = require(\"./Logger\");\nconst EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\nconst logger = new Logger_1.Logger('DataConsumer');\nclass DataConsumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n    /**\n     * @emits transportclose\n     * @emits open\n     * @emits error - (error: Error)\n     * @emits close\n     * @emits message - (message: any)\n     * @emits @close\n     */\n    constructor({ id, dataProducerId, dataChannel, sctpStreamParameters, appData }) {\n        super();\n        // Closed flag.\n        this._closed = false;\n        // Observer instance.\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger.debug('constructor()');\n        this._id = id;\n        this._dataProducerId = dataProducerId;\n        this._dataChannel = dataChannel;\n        this._sctpStreamParameters = sctpStreamParameters;\n        this._appData = appData;\n        this._handleDataChannel();\n    }\n    /**\n     * DataConsumer id.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Associated DataProducer id.\n     */\n    get dataProducerId() {\n        return this._dataProducerId;\n    }\n    /**\n     * Whether the DataConsumer is closed.\n     */\n    get closed() {\n        return this._closed;\n    }\n    /**\n     * SCTP stream parameters.\n     */\n    get sctpStreamParameters() {\n        return this._sctpStreamParameters;\n    }\n    /**\n     * DataChannel readyState.\n     */\n    get readyState() {\n        return this._dataChannel.readyState;\n    }\n    /**\n     * DataChannel label.\n     */\n    get label() {\n        return this._dataChannel.label;\n    }\n    /**\n     * DataChannel protocol.\n     */\n    get protocol() {\n        return this._dataChannel.protocol;\n    }\n    /**\n     * DataChannel binaryType.\n     */\n    get binaryType() {\n        return this._dataChannel.binaryType;\n    }\n    /**\n     * Set DataChannel binaryType.\n     */\n    set binaryType(binaryType) {\n        this._dataChannel.binaryType = binaryType;\n    }\n    /**\n     * App custom data.\n     */\n    get appData() {\n        return this._appData;\n    }\n    /**\n     * Invalid setter.\n     */\n    set appData(appData) {\n        throw new Error('cannot override appData object');\n    }\n    /**\n     * Observer.\n     *\n     * @emits close\n     */\n    get observer() {\n        return this._observer;\n    }\n    /**\n     * Closes the DataConsumer.\n     */\n    close() {\n        if (this._closed)\n            return;\n        logger.debug('close()');\n        this._closed = true;\n        this._dataChannel.close();\n        this.emit('@close');\n        // Emit observer event.\n        this._observer.safeEmit('close');\n    }\n    /**\n     * Transport was closed.\n     */\n    transportClosed() {\n        if (this._closed)\n            return;\n        logger.debug('transportClosed()');\n        this._closed = true;\n        this._dataChannel.close();\n        this.safeEmit('transportclose');\n        // Emit observer event.\n        this._observer.safeEmit('close');\n    }\n    _handleDataChannel() {\n        this._dataChannel.addEventListener('open', () => {\n            if (this._closed)\n                return;\n            logger.debug('DataChannel \"open\" event');\n            this.safeEmit('open');\n        });\n        this._dataChannel.addEventListener('error', (event) => {\n            if (this._closed)\n                return;\n            let { error } = event;\n            if (!error)\n                error = new Error('unknown DataChannel error');\n            if (error.errorDetail === 'sctp-failure') {\n                logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);\n            }\n            else {\n                logger.error('DataChannel \"error\" event: %o', error);\n            }\n            this.safeEmit('error', error);\n        });\n        this._dataChannel.addEventListener('close', () => {\n            if (this._closed)\n                return;\n            logger.warn('DataChannel \"close\" event');\n            this._closed = true;\n            this.emit('@close');\n            this.safeEmit('close');\n        });\n        this._dataChannel.addEventListener('message', (event) => {\n            if (this._closed)\n                return;\n            this.safeEmit('message', event.data);\n        });\n    }\n}\nexports.DataConsumer = DataConsumer;\n"]},"metadata":{},"sourceType":"script"}