{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.segwitNativeAccount = exports.segwitAccount = exports.legacyAccount = exports.describeUTXOPath = exports.unknownUTXOPath = exports.BTCOutputAddressType = exports.BTCOutputScriptType = exports.BTCInputScriptType = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nvar BTCInputScriptType;\n\n(function (BTCInputScriptType) {\n  BTCInputScriptType[\"CashAddr\"] = \"cashaddr\";\n  BTCInputScriptType[\"Bech32\"] = \"bech32\";\n  BTCInputScriptType[\"SpendAddress\"] = \"p2pkh\";\n  BTCInputScriptType[\"SpendMultisig\"] = \"p2sh\";\n  BTCInputScriptType[\"External\"] = \"external\";\n  BTCInputScriptType[\"SpendWitness\"] = \"p2wpkh\";\n  BTCInputScriptType[\"SpendP2SHWitness\"] = \"p2sh-p2wpkh\";\n})(BTCInputScriptType = exports.BTCInputScriptType || (exports.BTCInputScriptType = {}));\n\nvar BTCOutputScriptType;\n\n(function (BTCOutputScriptType) {\n  BTCOutputScriptType[\"PayToAddress\"] = \"p2pkh\";\n  BTCOutputScriptType[\"PayToMultisig\"] = \"p2sh\";\n  BTCOutputScriptType[\"PayToWitness\"] = \"p2wpkh\";\n  BTCOutputScriptType[\"PayToP2SHWitness\"] = \"p2sh-p2wpkh\";\n})(BTCOutputScriptType = exports.BTCOutputScriptType || (exports.BTCOutputScriptType = {}));\n\nvar BTCOutputAddressType;\n\n(function (BTCOutputAddressType) {\n  BTCOutputAddressType[\"Spend\"] = \"spend\";\n  BTCOutputAddressType[\"Transfer\"] = \"transfer\";\n  BTCOutputAddressType[\"Change\"] = \"change\";\n  BTCOutputAddressType[\"Exchange\"] = \"exchange\";\n})(BTCOutputAddressType = exports.BTCOutputAddressType || (exports.BTCOutputAddressType = {}));\n\nfunction unknownUTXOPath(path, coin, scriptType) {\n  return {\n    verbose: utils_1.addressNListToBIP32(path),\n    coin,\n    scriptType,\n    isKnown: false\n  };\n}\n\nexports.unknownUTXOPath = unknownUTXOPath;\n\nfunction describeUTXOPath(path, coin, scriptType) {\n  const unknown = unknownUTXOPath(path, coin, scriptType);\n  if (path.length !== 3 && path.length !== 5) return unknown;\n  if ((path[0] & 0x80000000) >>> 0 !== 0x80000000) return unknown;\n  let purpose = path[0] & 0x7fffffff;\n  if (![44, 49, 84].includes(purpose)) return unknown;\n  if (purpose === 44 && scriptType !== BTCInputScriptType.SpendAddress) return unknown;\n  if (purpose === 49 && scriptType !== BTCInputScriptType.SpendP2SHWitness) return unknown;\n  if (purpose === 84 && scriptType !== BTCInputScriptType.SpendWitness) return unknown;\n  let wholeAccount = path.length === 3;\n  let script = {\n    [BTCInputScriptType.SpendAddress]: [\"Legacy\"],\n    [BTCInputScriptType.SpendP2SHWitness]: [],\n    [BTCInputScriptType.SpendWitness]: [\"Segwit Native\"]\n  }[scriptType];\n  let isPrefork = false;\n  const slip44 = utils_1.slip44ByCoin(coin);\n  if (slip44 === undefined) return unknown;\n\n  if (path[1] !== 0x80000000 + slip44) {\n    switch (coin) {\n      case \"BitcoinCash\":\n      case \"BitcoinGold\":\n        {\n          if (path[1] === 0x80000000 + utils_1.slip44ByCoin(\"Bitcoin\")) {\n            isPrefork = true;\n            break;\n          }\n\n          return unknown;\n        }\n\n      case \"BitcoinSV\":\n        {\n          if (path[1] === 0x80000000 + utils_1.slip44ByCoin(\"Bitcoin\") || path[1] === 0x80000000 + utils_1.slip44ByCoin(\"BitcoinCash\")) {\n            isPrefork = true;\n            break;\n          }\n\n          return unknown;\n        }\n\n      default:\n        return unknown;\n    }\n  }\n\n  let attributes = isPrefork ? [\"Prefork\"] : [];\n\n  switch (coin) {\n    case \"Bitcoin\":\n    case \"Litecoin\":\n    case \"BitcoinGold\":\n    case \"Testnet\":\n      {\n        if (script) attributes = attributes.concat(script);\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  let attr = attributes.length ? ` (${attributes.join(\", \")})` : \"\";\n  let accountIdx = path[2] & 0x7fffffff;\n\n  if (wholeAccount) {\n    return {\n      coin,\n      verbose: `${coin} Account #${accountIdx}${attr}`,\n      accountIdx,\n      wholeAccount: true,\n      isKnown: true,\n      scriptType,\n      isPrefork\n    };\n  } else {\n    let change = path[3] === 1 ? \"Change \" : \"\";\n    let addressIdx = path[4];\n    return {\n      coin,\n      verbose: `${coin} Account #${accountIdx}, ${change}Address #${addressIdx}${attr}`,\n      accountIdx,\n      addressIdx,\n      wholeAccount: false,\n      isKnown: true,\n      isChange: path[3] === 1,\n      scriptType,\n      isPrefork\n    };\n  }\n}\n\nexports.describeUTXOPath = describeUTXOPath;\n\nfunction legacyAccount(coin, slip44, accountIdx) {\n  return {\n    coin,\n    scriptType: BTCInputScriptType.SpendAddress,\n    addressNList: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + accountIdx]\n  };\n}\n\nexports.legacyAccount = legacyAccount;\n\nfunction segwitAccount(coin, slip44, accountIdx) {\n  return {\n    coin,\n    scriptType: BTCInputScriptType.SpendP2SHWitness,\n    addressNList: [0x80000000 + 49, 0x80000000 + slip44, 0x80000000 + accountIdx]\n  };\n}\n\nexports.segwitAccount = segwitAccount;\n\nfunction segwitNativeAccount(coin, slip44, accountIdx) {\n  return {\n    coin,\n    scriptType: BTCInputScriptType.SpendWitness,\n    addressNList: [0x80000000 + 84, 0x80000000 + slip44, 0x80000000 + accountIdx]\n  };\n}\n\nexports.segwitNativeAccount = segwitNativeAccount;","map":{"version":3,"sources":["../src/bitcoin.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.segwitNativeAccount = exports.segwitAccount = exports.legacyAccount = exports.describeUTXOPath = exports.unknownUTXOPath = exports.BTCOutputAddressType = exports.BTCOutputScriptType = exports.BTCInputScriptType = void 0;\nconst utils_1 = require(\"./utils\");\nvar BTCInputScriptType;\n(function (BTCInputScriptType) {\n    BTCInputScriptType[\"CashAddr\"] = \"cashaddr\";\n    BTCInputScriptType[\"Bech32\"] = \"bech32\";\n    BTCInputScriptType[\"SpendAddress\"] = \"p2pkh\";\n    BTCInputScriptType[\"SpendMultisig\"] = \"p2sh\";\n    BTCInputScriptType[\"External\"] = \"external\";\n    BTCInputScriptType[\"SpendWitness\"] = \"p2wpkh\";\n    BTCInputScriptType[\"SpendP2SHWitness\"] = \"p2sh-p2wpkh\";\n})(BTCInputScriptType = exports.BTCInputScriptType || (exports.BTCInputScriptType = {}));\nvar BTCOutputScriptType;\n(function (BTCOutputScriptType) {\n    BTCOutputScriptType[\"PayToAddress\"] = \"p2pkh\";\n    BTCOutputScriptType[\"PayToMultisig\"] = \"p2sh\";\n    BTCOutputScriptType[\"PayToWitness\"] = \"p2wpkh\";\n    BTCOutputScriptType[\"PayToP2SHWitness\"] = \"p2sh-p2wpkh\";\n})(BTCOutputScriptType = exports.BTCOutputScriptType || (exports.BTCOutputScriptType = {}));\nvar BTCOutputAddressType;\n(function (BTCOutputAddressType) {\n    BTCOutputAddressType[\"Spend\"] = \"spend\";\n    BTCOutputAddressType[\"Transfer\"] = \"transfer\";\n    BTCOutputAddressType[\"Change\"] = \"change\";\n    BTCOutputAddressType[\"Exchange\"] = \"exchange\";\n})(BTCOutputAddressType = exports.BTCOutputAddressType || (exports.BTCOutputAddressType = {}));\nfunction unknownUTXOPath(path, coin, scriptType) {\n    return {\n        verbose: utils_1.addressNListToBIP32(path),\n        coin,\n        scriptType,\n        isKnown: false,\n    };\n}\nexports.unknownUTXOPath = unknownUTXOPath;\nfunction describeUTXOPath(path, coin, scriptType) {\n    const unknown = unknownUTXOPath(path, coin, scriptType);\n    if (path.length !== 3 && path.length !== 5)\n        return unknown;\n    if ((path[0] & 0x80000000) >>> 0 !== 0x80000000)\n        return unknown;\n    let purpose = path[0] & 0x7fffffff;\n    if (![44, 49, 84].includes(purpose))\n        return unknown;\n    if (purpose === 44 && scriptType !== BTCInputScriptType.SpendAddress)\n        return unknown;\n    if (purpose === 49 && scriptType !== BTCInputScriptType.SpendP2SHWitness)\n        return unknown;\n    if (purpose === 84 && scriptType !== BTCInputScriptType.SpendWitness)\n        return unknown;\n    let wholeAccount = path.length === 3;\n    let script = {\n        [BTCInputScriptType.SpendAddress]: [\"Legacy\"],\n        [BTCInputScriptType.SpendP2SHWitness]: [],\n        [BTCInputScriptType.SpendWitness]: [\"Segwit Native\"],\n    }[scriptType];\n    let isPrefork = false;\n    const slip44 = utils_1.slip44ByCoin(coin);\n    if (slip44 === undefined)\n        return unknown;\n    if (path[1] !== 0x80000000 + slip44) {\n        switch (coin) {\n            case \"BitcoinCash\":\n            case \"BitcoinGold\": {\n                if (path[1] === 0x80000000 + utils_1.slip44ByCoin(\"Bitcoin\")) {\n                    isPrefork = true;\n                    break;\n                }\n                return unknown;\n            }\n            case \"BitcoinSV\": {\n                if (path[1] === 0x80000000 + utils_1.slip44ByCoin(\"Bitcoin\") || path[1] === 0x80000000 + utils_1.slip44ByCoin(\"BitcoinCash\")) {\n                    isPrefork = true;\n                    break;\n                }\n                return unknown;\n            }\n            default:\n                return unknown;\n        }\n    }\n    let attributes = isPrefork ? [\"Prefork\"] : [];\n    switch (coin) {\n        case \"Bitcoin\":\n        case \"Litecoin\":\n        case \"BitcoinGold\":\n        case \"Testnet\": {\n            if (script)\n                attributes = attributes.concat(script);\n            break;\n        }\n        default:\n            break;\n    }\n    let attr = attributes.length ? ` (${attributes.join(\", \")})` : \"\";\n    let accountIdx = path[2] & 0x7fffffff;\n    if (wholeAccount) {\n        return {\n            coin,\n            verbose: `${coin} Account #${accountIdx}${attr}`,\n            accountIdx,\n            wholeAccount: true,\n            isKnown: true,\n            scriptType,\n            isPrefork,\n        };\n    }\n    else {\n        let change = path[3] === 1 ? \"Change \" : \"\";\n        let addressIdx = path[4];\n        return {\n            coin,\n            verbose: `${coin} Account #${accountIdx}, ${change}Address #${addressIdx}${attr}`,\n            accountIdx,\n            addressIdx,\n            wholeAccount: false,\n            isKnown: true,\n            isChange: path[3] === 1,\n            scriptType,\n            isPrefork,\n        };\n    }\n}\nexports.describeUTXOPath = describeUTXOPath;\nfunction legacyAccount(coin, slip44, accountIdx) {\n    return {\n        coin,\n        scriptType: BTCInputScriptType.SpendAddress,\n        addressNList: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + accountIdx],\n    };\n}\nexports.legacyAccount = legacyAccount;\nfunction segwitAccount(coin, slip44, accountIdx) {\n    return {\n        coin,\n        scriptType: BTCInputScriptType.SpendP2SHWitness,\n        addressNList: [0x80000000 + 49, 0x80000000 + slip44, 0x80000000 + accountIdx],\n    };\n}\nexports.segwitAccount = segwitAccount;\nfunction segwitNativeAccount(coin, slip44, accountIdx) {\n    return {\n        coin,\n        scriptType: BTCInputScriptType.SpendWitness,\n        addressNList: [0x80000000 + 84, 0x80000000 + slip44, 0x80000000 + accountIdx],\n    };\n}\nexports.segwitNativeAccount = segwitNativeAccount;\n//# sourceMappingURL=bitcoin.js.map"]},"metadata":{},"sourceType":"script"}